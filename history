
# 2017-09-24 22:21:44.822149
+ls

# 2017-09-24 22:21:50.905159
+import tensorflow as tf

# 2017-09-24 22:26:58.756966
+%pdb

# 2017-09-24 22:27:10.745077
+a = tf.constant("Hello")

# 2017-09-24 22:27:15.863991
+sess = tf.InteractiveSession()

# 2017-09-24 22:27:23.381955
+sess.run(a)

# 2017-09-24 22:32:03.055018
+import tensorflow as tf

# 2017-09-24 22:32:11.276240
+import numpy as np

# 2017-09-24 22:33:27.465921
+import tensorflow as tf

# 2017-09-24 22:33:29.829148
+import numpy as np

# 2017-09-25 10:35:26.252370
+import gym
+env = gym.make('SpaceInvaders-v0')
+env.reset()
+env.render()

# 2017-09-25 10:36:09.438618
+import gym
+env = gym.make('FrozenLake-v0')
+env.reset()
+env.render()

# 2017-09-25 13:07:57.549581
+import gym
+env = gym.make('SpaceInvaders-v0')
+env.reset()
+env.render()

# 2017-09-25 13:08:33.820788
+obs = env.reset()

# 2017-09-25 13:08:34.774927
+ob

# 2017-09-25 13:08:37.014485
+obsl

# 2017-09-25 13:08:38.216428
+obs

# 2017-09-25 13:09:16.589151
+obs.shape

# 2017-09-25 13:10:57.279108
+import gym
+env = gym.make('SpaceInvaders-v0')
+for i in range(10):
+    obs = env.reset()
+    for j in range(100):
+        action = env.action_space.sample()
+        state, 
+
+

# 2017-09-25 13:11:41.774586
+import gym
+env = gym.make('SpaceInvaders-v0')
+for i in range(10):
+    obs = env.reset()
+    for j in range(100):
+        action = env.action_space.sample()
+        obs, reward, done, info = env.step(action)
+        env.render()

# 2017-09-25 13:43:29.963608
+import gym

# 2017-09-25 13:44:31.676406
+from gym.spaces.discrete import Discrete

# 2017-09-25 15:34:02.696493
+import opencv

# 2017-09-25 15:46:01.330837
+import cv2

# 2017-09-25 15:46:21.581955
+import cv

# 2017-09-25 15:46:28.626098
+import numpy as np

# 2017-09-25 15:46:29.737985
+import cv

# 2017-09-25 15:46:30.860978
+import cv2

# 2017-09-25 17:04:52.143596
+id

# 2017-09-25 17:04:54.161736
+import cv2

# 2017-09-25 17:04:55.807358
+import cv

# 2017-09-25 17:04:58.439065
+import cv2

# 2017-09-25 17:24:53.462487
+import cv 

# 2017-09-25 17:24:54.744121
+import cv2

# 2017-09-25 17:27:12.401799
+import numpy as np

# 2017-09-25 17:27:23.617267
+np.arange(10)

# 2017-09-25 17:28:46.002041
+import cv2

# 2017-09-25 17:30:08.205282
+y

# 2017-09-25 17:30:34.133246
+import cv2

# 2017-09-25 19:24:03.821876
+cv2.ACCESS_FAST

# 2017-09-28 08:27:21.836359
+import cv2

# 2017-09-28 08:30:02.803201
+
+import pdb; pdb.set_trace()

# 2017-09-28 08:30:14.085091
+import cv2

# 2017-09-28 08:30:18.281353
+import numpy as np

# 2017-09-28 08:30:32.498703
+a = np.ones((10, 20))

# 2017-09-28 08:32:11.823627
+
+import pdb; pdb.set_trace()

# 2017-09-28 09:11:57.586381
+import gym

# 2017-09-28 09:13:48.927036
+import gym
+env = gym.make('SpaceInvaders-v0')
+for i in range(10):
+    obs = env.reset()
+    for j in range(100):
+        action = env.action_space.sample()
+        obs, reward, done, info = env.step(action)
+        env.render()

# 2017-09-30 03:05:28.708172
+import django_socketio

# 2017-09-30 03:05:33.056005
+django_socketio.broadcast

# 2017-10-01 00:29:23.551701
+import gym
+env = gym.make('Humanoid-v1')

# 2017-10-01 00:45:00.439002
+import gym

# 2017-10-01 00:46:14.240295
+gym

# 2017-10-01 01:05:16.707433
+import tensorflow as tf

# 2017-10-01 01:06:21.473895
+with tf.variable_scope('my_socpe'):
+    v1 = tf.get_variable('var1', shape=[1])

# 2017-10-01 01:06:24.070060
+print(v1)

# 2017-10-01 01:06:32.184103
+with tf.variable_scope('my_socpe'):
+    v1 = tf.get_variable('var2', shape=[1])

# 2017-10-01 01:06:39.097523
+with tf.variable_scope('my_socpe'):
+    v2 = tf.get_variable('var2', shape=[1])

# 2017-10-01 01:06:53.302848
+c1

# 2017-10-01 01:06:54.894924
+v1

# 2017-10-01 01:06:55.839542
+v2

# 2017-10-01 01:07:13.753631
+with tf.variable_scope('my_socpe2'):
+    v1 = tf.get_variable('var2', shape=[1])

# 2017-10-01 01:07:19.412074
+with tf.variable_scope('my_socpe2'):
+    v2 = tf.get_variable('var2', shape=[1])

# 2017-10-01 01:25:39.780295
+import tensorflow as tf

# 2017-10-01 01:26:09.276414
+tf.summary.FileWriter

# 2017-10-01 01:26:14.510454
+tf.summary.FileWriter('.')

# 2017-10-01 01:26:23.705636
+summary_writer = _

# 2017-10-01 01:26:25.242561
+summary_writer

# 2017-10-01 01:42:08.342619
+s = tf.Summary()

# 2017-10-01 01:42:40.219072
+help(s.value.add)

# 2017-10-01 01:42:54.731385
+s.value.add(10, 'hoge', 'hage')

# 2017-10-01 01:43:22.912827
+s.value.add(simple_value=10, node_name='hoge', tag='hage')

# 2017-10-01 01:43:25.047703
+s

# 2017-10-01 01:43:39.808775
+s.value.add(simple_value=20, node_name='hoge2', tag='hage2')

# 2017-10-01 01:43:40.697518
+s

# 2017-10-01 01:43:51.864583
+s.value.add(simple_value=30, node_name='hoge2', tag='hage2')

# 2017-10-01 01:43:52.913900
+s

# 2017-10-01 01:44:19.756922
+summary_writer.add_summary(s)

# 2017-10-01 01:44:22.209945
+summary_writer

# 2017-10-01 04:01:12.368330
+import numpy as np

# 2017-10-01 04:01:22.666521
+np.prod(np.arange(1, 10))

# 2017-10-01 04:05:32.377546
+import baselines.common.tf_util as U

# 2017-10-01 04:05:38.094853
+U.dense

# 2017-10-01 04:05:45.186710
+help(U.dense)

# 2017-10-01 04:06:06.139473
+help(U.TfInput)

# 2017-10-01 04:06:29.932527
+help(U.conv2d)

# 2017-10-01 17:29:41.596872
+import baselines.common.tf_util as U

# 2017-10-01 17:29:57.898858
+U.save_state('experiment_dir')

# 2017-10-01 17:30:21.326086
+import os

# 2017-10-01 17:30:31.295095
+os.path.dirname('experiment_dir')

# 2017-10-01 17:30:56.561281
+os.makedirs(os.path.dirname('experiment_dir'), exist_ok=True)

# 2017-10-01 17:31:13.857049
+os.path.exists('experiment_dir')

# 2017-10-01 17:31:21.313818
+os.makedirs(os.path.dirname('experiment_dir'), exist_ok=False)

# 2017-10-01 17:31:43.643369
+import baselines.common.tf_util as U

# 2017-10-01 17:31:46.773098
+U.save_state('experiment_dir')

# 2017-10-01 17:31:57.369643
+import os

# 2017-10-01 17:32:05.329798
+os.path.exists('experiment_dir')

# 2017-10-01 17:32:11.235048
+os.path.dirname('experiment_dir')

# 2017-10-01 17:32:14.321095
+os.path.dirname('experim')

# 2017-10-01 17:32:40.489606
+os.path.dirname(['experiment_dir', 'hoge'])

# 2017-10-01 17:32:47.140705
+os.path.dirname('experiment_dir', 'hoge')

# 2017-10-01 17:33:15.988842
+os.path.dirname(os.path.abspath(__file__))

# 2017-10-01 17:33:33.341356
+os.path.abspath(__file__)

# 2017-10-01 17:34:05.740340
+os.path.dirname(os.path.abspath(__file__))

# 2017-10-01 17:48:31.664341
+import gym

# 2017-10-01 17:48:35.479383
+env = gym.make('Humanoid-v1')

# 2017-10-01 17:48:39.904192
+env = gym.make('Breakout-v0')

# 2017-10-01 17:49:02.721294
+import baselines.common.tf_util as U

# 2017-10-01 17:49:12.924622
+U.BatchInput(env.observation_space.shape, name=name)

# 2017-10-01 17:49:16.100870
+name='hoge'

# 2017-10-01 17:49:17.047535
+U.BatchInput(env.observation_space.shape, name=name)

# 2017-10-01 17:49:26.818607
+state = _

# 2017-10-01 17:49:41.092216
+state.name

# 2017-10-01 17:50:22.351816
+state()

# 2017-10-01 17:50:25.316281
+state.get

# 2017-10-01 17:50:47.989109
+state.get()

# 2017-10-01 17:53:24.436891
+state

# 2017-10-01 18:13:14.442373
+sess = U.make_session(num_cpu=num_cpu)

# 2017-10-01 18:13:19.144387
+num_cpu = 3

# 2017-10-01 18:13:20.206863
+sess = U.make_session(num_cpu=num_cpu)

# 2017-10-01 18:13:21.759294
+sess

# 2017-10-01 18:13:29.573977
+sess.__enter__()

# 2017-10-01 18:13:39.167675
+help(sess.__enter__)

# 2017-10-01 19:06:53.663685
+from tensorforce import Configuration
+from tensorforce.agents import TRPOAgent
+from tensorforce.core.networks import layered_network_builder

# 2017-10-01 19:07:46.268740
+import tensorforce

# 2017-10-01 19:07:47.538031
+tensorforce

# 2017-10-02 03:55:49.566080
+import cv2

# 2017-10-02 03:56:02.876772
+import gym

# 2017-10-02 03:56:13.705086
+env = gym.make('MsPacman-v0')

# 2017-10-02 04:08:48.371896
+import gym
+import universe  # register the universe environments
+
+env = gym.make('flashgames.DuskDrive-v0')
+env.configure(remotes=1)  # automatically creates a local docker container
+observation_n = env.reset()
+
+while True:
+  action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]  # your agent here
+  observation_n, reward_n, done_n, info = env.step(action_n)
+  env.render()

# 2017-10-02 16:00:09.796048
+env = gym.make('flashgames.DuskDrive-v0')

# 2017-10-02 16:00:16.612662
+env.configure(remotes=1)  # automatically creates a local docker container

# 2017-10-02 16:00:28.712271
+import gym
+import universe  # register the universe environments
+
+env = gym.make('flashgames.DuskDrive-v0')
+env.configure(remotes=0)  # automatically creates a local docker container
+observation_n = env.reset()
+
+while True:
+  action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]  # your agent here
+  observation_n, reward_n, done_n, info = env.step(action_n)
+  env.render()

# 2017-10-02 16:00:36.785170
+env.configure(remotes=0)  # automatically creates a local docker container

# 2017-10-02 16:01:52.619040
+import docket

# 2017-10-02 16:01:54.557572
+import docker

# 2017-10-02 16:02:08.225835
+docker.client

# 2017-10-02 16:02:32.376757
+help(docker.client)

# 2017-10-02 16:02:49.262612
+help(docker.DockerClient)

# 2017-10-02 16:03:00.194332
+import gym
+import universe  # register the universe environments
+
+env = gym.make('flashgames.DuskDrive-v0')
+env.configure(remotes=0)  # automatically creates a local docker container
+observation_n = env.reset()
+
+while True:
+  action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]  # your agent here
+  observation_n, reward_n, done_n, info = env.step(action_n)
+  env.render()

# 2017-10-02 16:03:08.715370
+env.configure(remotes=0)  # automatically creates a local docker container

# 2017-10-02 16:15:47.724039
+import gym
+import universe  # register the universe environments
+
+env = gym.make('flashgames.DuskDrive-v0')
+env.configure(remotes=0)  # automatically creates a local docker container
+observation_n = env.reset()
+
+while True:
+  action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]  # your agent here
+  observation_n, reward_n, done_n, info = env.step(action_n)
+  env.render()

# 2017-10-02 16:17:00.983731
+import docker

# 2017-10-02 16:17:11.686603
+import dock

# 2017-10-02 16:17:16.517271
+import docker

# 2017-10-02 16:17:19.228637
+import dockerpycreds

# 2017-10-02 16:17:23.699228
+docker.client

# 2017-10-02 16:17:30.363594
+help(docker.client)

# 2017-10-02 16:18:27.240414
+import gym
+import universe  # register the universe environments
+
+env = gym.make('flashgames.DuskDrive-v0')
+env.configure(remotes=0)  # automatically creates a local docker container
+observation_n = env.reset()
+
+while True:
+  action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]  # your agent here
+  observation_n, reward_n, done_n, info = env.step(action_n)
+  env.render()

# 2017-10-02 16:18:34.253438
+docker

# 2017-10-02 16:18:41.520382
+env.configure()

# 2017-10-02 16:19:17.659133
+import gym
+import universe  # register the universe environments
+
+env = gym.make('flashgames.DuskDrive-v0')
+env.configure(remotes=0)  # automatically creates a local docker container
+observation_n = env.reset()
+
+while True:
+  action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]  # your agent here
+  observation_n, reward_n, done_n, info = env.step(action_n)
+  env.render()

# 2017-10-02 16:19:44.781092
+import os

# 2017-10-02 16:20:10.316150
+os.environ.get('DOCKER_TLS_VERIFY')

# 2017-10-02 16:20:31.593556
+import gym
+import universe  # register the universe environments
+
+env = gym.make('flashgames.DuskDrive-v0')
+env.configure(remotes=0)  # automatically creates a local docker container
+observation_n = env.reset()
+
+while True:
+  action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]  # your agent here
+  observation_n, reward_n, done_n, info = env.step(action_n)
+  env.render()

# 2017-10-02 16:43:09.925880
+import gym
+import universe  # register the universe environments
+
+env = gym.make('flashgames.DuskDrive-v0')
+env.configure(remotes=1)  # automatically creates a local docker container
+observation_n = env.reset()
+
+while True:
+  action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]  # your agent here
+  observation_n, reward_n, done_n, info = env.step(action_n)
+  env.render()

# 2017-10-02 16:49:21.079891
+import gym

# 2017-10-02 16:49:24.974159
+import universe

# 2017-10-02 16:49:30.131538
+env = gym.make('flashgames.DuskDrive-v0')

# 2017-10-02 16:49:38.438678
+env.configure(remote=1)

# 2017-10-02 16:49:50.178781
+env.configure(remotes=1)

# 2017-10-02 16:50:02.731377
+import gym
+import universe  # register the universe environments
+
+env = gym.make('flashgames.DuskDrive-v0')
+# env.configure(remotes=1)  # automatically creates a local docker container
+observation_n = env.reset()
+
+while True:
+  action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]  # your agent here
+  observation_n, reward_n, done_n, info = env.step(action_n)
+  env.render()

# 2017-10-02 16:50:22.820662
+observation_n = env.reset()

# 2017-10-02 16:50:31.070885
+env.reset()

# 2017-10-02 16:50:43.371710
+env.configure(remotes=1)

# 2017-10-02 16:55:40.869397
+import gym
+import universe  # register the universe environments
+
+env = gym.make('flashgames.DuskDrive-v0')
+# env.configure(remotes=1)  # automatically creates a local docker container
+observation_n = env.reset()
+
+while True:
+  action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]  # your agent here
+  observation_n, reward_n, done_n, info = env.step(action_n)
+  env.render()

# 2017-10-02 17:00:08.817577
+import gym
+import universe  # register the universe environments
+
+env = gym.make('flashgames.DuskDrive-v0')
+env.configure(remotes=1)  # automatically creates a local docker container
+observation_n = env.reset()
+
+while True:
+  action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]  # your agent here
+  observation_n, reward_n, done_n, info = env.step(action_n)
+  env.render()

# 2017-10-02 17:06:47.452561
+import docker

# 2017-10-02 17:11:35.182306
+import gym
+import universe  # register the universe environments
+
+env = gym.make('flashgames.DuskDrive-v0')
+env.configure(remotes=1)  # automatically creates a local docker container
+observation_n = env.reset()
+
+while True:
+  action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]  # your agent here
+  observation_n, reward_n, done_n, info = env.step(action_n)
+  env.render()

# 2017-10-02 17:34:24.872156
+import docker

# 2017-10-02 17:34:28.216068
+docker.__version__

# 2017-10-02 17:34:35.732120
+import dockerpycreds

# 2017-10-02 17:34:46.603406
+dockerpycreds.__spec__

# 2017-10-02 17:35:49.273953
+import docker 

# 2017-10-02 17:35:51.427239
+docker.__builtins__

# 2017-10-02 17:35:56.141625
+docker.__version__

# 2017-10-02 17:36:15.556415
+import gym
+import universe  # register the universe environments
+
+env = gym.make('flashgames.DuskDrive-v0')
+env.configure(remotes=1)  # automatically creates a local docker container
+observation_n = env.reset()
+
+while True:
+  action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]  # your agent here
+  observation_n, reward_n, done_n, info = env.step(action_n)
+  env.render()

# 2017-10-02 17:45:01.567006
+import gym
+import universe  # register the universe environments
+from time import sleep
+env = gym.make('flashgames.DuskDrive-v0')
+env.configure(remotes=1)  # automatically creates a local docker container
+observation_n = env.reset()
+print(observation_n)

# 2017-10-02 19:13:07.474116
+import tensorflow as tf

# 2017-10-02 19:13:15.762520
+tf.no_op('train_pp')

# 2017-10-02 19:13:17.721272
+a = _

# 2017-10-02 19:13:18.113580
+a

# 2017-10-02 19:13:21.977956
+a.device

# 2017-10-02 19:13:30.338556
+tf.no_op('train_ss')

# 2017-10-02 19:20:42.545072
+import gym
+import universe  # register the universe environments
+
+env = gym.make('flashgames.DuskDrive-v0')
+env.configure(remotes=1)  # automatically creates a local docker container
+observation_n = env.reset()
+
+while True:
+  action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]  # your agent here
+  observation_n, reward_n, done_n, info = env.step(action_n)
+  env.render()

# 2017-10-02 19:26:47.051258
+import gym
+env = gym.make('SpaceInvaders-v0')
+for i in range(10):
+    obs = env.reset()
+    for j in range(100):
+        action = env.action_space.sample()
+        obs, reward, done, info = env.step(action)
+        env.render()

# 2017-10-03 12:27:12.452143
+a

# 2017-10-03 12:27:17.240959
+import tensorflow as tf

# 2017-10-03 12:27:44.418833
+tf.train.get_global_step()

# 2017-10-03 12:27:47.990063
+a = tf.train.get_global_step()

# 2017-10-03 12:27:48.229936
+a

# 2017-10-03 12:27:50.366491
+a is None

# 2017-10-03 12:28:03.040499
+global_step = tf.get_variable('global_step')

# 2017-10-03 12:28:10.026286
+global_step = tf.get_variable(0, 'global_step')

# 2017-10-03 12:28:24.736523
+global_step = tf.get_variable(0, tf.uint, 'global_step')

# 2017-10-03 12:28:30.062153
+global_step = tf.get_variable(0, tf.uint8, 'global_step')

# 2017-10-03 12:28:41.350351
+global_step = tf.get_variable(0, tf.uint8, name='global_step')

# 2017-10-03 12:28:55.384235
+help(tf.get_variable)

# 2017-10-03 12:28:58.275113
+v = tf.get_variable("v", [1])  # v.name == "foo/v:0"

# 2017-10-03 12:29:13.639955
+global_step = tf.get_variable('global_step', [0])

# 2017-10-03 12:29:15.907780
+global_step

# 2017-10-03 12:29:33.320593
+tf.train.get_global_step()

# 2017-10-03 12:29:43.640274
+global_step = tf.get_variable('global_step', [0], dtype=tf.float32)

# 2017-10-03 12:30:18.992020
+import tensorflow as tf

# 2017-10-03 12:30:45.847495
+global_step = tf.Variable(0., trainable=False, name='global_step')

# 2017-10-03 12:30:48.092731
+global_step

# 2017-10-03 12:30:56.551998
+sess = tf.InteractiveSession

# 2017-10-03 12:30:57.998139
+sess = tf.InteractiveSession()

# 2017-10-03 12:31:07.941832
+tf.global_variables_initializer().run()

# 2017-10-03 12:31:11.063940
+global_step()

# 2017-10-03 12:31:12.262422
+global_step

# 2017-10-03 12:31:17.644849
+sess.run(global_step)

# 2017-10-03 12:31:23.218513
+global_step += 1

# 2017-10-03 12:31:25.090472
+global_step

# 2017-10-03 12:31:28.339414
+sess.run(global_step)

# 2017-10-03 12:31:38.143726
+tf.train.get_global_step()

# 2017-10-03 12:32:03.123831
+tf.contrib.framework.get_global_step()

# 2017-10-03 12:32:15.976475
+import tensorflow as tf

# 2017-10-03 12:32:32.219564
+global_step = tf.Variable(0., trainable=False, name='global_step', dtype=tf.uint8)

# 2017-10-03 12:32:35.580544
+global_step = tf.Variable(0, trainable=False, name='global_step', dtype=tf.uint8)

# 2017-10-03 12:32:41.915354
+sess = tf.InteractiveSession()

# 2017-10-03 12:32:48.034639
+tf.global_variables_initializer().run()

# 2017-10-03 12:33:12.043328
+tf.train.get_global_step()

# 2017-10-03 12:33:24.295824
+tf.contrib.framework.get_global_step()

# 2017-10-03 12:33:36.540691
+sess.run(tf.contrib.framework.get_global_step())

# 2017-10-03 12:35:21.035235
+tf.contrib.framework.get_global_step()

# 2017-10-03 12:35:24.952559
+tf.train.get_global_step()

# 2017-10-03 12:35:30.520360
+sess.run(tf.train.get_global_step())

# 2017-10-03 12:35:45.091629
+global_step 

# 2017-10-03 12:36:04.102626
+global_step2 = tf.Variable(0, name='global_step', trainable=False)

# 2017-10-03 12:36:07.999687
+global_step2

# 2017-10-03 12:36:24.521208
+tf.trainable_variables()

# 2017-10-03 12:36:31.758537
+tf.train.get_global_step()

# 2017-10-03 12:37:12.123017
+import tensorflow as tf

# 2017-10-03 12:37:14.029757
+a = tf.train.get_or_create_global_step

# 2017-10-03 12:37:15.576135
+a = tf.train.get_or_create_global_step()

# 2017-10-03 12:37:16.170648
+a

# 2017-10-03 12:37:37.970662
+sess = tf.InteractiveSession()

# 2017-10-03 12:37:46.601497
+tf.global_variables_initializer().run()

# 2017-10-03 12:37:48.627465
+a

# 2017-10-03 12:37:51.655987
+a.eval()

# 2017-10-03 12:37:58.134637
+a += 1

# 2017-10-03 12:37:58.593661
+a

# 2017-10-03 12:38:20.146170
+tf.contrib.framework.get_global_step()

# 2017-10-03 12:38:24.595707
+tf.contrib.framework.get_global_step().eval()

# 2017-10-03 12:38:50.271063
+a.eval()

# 2017-10-03 12:39:27.672326
+total_t = sess.run(tf.contrib.framework.get_global_step())

# 2017-10-03 12:39:30.725627
+total_t

# 2017-10-03 12:39:32.535029
+total_t += 1

# 2017-10-03 12:39:34.766430
+total_t

# 2017-10-03 13:07:17.508322
+a = "HOGE"

# 2017-10-03 13:08:49.659093
+a = ['b', 'c', 'a']

# 2017-10-03 13:08:56.989238
+a.sort(key=lambda x: x)

# 2017-10-03 13:08:57.488765
+a

# 2017-10-03 13:09:10.568471
+impo

# 2017-10-03 13:09:15.379718
+import tensorflow as tf

# 2017-10-03 13:09:26.931580
+a = tf.Variable(0, 'hoge')

# 2017-10-03 13:09:29.532542
+b = tf.Variable(0, 'h2ge')

# 2017-10-03 13:09:30.227971
+a

# 2017-10-03 13:09:30.849883
+b

# 2017-10-03 13:09:34.618850
+tf.trainable_variables()

# 2017-10-03 13:09:48.224966
+tf.trainable_variables()[0]

# 2017-10-03 13:09:57.050028
+tf.trainable_variables()[0].name

# 2017-10-03 13:10:58.087005
+a

# 2017-10-03 13:10:58.344910
+b

# 2017-10-03 13:11:01.692496
+a.assign(b)

# 2017-10-03 13:11:06.872331
+a

# 2017-10-03 13:11:07.842146
+b

# 2017-10-03 13:11:17.027421
+tf.assign(a, b)

# 2017-10-03 13:11:21.179952
+a

# 2017-10-03 13:11:21.986152
+b

# 2017-10-03 13:11:22.937005
+a

# 2017-10-03 13:11:28.087564
+b

# 2017-10-03 13:11:39.477911
+update_op = [a.assign(b)]

# 2017-10-03 13:11:52.227220
+sess = tf.InteractiveSession()

# 2017-10-03 13:11:57.574517
+tf.global_variables_initializer().run()

# 2017-10-03 13:12:05.662060
+sess.run(update_op)

# 2017-10-03 13:12:13.145651
+sess.run(a)

# 2017-10-03 13:12:13.601369
+a

# 2017-10-03 13:12:15.916866
+b

# 2017-10-03 13:12:25.238447
+b += 100

# 2017-10-03 13:12:29.599503
+a

# 2017-10-03 13:12:29.999925
+b

# 2017-10-03 13:12:36.277107
+a.assign(b)

# 2017-10-03 13:12:43.083286
+update_op = [_]

# 2017-10-03 13:12:45.172745
+update_op

# 2017-10-03 13:12:51.948993
+sess.run(update_op)

# 2017-10-03 13:12:58.731095
+a.eval()

# 2017-10-03 13:19:19.208271
+import numpy as np

# 2017-10-03 13:19:24.575297
+np.linspace(0, 1, 50000)

# 2017-10-03 13:19:35.234899
+help(np.linspace)

# 2017-10-03 15:30:58.700967
+import gym

# 2017-10-03 15:31:20.076633
+import gym
+env = gym.make('Alien-v0')
+for i in range(10):
+    obs = env.reset()
+    for j in range(100):
+        action = env.action_space.sample()
+        obs, reward, done, info = env.step(action)
+        env.render()

# 2017-10-03 15:32:43.946173
+import gym
+env = gym.make('Krull-v0')
+for i in range(10):
+    obs = env.reset()
+    for j in range(100):
+        action = env.action_space.sample()
+        obs, reward, done, info = env.step(action)
+        env.render()

# 2017-10-03 15:33:51.699247
+import gym
+env = gym.make('Tennis-v0')
+for i in range(10):
+    obs = env.reset()
+    for j in range(100):
+        action = env.action_space.sample()
+        obs, reward, done, info = env.step(action)
+        env.render()

# 2017-10-03 15:34:38.822357
+import gym
+env = gym.make('Defender-v0')
+for i in range(10):
+    obs = env.reset()
+    for j in range(100):
+        action = env.action_space.sample()
+        obs, reward, done, info = env.step(action)
+        env.render()

# 2017-10-03 15:35:33.468580
+import gym
+env = gym.make('Boxing-v0')
+for i in range(10):
+    obs = env.reset()
+    for j in range(100):
+        action = env.action_space.sample()
+        obs, reward, done, info = env.step(action)
+        env.render()

# 2017-10-03 15:50:24.190134
+import gym

# 2017-10-03 15:50:27.921167
+env = gym.make('Boxing-v0')

# 2017-10-03 15:50:32.574755
+obs = env.reset

# 2017-10-03 15:50:34.695878
+obs.shape

# 2017-10-03 15:50:39.017951
+obs = env.reset()

# 2017-10-03 15:50:41.066170
+obs.shape

# 2017-10-03 15:50:49.240672
+import numpy as np

# 2017-10-03 15:50:55.322087
+np.expand_dims(obs, 0)

# 2017-10-03 15:50:57.104852
+np.expand_dims(obs, 0).shape

# 2017-10-03 23:29:45.429861
+import tensorflow as tf

# 2017-10-03 23:33:37.689476
+help(tf.contrib.layers.conv2d)

# 2017-10-03 23:38:15.975728
+help(tf.contrib.layers.flatten)

# 2017-10-03 23:38:27.607816
+import baselines.common.tf_util as U

# 2017-10-03 23:39:22.160248
+help(tf.random_uniform)

# 2017-10-03 23:39:49.439585
+output = tf.random_uniform[32, 10, 10, 3]

# 2017-10-03 23:39:55.285205
+output = tf.random_uniform([32, 10, 10, 3])

# 2017-10-03 23:39:57.732850
+output.shape

# 2017-10-03 23:40:05.985141
+sess = tf.InteractiveSession()

# 2017-10-03 23:40:13.474417
+tf.global_variables_initializer().run()

# 2017-10-03 23:40:29.831722
+o = sess.run(output)

# 2017-10-03 23:40:31.348623
+o.shape

# 2017-10-03 23:40:47.705922
+flatten = U.flattenallbut0(output)

# 2017-10-03 23:40:50.149917
+flatten

# 2017-10-03 23:41:18.583241
+ans1 = sess.run(tf.sum(flatten))

# 2017-10-03 23:41:34.032480
+ans1 = sess.run(flatten)

# 2017-10-03 23:41:39.384189
+ans1.max()

# 2017-10-03 23:41:43.808459
+o.max()

# 2017-10-03 23:42:21.501486
+o

# 2017-10-03 23:42:29.802688
+max(o)

# 2017-10-03 23:42:34.648348
+import numpy as np

# 2017-10-03 23:42:36.481896
+np.max(o)

# 2017-10-03 23:42:43.712619
+np.max(ans1)

# 2017-10-03 23:49:23.475434
+import numpy as np

# 2017-10-04 01:07:00.097197
+import gym

# 2017-10-04 01:12:08.000148
+gym.make('FlappyBird-v0')

# 2017-10-04 01:16:32.891347
+import pygame

# 2017-10-04 01:18:41.963852
+import gym

# 2017-10-04 01:18:43.998930
+gym.make('FlappyBird-v0')

# 2017-10-04 01:19:24.275672
+import gym_ple

# 2017-10-04 01:19:57.704052
+import gym
+from gym.wrappers import Monitor
+import gym_ple

# 2017-10-04 01:20:15.986412
+import gym
+from gym.wrappers import Monitor
+import ple

# 2017-10-04 01:20:31.210545
+env = gym.make('FlappyBird-v0')

# 2017-10-04 01:20:51.783571
+gym.make('FlappyBird')

# 2017-10-04 01:20:56.560026
+gym.make('FlappyBird-v1')

# 2017-10-04 01:20:58.159789
+gym.make('FlappyBird-v2')

# 2017-10-04 01:20:59.639644
+gym.make('FlappyBird-v0')

# 2017-10-04 01:21:20.785563
+gym.make('flappyBird-v0')

# 2017-10-04 16:28:48.025495
+import gym

# 2017-10-04 16:29:07.051817
+env = gym.make('Boxing-v0')

# 2017-10-04 16:29:18.412929
+obs = env.reset()

# 2017-10-04 16:29:37.618073
+env.action_space.contains

# 2017-10-04 16:29:38.913105
+env.action_space.contains()

# 2017-10-04 16:29:40.479922
+env.action_space.contains(1)

# 2017-10-04 16:29:42.099013
+env.action_space.contains(0)

# 2017-10-04 16:29:44.080955
+env.action_space.contains(-1)

# 2017-10-04 16:29:45.619836
+env.action_space.contains(19)

# 2017-10-04 16:29:47.285382
+env.action_space.contains(18)

# 2017-10-04 16:29:48.956277
+env.action_space.contains(17)

# 2017-10-04 16:29:52.194481
+env.action_space.contains(15)

# 2017-10-04 16:29:53.615390
+env.action_space.contains(14)

# 2017-10-04 16:29:59.540111
+env.action_space.n

# 2017-10-04 16:30:04.904719
+env.action_space.contains(0)

# 2017-10-04 16:30:56.018691
+env.action_space.n

# 2017-10-05 12:28:34.252662
+from tensorforce.core.preprocessing import Sequence

# 2017-10-05 12:28:55.372642
+pp_seq = Sequence(4)

# 2017-10-05 12:28:57.210609
+pp_seq

# 2017-10-05 12:29:01.401680
+pp_seq.processed_shape

# 2017-10-05 12:29:04.068644
+pp_seq.processed_shape()

# 2017-10-05 12:29:05.718323
+pp_seq.processed_shape

# 2017-10-05 12:29:15.169004
+state = env.reset()

# 2017-10-05 12:29:16.374086
+state

# 2017-10-05 12:29:48.333388
+processed_state = pp_seq.process(state)

# 2017-10-05 12:29:50.275988
+processed_state

# 2017-10-05 12:29:54.126354
+processed_state.shape

# 2017-10-05 12:32:42.799322
+import tensorflow.contrib.bayesflow

# 2017-10-05 12:32:58.417562
+import tensorflow.contrib.bayesflow as bayesflow

# 2017-10-05 12:34:41.963303
+import tf.contrib.distributions as dist

# 2017-10-05 12:34:54.823312
+import tensorflow as tf

# 2017-10-05 12:35:03.136395
+tf.contrib.distributions

# 2017-10-05 12:36:21.597165
+import tensorflow.keras

# 2017-10-05 12:36:45.118727
+tf.keras

# 2017-10-05 12:40:16.384412
+import tensorflow as tf

# 2017-10-05 12:41:02.494185
+tf.keras

# 2017-10-05 12:41:15.951108
+tf.contrib.keras

# 2017-10-05 12:41:19.008321
+tf.contrib.bayesflow

# 2017-10-05 23:58:26.175477
+from .Policy import EpsilonGreedyPolicy

# 2017-10-05 23:58:37.844356
+from Policy import EpsilonGreedyPolicy

# 2017-10-05 23:58:52.942010
+EpsilonGreedyPolicy(estimator="A", nA=10)

# 2017-10-05 23:59:28.148181
+from Policy import EpsilonGreedyPolicy

# 2017-10-05 23:59:29.267250
+EpsilonGreedyPolicy(estimator="A", nA=10)

# 2017-10-05 23:59:46.507842
+from Policy import EpsilonGreedyPolicy

# 2017-10-05 23:59:49.705906
+EpsilonGreedyPolicy(estimator="A", nA=10)

# 2017-10-06 00:00:29.388652
+a = {'A': 20, 'B': 10}

# 2017-10-06 00:00:33.169207
+print(**a)

# 2017-10-06 00:00:35.394819
+print(*a)

# 2017-10-06 00:01:27.807222
+from Policy import EpsilonGreedyPolicy

# 2017-10-06 00:01:30.266853
+EpsilonGreedyPolicy(estimator="A", nA=10)

# 2017-10-06 00:01:47.237694
+a = _

# 2017-10-06 00:01:49.383275
+a.estimator

# 2017-10-06 00:01:51.581804
+a.nA

# 2017-10-06 00:15:08.357878
+EpsilonGreedyPolicy(estimator="A", nA=10, HOGE="A")

# 2017-10-06 00:15:50.279834
+from Policy import EpsilonGreedyPolicy

# 2017-10-06 00:15:51.604983
+EpsilonGreedyPolicy(estimator="A", nA=10, HOGE="A")

# 2017-10-06 00:21:39.707057
+import baselines.common.tf_util

# 2017-10-06 00:21:43.312626
+import baselines.common.tf_util as U

# 2017-10-06 00:21:53.701088
+U.function(a=['1', 'b'])

# 2017-10-06 00:22:10.067710
+U.function(inputs=['1', 'b'])

# 2017-10-06 00:22:26.870300
+U.function(inputs=['1', 'b'], outputs='hoge', updates='hoge', givens='hoge')

# 2017-10-06 01:43:58.424724
+from tensorforce.core.preprocessing import Preprocessing

# 2017-10-06 03:26:41.123480
+from tensorforce.core.explorations import OrnsteinUhlenbeckProcess

# 2017-10-06 03:26:45.414135
+a = OrnsteinUhlenbeckProcess()

# 2017-10-06 03:26:45.968334
+a

# 2017-10-06 03:26:48.275094
+a.sigma

# 2017-10-06 03:26:51.760315
+a()

# 2017-10-06 03:27:16.310672
+from tensorforce.core.explorations import EpsilonAnneal

# 2017-10-06 03:27:19.943600
+e = EpsilonAnneal()

# 2017-10-06 03:27:21.037258
+e()

# 2017-10-06 03:29:42.159990
+a()

# 2017-10-06 03:30:06.963475
+import numpy as np

# 2017-10-06 03:30:18.183480
+np.array(a for i in range(1000))

# 2017-10-06 03:30:21.065302
+np.array(a() for i in range(1000))

# 2017-10-06 03:30:28.000775
+q = np.array(a() for i in range(1000))

# 2017-10-06 03:30:29.212782
+q

# 2017-10-06 03:30:32.491605
+q.all()

# 2017-10-06 03:30:33.870295
+q[0]

# 2017-10-06 03:30:38.234002
+np.array([a() for i in range(1000)])

# 2017-10-06 03:30:40.860962
+q = np.array([a() for i in range(1000)])

# 2017-10-06 03:30:43.806202
+q.max()

# 2017-10-06 03:30:53.604942
+import matplotlib.pyplot as plt

# 2017-10-06 03:30:57.717866
+plt.hist(q)

# 2017-10-06 03:31:20.011057
+plt.show()

# 2017-10-06 03:31:32.182683
+plt.hist(q, bins=100)

# 2017-10-06 03:31:40.712958
+plt.show()

# 2017-10-06 14:40:09.017614
+import tensorflow as tf

# 2017-10-06 14:40:30.339990
+w = tf.Variable([0, 0, 0], dtype=tf.float32)

# 2017-10-06 14:40:30.661908
+w

# 2017-10-06 14:41:19.909840
+x = tf.placeholder(tf.float32, shape=[None, 3])

# 2017-10-06 14:41:35.652481
+tf.matmul(x, w)

# 2017-10-06 14:41:41.707097
+x

# 2017-10-06 14:41:41.877016
+w

# 2017-10-06 14:41:47.661104
+w.shape

# 2017-10-06 14:41:51.413512
+x

# 2017-10-06 14:41:57.493559
+x * w

# 2017-10-06 14:42:07.803514
+tf.matmul(x, w)

# 2017-10-06 14:42:21.331735
+tf.matmul(w, tf.transpose(x))

# 2017-10-06 14:42:22.957496
+x

# 2017-10-06 14:42:23.117654
+w

# 2017-10-06 14:42:30.647009
+tf.transpose(x)

# 2017-10-06 14:42:32.518524
+x

# 2017-10-06 14:42:43.880037
+tf.transpose(x)

# 2017-10-06 14:42:46.782554
+x * tf.transpose(x)

# 2017-10-06 14:42:49.893773
+w * tf.transpose(x)

# 2017-10-06 14:43:04.658362
+tf.matmul(w, tf.transpose(x))

# 2017-10-06 14:43:29.105010
+tf.matmul(w, tf.transpose_b(x))

# 2017-10-06 14:44:10.725360
+w = tf.Variable([[0, 0, 0]], dtype=tf.float32)

# 2017-10-06 14:44:12.544886
+w.shape

# 2017-10-06 14:44:15.001115
+w

# 2017-10-06 14:44:27.051556
+tf.matmul(w, tf.transpose(x))

# 2017-10-06 15:10:55.037071
+import sklearn

# 2017-10-06 16:43:41.056000
+def a(a, b):
+    print(a, b)

# 2017-10-06 16:43:53.727933
+q = {'a': 10, 'b': 20}

# 2017-10-06 16:44:00.822676
+a(**q)

# 2017-10-06 16:44:14.777260
+q = {'hoge': 10, 'hage': 20}

# 2017-10-06 16:44:15.814056
+a(**q)

# 2017-10-06 16:44:47.900239
+[1, 2]

# 2017-10-06 16:44:54.529991
+def a(a):
+    print(a)

# 2017-10-06 16:45:17.873665
+def a(a, b):
+    print(a, b)

# 2017-10-06 16:45:21.690320
+a(*[1, 2])

# 2017-10-06 16:45:48.877402
+a(*[1, 2, 3])

# 2017-10-06 16:46:59.077098
+def hoge(*args):
+    print(args)

# 2017-10-06 16:47:06.036305
+hoge(10, 20, 30)

# 2017-10-06 16:47:39.022371
+def initlizer(*args, **kwargs):
+    print(args, kwargs)

# 2017-10-06 16:47:57.663083
+initlizer(10, 20, 30, {'b': 10, 'c': 20})

# 2017-10-06 16:48:23.399101
+initlizer(10, 20, 30, b=10, c=20)

# 2017-10-06 16:50:02.241380
+def ChilcHoge(Hoge):
+    def __init__(self, *args, **kwargs):
+        super().__init__(self, *args, **kwargs)

# 2017-10-06 16:50:44.762623
+ChilcHoge()

# 2017-10-06 16:51:07.894111
+class A():
+    def hoge():
+        print("HOGE")

# 2017-10-06 16:51:09.698914
+a = A()

# 2017-10-06 16:51:11.597534
+a.hoge()

# 2017-10-06 16:51:24.796906
+a.hoge

# 2017-10-06 16:51:26.101437
+a.hoge()

# 2017-10-06 16:51:29.030169
+a.hoge('b')

# 2017-10-06 16:51:34.701915
+class A():
+    def hoge(self):
+        print("HOGE")

# 2017-10-06 16:51:39.748931
+a = A()

# 2017-10-06 16:51:40.940400
+a.hoge()

# 2017-10-08 02:07:11.597459
+import tensorflow as tf

# 2017-10-08 02:07:31.742605
+x = tf.random_normal([128, 128])

# 2017-10-08 02:07:38.165275
+b = tf.random_normal([128])

# 2017-10-08 02:07:40.964859
+x + b

# 2017-10-08 02:07:56.673695
+sess = tf.InteractiveSession()

# 2017-10-08 02:08:08.839123
+q, w = sess.run([x, b])

# 2017-10-08 02:08:22.098862
+import tensorflow as tf

# 2017-10-08 02:08:53.050203
+tf.constant([1, 2, 3, 4], shape=[2, 2])

# 2017-10-08 02:08:55.470124
+a = tf.constant([1, 2, 3, 4], shape=[2, 2])

# 2017-10-08 02:09:02.916199
+b = tf.constant([10, 20], shape=[2])

# 2017-10-08 02:09:03.491804
+a

# 2017-10-08 02:09:03.640733
+b

# 2017-10-08 02:09:12.237365
+sess = tf.InteractiveSession()

# 2017-10-08 02:09:20.263103
+q, w = sess.run([a, b])

# 2017-10-08 02:09:20.646785
+q

# 2017-10-08 02:09:20.981535
+b

# 2017-10-08 02:09:21.730880
+q

# 2017-10-08 02:09:22.028615
+w

# 2017-10-08 02:09:25.975702
+q + w

# 2017-10-08 02:09:34.456760
+q

# 2017-10-08 02:09:35.586914
+w

# 2017-10-08 02:09:43.994918
+e = sess.run([a+b])

# 2017-10-08 02:09:46.184925
+e

# 2017-10-08 02:13:28.694405
+import numpy as np

# 2017-10-08 02:13:33.815960
+q

# 2017-10-08 02:13:33.983781
+w

# 2017-10-08 02:13:35.925344
+a

# 2017-10-08 02:13:36.114043
+b

# 2017-10-08 02:13:44.047297
+tf.matmul(a, b)

# 2017-10-08 02:13:48.159073
+b

# 2017-10-08 02:13:52.974107
+b = tf.con

# 2017-10-08 02:14:34.025915
+b = tf.constant([[10, 20]])

# 2017-10-08 02:14:34.760853
+b

# 2017-10-08 02:14:47.865580
+tf.matmul(b, a)

# 2017-10-08 02:14:50.869433
+tf.matmul(a, b)

# 2017-10-08 02:16:57.453749
+a = tf.placeholder(dtype=tf.float32, shape=[None, 128])

# 2017-10-08 02:16:59.232975
+b = tf.placeholder(dtype=tf.float32, shape=[None, 128])

# 2017-10-08 02:17:02.575001
+b = tf.placeholder(dtype=tf.float32, shape=[128, 128])

# 2017-10-08 02:17:04.232015
+a + b

# 2017-10-08 02:32:10.849233
+'{0:.1f}, {1:.5f}'.format(0.11111, 0.1111)

# 2017-10-08 02:37:26.216045
+from tensorflow.examples.tutorials.mnist import input_data

# 2017-10-08 02:37:45.840152
+mnist = input_data.read_data_sets('/tmp/data', one_hot=True)

# 2017-10-08 02:37:51.004240
+mnist.test.images

# 2017-10-08 02:38:16.694841
+mnist.test.labels

# 2017-10-08 02:42:43.713337
+correct_prediction = tf.equal([0, 0, 0], [0, 0, 1])

# 2017-10-08 02:42:45.760633
+sess

# 2017-10-08 02:42:48.780082
+sess.run(correct_prediction)

# 2017-10-08 02:43:18.603550
+accuracy = tf.reduce_mean(correct_prediction)

# 2017-10-08 02:43:36.485909
+accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.int32))

# 2017-10-08 02:43:53.432505
+accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.int32)) 

# 2017-10-08 02:43:57.701052
+accuracy.eval()

# 2017-10-08 02:44:07.215551
+accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) 

# 2017-10-08 02:44:09.889297
+accuracy.consumers

# 2017-10-08 02:44:12.886047
+accuracy.eval()

# 2017-10-08 02:44:34.268319
+tf.cast(correct_prediction, tf.float32).eval()

# 2017-10-08 02:44:40.598676
+tf.cast(correct_prediction, tf.float32).mean

# 2017-10-08 02:45:21.870741
+accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) * 100

# 2017-10-08 02:45:27.154303
+accuracy.eval()

# 2017-10-08 03:16:59.024964
+help(tf.contrib.layers.fully_connected)

# 2017-10-08 03:33:43.581902
+help(mnist.train.next_batch)

# 2017-10-08 03:33:51.807955
+os.path.dirname(os.path.abspath(__file__))

# 2017-10-08 03:33:53.341585
+import os

# 2017-10-08 03:33:54.064497
+os.path.dirname(os.path.abspath(__file__))

# 2017-10-08 03:45:01.479845
+os.path.abspath("./experiments/hoge")

# 2017-10-08 04:53:00.484270
+import numpy as np

# 2017-10-08 04:53:02.953235
+np.sqrt

# 2017-10-08 05:09:59.126529
+class Agent(object):
+    name = None
+    model = None

# 2017-10-08 05:10:23.343931
+class Agent(object):
+    name = None
+    model = None
+    def __init__(self, config, model=None):
+        print("HOGE")

# 2017-10-08 05:10:50.839225
+class TestAgent(Agent):
+    name = "Test"
+    model = 111

# 2017-10-08 05:10:55.647722
+TestAgent()

# 2017-10-08 05:11:00.479093
+TestAgent(10, 2)

# 2017-10-08 05:11:21.238719
+a = _

# 2017-10-08 05:11:23.582853
+a.model

# 2017-10-08 05:11:25.535016
+a.name

# 2017-10-08 05:52:32.814048
+from Policy import EpsilonGreedyPolicy

# 2017-10-08 05:52:38.019508
+EpsilonGreedyPolicy(estimator="A", nA=10, HOGE="A")

# 2017-10-08 05:52:47.399357
+EpsilonGreedyPolicy(estimator="A", nA=10)

# 2017-10-08 05:52:52.148807
+policy = EpsilonGreedyPolicy(estimator="A", nA=10)

# 2017-10-08 05:52:54.979064
+policy.act

# 2017-10-08 06:00:44.117901
+import gym

# 2017-10-08 06:00:52.244729
+env = gym.make('Boxing-v0')

# 2017-10-08 06:00:59.614617
+env.spec.id

# 2017-10-08 06:42:11.690630
+from double_dqn import DoubleDQN

# 2017-10-08 06:43:00.411803
+dqn = DoubleDQN(nA=19)

# 2017-10-08 06:43:51.600828
+from double_dqn import DoubleDQN

# 2017-10-08 06:43:54.387106
+dqn = DoubleDQN(nA=19)

# 2017-10-08 06:44:23.861076
+from double_dqn import DoubleDQN

# 2017-10-08 06:44:26.138293
+dqn = DoubleDQN(nA=19)

# 2017-10-08 07:02:04.590541
+import g

# 2017-10-08 07:02:07.280149
+import gym

# 2017-10-08 07:02:14.363534
+env = gym.make('Boxing-v0')

# 2017-10-08 07:02:22.395742
+obs = env.reset()

# 2017-10-08 07:02:27.726228
+import numpy as np

# 2017-10-08 07:02:33.824218
+import tensorflow as tf

# 2017-10-08 07:04:45.656216
+help(np.repeat)

# 2017-10-08 07:04:53.332879
+np.repeat(obs, 3)

# 2017-10-08 07:04:59.582917
+help(np.repeat)

# 2017-10-08 07:05:06.457943
+obs.shape

# 2017-10-08 07:23:48.048178
+import numpy as np

# 2017-10-08 07:23:56.444019
+a = np.arange(3)

# 2017-10-08 07:23:57.228891
+a

# 2017-10-08 07:24:06.546949
+np.repeat(a, 3)

# 2017-10-08 07:24:09.330016
+np.repeat(a, 3, 0)

# 2017-10-08 07:24:10.604279
+np.repeat(a, 3, 1)

# 2017-10-08 07:24:16.491944
+np.repeat([a], 3, 1)

# 2017-10-08 07:24:19.654780
+np.repeat([a], 3, 0)

# 2017-10-08 07:24:34.941555
+np.repeat([a], 3, 0).shape

# 2017-10-08 07:24:39.701433
+np.repeat([a], 4, 0).shape

# 2017-10-08 07:34:20.582210
+a = np.ones((10, 10))

# 2017-10-08 07:34:28.891343
+np.stack([a] * 4)

# 2017-10-08 07:34:30.569895
+np.stack([a] * 4).shape

# 2017-10-08 07:34:34.875482
+np.stack([a] * 4, axis2).shape

# 2017-10-08 07:34:37.305899
+np.stack([a] * 4, axis=2).shape

# 2017-10-08 07:45:43.608173
+env

# 2017-10-08 07:45:47.414827
+env.action_space.n

# 2017-10-08 07:51:31.174368
+A = np.stack([a] * 4, axis=2).shape

# 2017-10-08 07:51:31.734756
+A

# 2017-10-08 07:51:34.864809
+A = np.stack([a] * 4, axis=2)

# 2017-10-08 07:51:37.916386
+A.shape

# 2017-10-08 07:51:55.884191
+A[:,:,:3].shape

# 2017-10-08 07:52:03.474745
+np.append(A[:,:,:3], a)

# 2017-10-08 07:52:06.495656
+np.append(A[:,:,:3], a).shape

# 2017-10-08 07:52:11.076981
+np.append(A[:,:,:3])

# 2017-10-08 07:52:35.170930
+np.stack([A[:,:,:3], a], 2) 

# 2017-10-08 07:52:40.690870
+np.stack([A[:,:,:3], [a]], 2) 

# 2017-10-08 07:52:48.592956
+np.stack([A[:,:,:3], a], 2) 

# 2017-10-08 07:52:50.623418
+np.stack([A[:,:,:3], a], 0) 

# 2017-10-08 07:52:57.103883
+A[:,:,:3].shape

# 2017-10-08 07:53:00.529368
+a.shape

# 2017-10-08 07:53:32.372122
+np.hstack([A[:,:,:3], a])

# 2017-10-08 07:53:43.114205
+np.hstack([A[:,:,:3], a[:,:,np.newaxis]])

# 2017-10-08 07:53:49.143351
+np.stack([A[:,:,:3], a[:,:,np.newaxis]], 2)

# 2017-10-08 07:53:56.769408
+A[:,:,:3].shape

# 2017-10-08 07:54:04.781524
+a[:,:,np.newaxis].shape

# 2017-10-08 07:54:07.972527
+b = a[:,:,np.newaxis].shape

# 2017-10-08 07:54:21.188570
+np.stack([A[:,:,:3], b], 2)

# 2017-10-08 07:54:23.184678
+np.stack([A[:,:,:3], b], 1)

# 2017-10-08 07:54:24.558868
+np.stack([A[:,:,:3], b], 0)

# 2017-10-08 07:54:39.045336
+np.append(A[:,:,:3], b)

# 2017-10-08 07:54:45.952460
+b

# 2017-10-08 07:54:53.093815
+b = a[:,:,np.newaxis]

# 2017-10-08 07:54:56.370632
+np.stack([A[:,:,:3], b], 1)

# 2017-10-08 07:54:59.860509
+np.stack([A[:,:,:3], b], 2)

# 2017-10-08 07:55:01.468654
+np.stack([A[:,:,:3], b], 0)

# 2017-10-08 07:55:37.282380
+A[:,:,:3].shape

# 2017-10-08 07:55:39.986395
+b.shape

# 2017-10-08 07:56:03.458669
+np.stack((A[:,:,:3], b), 0)

# 2017-10-08 07:56:05.227694
+np.stack((A[:,:,:3], b), 1)

# 2017-10-08 07:56:06.409122
+np.stack((A[:,:,:3], b), 2)

# 2017-10-08 07:56:41.472684
+np.concatenate((A[:,:,:3], b), 2)

# 2017-10-08 07:56:43.963317
+np.concatenate((A[:,:,:3], b), 2).shape

# 2017-10-08 17:46:51.452677
+import numpy as np

# 2017-10-08 17:46:59.277355
+r = np.rando.randn(2, 3)

# 2017-10-08 17:47:03.203150
+r = np.random.randn(2, 3)

# 2017-10-08 17:47:07.141415
+for i in r:
+    print(i)

# 2017-10-08 17:52:56.863062
+i

# 2017-10-08 17:53:14.207916
+tf

# 2017-10-08 17:53:22.117843
+import tensorflow as tf

# 2017-10-08 17:53:24.691300
+b = tf.placeholder(dtype=tf.float32, shape=[128, 128])

# 2017-10-08 17:53:30.091777
+b = tf.placeholder(dtype=tf.float32, shape=[128, 100])

# 2017-10-08 17:53:37.334122
+tf.shape(b).as_list

# 2017-10-08 17:53:40.075949
+tf.shape(b)

# 2017-10-08 17:54:24.901215
+np.arange(10).as_list

# 2017-10-08 17:54:26.899485
+np.arange(10)

# 2017-10-08 17:54:31.588141
+b

# 2017-10-08 17:54:34.873441
+b.as_list

# 2017-10-08 17:56:45.101346
+b.get_shape()

# 2017-10-08 17:56:48.737828
+b.get_shape().as_list

# 2017-10-08 17:56:49.872695
+b.get_shape().as_list()

# 2017-10-08 18:17:37.001323
+env

# 2017-10-08 18:17:40.844814
+import gym

# 2017-10-08 18:17:50.674720
+env = gym.make('Breaout-v0')

# 2017-10-08 18:17:54.237956
+env = gym.make('Breakout-v0')

# 2017-10-08 18:17:56.909327
+env.action_space.n

# 2017-10-08 18:18:10.786713
+np.arange(0, 4 * 32, 4)

# 2017-10-08 18:23:22.510895
+np.random.randn(10)

# 2017-10-08 18:23:25.972446
+np.random.randint(10)

# 2017-10-08 18:23:40.096268
+help(np.random.randint)

# 2017-10-08 19:16:26.942369
+import matplotlib.pyplot as plt

# 2017-10-08 19:16:41.539836
+fig, axes = plt.subplots(2, 2)

# 2017-10-08 19:16:43.252798
+axes

# 2017-10-08 19:18:19.418868
+((ax1, ax2), (ax3, ax4))

# 2017-10-08 19:18:22.552688
+((ax1, ax2), (ax3, ax4)) = axes

# 2017-10-08 19:18:26.305698
+ax1.plot

# 2017-10-08 19:18:52.567139
+np

# 2017-10-08 19:18:55.154971
+import nuum

# 2017-10-08 19:18:58.222382
+import numpy as np

# 2017-10-08 19:19:10.852896
+a = np.zeros((84, 84, 4))

# 2017-10-08 19:19:29.028599
+for i in range(4):
+    b = a[:, :, i]
+    print(b.shape)

# 2017-10-08 19:30:01.858179
+a

# 2017-10-08 19:30:03.663919
+a.shape

# 2017-10-08 19:30:07.088492
+a[np.newaxis]

# 2017-10-08 19:30:08.657527
+a[np.newaxis].shape

# 2017-10-08 19:46:42.261662
+import baselines.common.tf_util as U

# 2017-10-08 19:46:43.697229
+import tensorflow as tf

# 2017-10-08 19:46:57.217192
+x = tf.placeholder(tf.float32, shape=[1, 1000])

# 2017-10-08 19:47:08.047265
+U.dense(x, 10, 'dense')

# 2017-10-08 19:47:13.043056
+U.wndense(x, 10, 'dense')

# 2017-10-08 20:08:50.110260
+from denny_dqn import Estimator

# 2017-10-08 20:12:26.780255
+Estimator

# 2017-10-09 06:19:19.989135
+tf.range(128) * 4

# 2017-10-09 06:19:25.037720
+g = tf.range(128) * 4

# 2017-10-09 06:19:30.297016
+sess

# 2017-10-09 06:19:33.518214
+sess = tf.InteractiveSession()

# 2017-10-09 06:19:37.091420
+sess.run(g)

# 2017-10-09 06:20:25.656055
+tf.range(0, 128 * 4, 4)

# 2017-10-09 06:20:31.246519
+tf.range(0, 128 * 4, 4).eval()

# 2017-10-09 06:20:33.952180
+tf.range(0, 128 * 4, 4)

# 2017-10-09 06:36:54.387071
+from Policy import EpsilonGreedyPolicy

# 2017-10-09 07:15:59.363035
+import sys

# 2017-10-09 07:16:07.947964
+sys.stdout.write

# 2017-10-09 07:16:09.486347
+sys.stdout.write()

# 2017-10-09 07:16:11.510968
+sys.stdout.write('')

# 2017-10-09 07:17:24.753505
+for i in range(10):
+    print(i, flush=True)

# 2017-10-09 07:17:29.621563
+for i in range(10):
+    print(i, flush=True, end='')

# 2017-10-09 07:17:38.358198
+import sys

# 2017-10-09 07:17:46.861714
+for i in range(10):
+    print(i, flush=True, end='')
+    sys.stdout.flush()

# 2017-10-09 07:17:51.500848
+for i in range(1000):
+    print(i, flush=True, end='')
+    sys.stdout.flush()

# 2017-10-09 07:18:22.762220
+from time import sleep

# 2017-10-09 07:18:33.772266
+for i in range(1000):
+    sleep(0.5)
+    print(i, flush=True, end='')
+    sys.stdout.flush()

# 2017-10-09 07:18:39.108355
+for i in range(1000):
+    sleep(0.5)
+    print(i, flush=True, end='')

# 2017-10-09 07:19:00.083597
+for i in range(1000):
+    sleep(0.5)
+    print(i, flush=True, end='\r')

# 2017-10-09 07:19:02.993151
+for i in range(1000):
+    print(i, flush=True, end='\r')

# 2017-10-09 07:19:12.741097
+for i in range(1000000):
+    print(i, flush=True, end='\r')

# 2017-10-09 07:43:31.919073
+import tensorflow as tf

# 2017-10-09 07:43:33.532528
+inp = tf.placeholder

# 2017-10-09 07:43:52.724827
+inp = tf.placeholder(dtype=tf.uint8, shape=[None, 210, 160, 3])

# 2017-10-09 07:44:05.406387
+tf.image.rgb_to_grayscale(inp)

# 2017-10-09 07:44:10.322639
+output = tf.image.rgb_to_grayscale(inp)

# 2017-10-09 07:44:18.678936
+output1 = tf.image.rgb_to_grayscale(inp)

# 2017-10-09 07:45:50.582737
+output2 = tf.image.resize_images(output1[:, 25:-25, 25:135], [84, 84], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)

# 2017-10-09 07:45:52.373769
+output2

# 2017-10-09 07:46:12.791367
+output3 = tf.squeeze(output2)

# 2017-10-09 07:46:13.896726
+output3

# 2017-10-09 07:46:38.598221
+output3 = tf.squeeze(output2[:,84, 84, 1])

# 2017-10-09 07:46:49.737641
+output3 = tf.squeeze(output2[:,84, 84])

# 2017-10-09 07:46:53.227539
+output2

# 2017-10-09 07:47:04.869944
+output2[:,]

# 2017-10-09 07:47:15.856968
+tf.squeeze( output2[:,])

# 2017-10-09 07:47:37.564677
+tf.squeeze( output2, axis=3)

# 2017-10-09 08:10:23.896334
+repr(outpu2)

# 2017-10-09 08:10:25.788873
+repr(output2)

# 2017-10-09 08:15:34.710564
+assert True

# 2017-10-09 08:15:57.841827
+from dqn_utils import ReplayMemory

# 2017-10-09 08:16:03.245064
+r = ReplayMemory(5000)

# 2017-10-09 08:16:09.772272
+r.memorize(10)

# 2017-10-09 08:16:56.300088
+from dqn_utils import Transition

# 2017-10-09 08:17:01.602832
+t = Transition()

# 2017-10-09 08:17:22.530532
+t = Transition(state='a', reward='b', action='b', next_state='b', done='b')

# 2017-10-09 08:17:23.306830
+t

# 2017-10-09 08:17:29.864488
+r.memorize(t)

# 2017-10-09 08:17:31.010579
+r

# 2017-10-09 08:17:37.464573
+r.memory 

# 2017-10-09 08:17:58.729134
+r.memorize('hoge')

# 2017-10-09 08:35:19.232245
+np.random.randint(10
+)

# 2017-10-09 08:35:22.090341
+import numpy as np

# 2017-10-09 08:35:30.057806
+np.random.choice([5, 2, 1, 5])

# 2017-10-09 08:35:34.009644
+np.random.choice([5, 2, 1, 5], size=1)

# 2017-10-09 08:39:37.767495
+import random

# 2017-10-09 08:39:44.529940
+random.choice([1, 2, 3])

# 2017-10-09 08:40:02.464472
+help(random.choice)

# 2017-10-09 08:40:05.632441
+random.choices([1, 2, 3])

# 2017-10-09 08:40:24.843308
+random.choices([1, 2, 3], p=[0.1, 0.1, 0.8])

# 2017-10-09 08:41:11.709794
+directions = np.array([[ 1, 0],
+                       [-1, 0],
+                       [ 0, 1],
+                       [ 0,-1]])
+sampleInd = np.random.choice(directions.shape[0], size=(10,))

# 2017-10-09 08:41:18.149675
+sampleInd 

# 2017-10-09 08:41:35.778653
+directions.shape[0]

# 2017-10-09 08:42:43.363675
+directions.shape

# 2017-10-09 08:43:09.259537
+np.random.choice(10, size=3)

# 2017-10-09 08:44:21.366810
+index = _

# 2017-10-09 08:44:22.568967
+index

# 2017-10-09 08:44:32.125968
+np.arange(15)[index]

# 2017-10-09 08:44:48.723226
+np.random.randn(10)[index]

# 2017-10-09 08:48:43.714148
+q = list(np.arange(15))

# 2017-10-09 08:48:44.152711
+q

# 2017-10-09 08:48:46.259883
+q[index]

# 2017-10-09 08:50:21.147262
+from dqn_utils import Transition

# 2017-10-09 08:50:29.192662
+from dqn_utils import ReplayMemory

# 2017-10-09 08:50:36.772107
+r = ReplayMemory(5000)

# 2017-10-09 08:50:55.114784
+t = Transition(state='a', reward='b', action='b', next_state='b', done='b')

# 2017-10-09 08:51:18.884273
+for i in range(10):
+    r.memorize(t)

# 2017-10-09 08:51:20.337525
+r

# 2017-10-09 08:51:25.855924
+r.sample()

# 2017-10-09 08:51:38.966683
+r.sample(size=3)

# 2017-10-09 08:57:41.242659
+import numpy as np

# 2017-10-09 08:57:45.174277
+np.random.randn(5)

# 2017-10-09 09:30:39.633877
+import numpy as np

# 2017-10-09 09:32:01.116286
+np.choose([3], [10, 20, 30, 40, 50])

# 2017-10-09 09:33:37.599313
+choices = [[0, 1, 2, 3], [10, 11, 12, 13], [20, 21, 22, 23], [30, 31, 32, 33]]

# 2017-10-09 09:33:56.033074
+np.choose([2, 3, 1, 0], choices)

# 2017-10-09 09:34:39.851322
+np.choose([0], choices)

# 2017-10-09 09:34:46.906198
+np.choose([1], choices)

# 2017-10-09 09:34:50.716171
+np.choose([1, 0 ], choices)

# 2017-10-09 09:51:32.485378
+arr = np.arange(10)

# 2017-10-09 09:51:38.740774
+np.random.shuffle(arr)

# 2017-10-09 09:51:39.861915
+arr

# 2017-10-09 13:09:40.259801
+import numpy as np

# 2017-10-09 13:10:16.065189
+np.invert([False, False, True, False])

# 2017-10-09 13:35:46.692903
+np.invert([10, 2])

# 2017-10-09 13:44:53.630297
+np.cast(np.invert([False, False, True, False]), np.float32)

# 2017-10-09 13:44:57.802662
+np.cast(np.invert([False, False, True, False]))

# 2017-10-09 13:45:16.157582
+help(np.cast)

# 2017-10-09 13:45:58.517530
+np.invert([False, False, True, False]).astype(np.float32)

# 2017-10-10 02:31:58.076582
+a = np.array([[1, 2],
+          [3, 4],
+          [6, 7]])

# 2017-10-10 02:31:58.874018
+a

# 2017-10-10 02:32:10.222189
+a[:, [0, 1, 0]]

# 2017-10-10 02:32:16.410629
+a

# 2017-10-10 02:32:34.826897
+a[np.arange(3), [0, 1, 0]]

# 2017-10-10 02:32:38.664946
+a

# 2017-10-10 02:32:39.555451
+a[np.arange(3), [0, 1, 0]]

# 2017-10-11 08:20:24.278223
+import numpy as np

# 2017-10-11 08:20:41.237495
+shape = [4, 4]

# 2017-10-11 08:20:45.096110
+nS = np.prod(shape)

# 2017-10-11 08:20:46.001833
+nS

# 2017-10-11 08:20:59.241823
+grid = np.arange(nS).reshape(shape)

# 2017-10-11 08:21:00.201747
+grid

# 2017-10-11 08:21:29.406400
+it = np.nditer(grid, flags=['mult_index'])

# 2017-10-11 08:21:36.369968
+it = np.nditer(grid, flags=['multi_index'])

# 2017-10-11 08:21:37.217848
+it

# 2017-10-11 08:21:41.694774
+it[0]

# 2017-10-11 08:21:43.382122
+it[1]

# 2017-10-11 08:21:48.717143
+for i in it:
+    print(i)

# 2017-10-11 08:21:50.625399
+it

# 2017-10-11 08:21:52.666487
+for i in it:
+    print(i)

# 2017-10-11 08:21:57.513248
+it = np.nditer(grid, flags=['multi_index'])

# 2017-10-11 08:22:08.121292
+for i, j in it:
+    print(i , j)

# 2017-10-11 08:22:53.055702
+it.reset

# 2017-10-11 08:22:54.006204
+it.reset()

# 2017-10-11 08:22:59.277652
+it.multi_index

# 2017-10-11 08:23:10.183638
+s = it.iterindex

# 2017-10-11 08:23:10.782596
+s

# 2017-10-11 08:29:12.908938
+nS

# 2017-10-11 08:29:18.426456
+np.ones(nS)

# 2017-10-11 08:29:20.445496
+np.ones(nS) / nS

# 2017-10-11 08:31:02.465607
+from gridworld import GridWorldEnv

# 2017-10-11 08:31:06.923085
+env = GridWorldEnv()

# 2017-10-11 08:31:10.383880
+env.shape

# 2017-10-11 08:31:20.569260
+env.nS 

# 2017-10-11 08:31:51.275076
+env.P

# 2017-10-11 08:31:58.613005
+from pprint import pprint

# 2017-10-11 08:32:02.170756
+pprint(env.P)

# 2017-10-11 08:32:45.922448
+env.isd

# 2017-10-11 08:41:30.050145
+from gridworld import GridWorldEnv

# 2017-10-11 08:41:31.898321
+env = GridWorldEnv()

# 2017-10-11 08:41:33.864144
+env.nA

# 2017-10-11 08:42:52.872482
+env.P

# 2017-10-11 08:42:55.257463
+env.P[0]

# 2017-10-11 08:43:09.606656
+len(env.P)

# 2017-10-11 08:43:26.643946
+env.P[17]

# 2017-10-11 08:43:28.058605
+env.P[15]

# 2017-10-11 08:43:29.303879
+env.P[16]

# 2017-10-11 08:43:30.397746
+env.P[1]

# 2017-10-11 08:47:27.560127
+env.P[1][0]

# 2017-10-11 08:51:54.241257
+P, next_state, reward, done = env.P[0][0]

# 2017-10-11 08:51:58.733469
+env.P[0][0]

# 2017-10-11 08:52:01.473403
+env.P[0][0][0]

# 2017-10-11 08:52:21.851807
+[P, next_state, reward, done] = env.P[0][0]

# 2017-10-11 12:06:17.040975
+import tensorflow as tf

# 2017-10-11 12:06:23.849551
+vec = tf.Variable([7., 7.], 'vec')

# 2017-10-11 12:06:35.519434
+loss = tf.reduce_sum(tf.square(vec))

# 2017-10-11 12:07:02.288158
+tf.contrib.python

# 2017-10-11 12:07:07.620391
+tf.contrib.opt

# 2017-10-11 12:07:30.491635
+opt = tf.contrib.opt.ScipyOptimizerInterface(loss, options={'maxiter': 100})

# 2017-10-11 12:07:41.540238
+sess = tf.InteractiveSession()

# 2017-10-11 12:07:50.760299
+opt.minimize(sess)

# 2017-10-11 12:08:08.928528
+tf.global_variables_initializer().run()

# 2017-10-11 12:08:10.548912
+opt.minimize(sess)

# 2017-10-11 12:08:47.352560
+from tf.contrib.opt import ScipyOptimizerInterfae

# 2017-10-11 12:08:48.898150
+from tf.contrib.opt import ScipyOptimizerInterface

# 2017-10-11 12:08:52.979548
+from tensorflow.contrib.opt import ScipyOptimizerInterface

# 2017-10-11 12:08:59.026780
+vector = tf.Variable([7., 7.], 'vector')
+
+# Make vector norm as small as possible.
+loss = tf.reduce_sum(tf.square(vector))
+# Ensure the vector's y component is = 1.
+equalities = [vector[1] - 1.]
+# Ensure the vector's x component is >= 1.
+inequalities = [vector[0] - 1.]
+
+# Our default SciPy optimization algorithm, L-BFGS-B, does not support
+# general constraints. Thus we use SLSQP instead.
+optimizer = ScipyOptimizerInterface(
+    loss, equalities=equalities, inequalities=inequalities, method='SLSQP')
+
+with tf.Session() as session:
+  optimizer.minimize(session)

# 2017-10-11 12:09:08.532943
+vector = tf.Variable([7., 7.], 'vector')
+
+# Make vector norm as small as possible.
+loss = tf.reduce_sum(tf.square(vector))
+# Ensure the vector's y component is = 1.
+equalities = [vector[1] - 1.]
+# Ensure the vector's x component is >= 1.
+inequalities = [vector[0] - 1.]
+
+# Our default SciPy optimization algorithm, L-BFGS-B, does not support
+# general constraints. Thus we use SLSQP instead.
+optimizer = ScipyOptimizerInterface(
+    loss, equalities=equalities, inequalities=inequalities, method='SLSQP')
+
+with tf.Session() as session:
+  tf.global_variables_initializer().run()
+  optimizer.minimize(session)

# 2017-10-11 12:09:12.855664
+vector = tf.Variable([7., 7.], 'vector')
+
+# Make vector norm as small as possible.
+loss = tf.reduce_sum(tf.square(vector))
+# Ensure the vector's y component is = 1.
+equalities = [vector[1] - 1.]
+# Ensure the vector's x component is >= 1.
+inequalities = [vector[0] - 1.]
+
+# Our default SciPy optimization algorithm, L-BFGS-B, does not support
+# general constraints. Thus we use SLSQP instead.
+optimizer = ScipyOptimizerInterface(
+    loss, equalities=equalities, inequalities=inequalities, method='SLSQP')
+
+with tf.Session() as session:
+  tf.global_variables_initializer().run()
+  print(optimizer.minimize(session))

# 2017-10-11 12:09:45.492995
+vector = tf.Variable([7., 7.], 'vector')
+
+# Make vector norm as small as possible.
+loss = tf.reduce_sum(tf.square(vector))
+# Ensure the vector's y component is = 1.
+equalities = [vector[1] - 1.]
+# Ensure the vector's x component is >= 1.
+inequalities = [vector[0] - 1.]
+
+# Our default SciPy optimization algorithm, L-BFGS-B, does not support
+# general constraints. Thus we use SLSQP instead.
+optimizer = ScipyOptimizerInterface(
+    loss, equalities=equalities, inequalities=inequalities, method='SLSQP')
+
+with tf.Session() as session:
+  tf.global_variables_initializer().run()
+  print(optimizer.minimize(session))
+  sess.run({loss})

# 2017-10-11 12:10:23.933407
+vector = tf.Variable([7., 7.], 'vector')
+
+# Make vector norm as small as possible.
+loss = tf.reduce_sum(tf.square(vector))
+# Ensure the vector's y component is = 1.
+equalities = [vector[1] - 1.]
+# Ensure the vector's x component is >= 1.
+inequalities = [vector[0] - 1.]
+
+# Our default SciPy optimization algorithm, L-BFGS-B, does not support
+# general constraints. Thus we use SLSQP instead.
+optimizer = ScipyOptimizerInterface(
+    loss, equalities=equalities, inequalities=inequalities, method='SLSQP')
+
+with tf.Session() as session:
+  tf.global_variables_initializer().run()
+  train_op = optimizer.minimize(session)
+  _, loss = sess.run(train_op, loss)

# 2017-10-11 12:10:49.975303
+vector = tf.Variable([7., 7.], 'vector')
+
+# Make vector norm as small as possible.
+loss = tf.reduce_sum(tf.square(vector))
+# Ensure the vector's y component is = 1.
+equalities = [vector[1] - 1.]
+# Ensure the vector's x component is >= 1.
+inequalities = [vector[0] - 1.]
+
+# Our default SciPy optimization algorithm, L-BFGS-B, does not support
+# general constraints. Thus we use SLSQP instead.
+optimizer = ScipyOptimizerInterface(
+    loss, equalities=equalities, inequalities=inequalities, method='SLSQP')
+
+with tf.Session() as session:
+  tf.global_variables_initializer().run()
+  train_op = optimizer.minimize(session)
+  _, loss = sess.run([train_op, loss])

# 2017-10-11 12:11:10.905414
+vector = tf.Variable([7., 7.], 'vector')
+
+# Make vector norm as small as possible.
+loss = tf.reduce_sum(tf.square(vector))
+# Ensure the vector's y component is = 1.
+equalities = [vector[1] - 1.]
+# Ensure the vector's x component is >= 1.
+inequalities = [vector[0] - 1.]
+
+# Our default SciPy optimization algorithm, L-BFGS-B, does not support
+# general constraints. Thus we use SLSQP instead.
+optimizer = ScipyOptimizerInterface(
+    loss, equalities=equalities, inequalities=inequalities, method='SLSQP')
+
+with tf.Session() as session:
+  tf.global_variables_initializer().run()
+  train_op = optimizer.minimize(session)
+  print(train_op)

# 2017-10-11 12:11:17.006323
+vector = tf.Variable([7., 7.], 'vector')
+
+# Make vector norm as small as possible.
+loss = tf.reduce_sum(tf.square(vector))
+# Ensure the vector's y component is = 1.
+equalities = [vector[1] - 1.]
+# Ensure the vector's x component is >= 1.
+inequalities = [vector[0] - 1.]
+
+# Our default SciPy optimization algorithm, L-BFGS-B, does not support
+# general constraints. Thus we use SLSQP instead.
+optimizer = ScipyOptimizerInterface(
+    loss, equalities=equalities, inequalities=inequalities, method='SLSQP')
+
+with tf.Session() as session:
+  tf.global_variables_initializer().run()
+  train_op = optimizer.minimize(session)
+  print(train_op.eval())

# 2017-10-11 12:11:36.114136
+vector = tf.Variable([7., 7.], 'vector')
+
+# Make vector norm as small as possible.
+loss = tf.reduce_sum(tf.square(vector))
+# Ensure the vector's y component is = 1.
+equalities = [vector[1] - 1.]
+# Ensure the vector's x component is >= 1.
+inequalities = [vector[0] - 1.]
+
+# Our default SciPy optimization algorithm, L-BFGS-B, does not support
+# general constraints. Thus we use SLSQP instead.
+optimizer = ScipyOptimizerInterface(
+    loss, equalities=equalities, inequalities=inequalities, method='SLSQP')
+
+with tf.Session() as session:
+  tf.global_variables_initializer().run()
+  train_op = optimizer.minimize(session)
+  print(loss.eval())

# 2017-10-11 12:22:29.024927
+vector = tf.Variable([7., 7.], 'vector')
+
+# Make vector norm as small as possible.
+loss = tf.reduce_sum(tf.square(vector))
+# Ensure the vector's y component is = 1.
+equalities = [vector[1] - 1.]
+# Ensure the vector's x component is >= 1.
+inequalities = [vector[0] - 1.]
+
+# Our default SciPy optimization algorithm, L-BFGS-B, does not support
+# general constraints. Thus we use SLSQP instead.
+optimizer = ScipyOptimizerInterface(
+    loss, equalities=equalities, inequalities=inequalities, method='SLSQP')

# 2017-10-11 12:22:44.496278
+sess = tf.InteractiveSession()

# 2017-10-11 12:22:52.783614
+optimizer.minimize(sess)

# 2017-10-15 04:57:17.220928
+import tensorflow as tf

# 2017-10-15 04:57:18.693538
+import numpy as np

# 2017-10-15 04:57:24.093830
+import pandas as pd

# 2017-10-15 04:57:28.027522
+np.random.seed(43)

# 2017-10-15 04:58:39.329828
+A = np.random.randn(3, 4)

# 2017-10-15 04:58:40.795324
+A

# 2017-10-15 04:58:47.531899
+A = A.T

# 2017-10-15 04:58:47.829365
+A

# 2017-10-15 04:59:00.886450
+A_df = pd.DataFrame(A)

# 2017-10-15 04:59:02.144421
+A_df

# 2017-10-15 04:59:38.164650
+A = np.array([[3, 4, 5, 2], [4, 4, 3, 3], [5, 5, 4, 4]], dtype=np.float32).T

# 2017-10-15 04:59:46.993107
+A_rig_df = pd.DataFrame(A)

# 2017-10-15 04:59:48.711820
+A_rig_df

# 2017-10-15 05:00:02.370939
+A_df_masked = A_rig_df.copy()

# 2017-10-15 05:00:16.243572
+A_df_masked.iloc

# 2017-10-15 05:00:18.049804
+A_df_masked

# 2017-10-15 05:00:26.608465
+A_df_masked.iloc[0, 0] = np.NAN

# 2017-10-15 05:00:37.512249
+A_df_masked

# 2017-10-15 05:00:47.546876
+np_mask = A_df_masked.notnull()

# 2017-10-15 05:00:49.606646
+np_mask

# 2017-10-15 05:01:11.377477
+tf_mask = tf.Variable(A_df_masked.values)

# 2017-10-15 05:01:14.571947
+A_df_masked.values

# 2017-10-15 05:01:32.939838
+A = tf.constant(A_df_masked.values)

# 2017-10-15 05:01:42.548456
+shape = A_df_masked.values.shape

# 2017-10-15 05:01:43.835994
+shape

# 2017-10-15 05:01:46.513698
+rank = 3

# 2017-10-15 05:02:05.961686
+temp_H = np.random.randn(rank, shape[1]).astype(np.float32)

# 2017-10-15 05:02:07.893085
+temp_H

# 2017-10-15 05:02:26.910433
+temp_H = np.divide(temp_H, temp_H.max())

# 2017-10-15 05:02:31.044194
+temp_H

# 2017-10-15 05:03:07.182386
+temp_W = np.random.randn(shape[0], rank).astype(np.float32)

# 2017-10-15 05:03:19.886725
+temp_W

# 2017-10-15 05:03:23.304143
+rank

# 2017-10-15 05:04:01.738850
+temp_W = np.divide(temp_W, temp_W.max())

# 2017-10-15 05:04:09.702688
+H = tf.Variable(temp_H)

# 2017-10-15 05:04:18.152914
+W = tf.Variable(temp_W)

# 2017-10-15 05:04:22.973672
+H

# 2017-10-15 05:04:25.266265
+W

# 2017-10-15 05:05:49.236188
+WH = tf.matmul(W, H)

# 2017-10-15 05:05:50.152987
+WH

# 2017-10-15 05:05:57.073286
+cost = tf.reduce_sum(tf.pow(tf.boolean_mask(A, tf_mask) - tf.boolean_mask(WH, tf_mask), 2))

# 2017-10-15 07:09:14.397516
+import numpy as np

# 2017-10-15 07:09:35.232617
+help(np.random.normal)

# 2017-10-15 07:09:44.399604
+np.random.normal(0)

# 2017-10-15 07:12:55.777728
+fx = lambda x, s, m: np.exp(- (x - m)**2 / (2 * s**2) ) / np.sqrt()

# 2017-10-15 07:13:11.335127
+fx = lambda x, s, m: np.exp(- (x - m)**2 / (2 * s**2) ) / np.sqrt(2 * np.pi * s**2)

# 2017-10-15 07:13:22.999607
+fx(0, 0, )

# 2017-10-15 07:13:24.363094
+fx(0, 0, 1)

# 2017-10-15 07:13:37.094016
+fx(1, 0, 1)

# 2017-10-15 07:13:50.644483
+fx = lambda x, m, s: np.exp(- (x - m)**2 / (2 * s**2) ) / np.sqrt(2 * np.pi * s**2)

# 2017-10-15 07:13:55.037649
+fx(0, 0, 1)

# 2017-10-15 07:15:17.810112
+fx(-1000, 0, 1)

# 2017-10-15 07:15:21.204767
+fx(-10, 0, 1)

# 2017-10-15 07:15:25.119781
+fx(0, 0, 1)

# 2017-10-15 07:15:27.856779
+fx(1, 0, 1)

# 2017-10-15 07:15:30.863592
+fx(10, 0, 1)

# 2017-10-15 07:15:35.830647
+fx(0.5, 0, 1)

# 2017-10-15 07:16:32.897667
+import numpy as np
+
+x_train = np.linspace(-3, 3, num=50)
+y_train = np.cos(x_train) + np.random.normal(0, 0.1, size=50)
+x_train = x_train.astype(np.float32).reshape((50, 1))
+y_train = y_train.astype(np.float32).reshape((50, 1))

# 2017-10-15 07:16:38.411560
+plt

# 2017-10-15 07:39:18.388005
+import torch

# 2017-10-15 07:39:22.429983
+torch.Tensor

# 2017-10-15 07:39:43.184743
+torch.FloatTensor

# 2017-10-15 07:41:01.211085
+torch.__version__

# 2017-10-15 07:52:51.900489
+import torch

# 2017-10-15 08:37:54.907149
+import numpy as np

# 2017-10-15 08:37:58.099055
+torch.prod

# 2017-10-15 08:38:21.084019
+from torch.autograd import Variable

# 2017-10-15 08:38:45.222409
+x = torch.randn(3, 4)

# 2017-10-15 08:38:45.696613
+x

# 2017-10-15 08:38:54.350499
+x=  Variable(x, requires_grad=True)

# 2017-10-15 08:38:56.965769
+x.abs

# 2017-10-15 08:39:00.118012
+x.abs()

# 2017-10-15 08:39:05.197105
+x[1:]

# 2017-10-15 08:39:09.015862
+x[0:]

# 2017-10-15 08:39:12.776336
+x.size()

# 2017-10-15 08:39:32.233019
+x = torch.randn(32, 4, 10)

# 2017-10-15 08:39:44.062874
+x=  Variable(x, requires_grad=True)

# 2017-10-15 08:39:56.546492
+x.size()[1:]

# 2017-10-15 08:40:01.426246
+x.size()[1:].prod()

# 2017-10-15 08:40:04.359568
+x.size()[1:]

# 2017-10-15 08:40:16.652446
+torch.prod(x.size()[1:])

# 2017-10-15 08:40:25.966470
+x.size()[1:].value

# 2017-10-15 08:40:30.342055
+dir(x.size()[1:])

# 2017-10-15 08:40:45.864813
+list(x.size()[1:])

# 2017-10-15 08:40:51.182971
+np.prod(list(x.size()[1:]))

# 2017-10-15 08:41:18.976984
+torch.prod(list(x.size()[1:]))

# 2017-10-15 08:41:29.140541
+torch.prod(x.size()[1:])

# 2017-10-15 08:41:30.470034
+torch.prod(x.size()[1:], 0)

# 2017-10-15 08:41:32.034888
+torch.prod(x.size()[1:], 1)

# 2017-10-15 08:41:34.396908
+torch.prod(x.size()[1:], True)

# 2017-10-15 08:41:36.328962
+torch.prod(x.size()[1:], 0, True)

# 2017-10-15 08:52:05.263084
+torch.randn(1, 10)

# 2017-10-15 09:20:54.669278
+x = np.array([-1.2582, 1.2655, 0.6063])

# 2017-10-15 09:21:07.661454
+2 * x * 0.1

# 2017-10-15 09:23:01.863852
+2 * x 

# 2017-10-15 09:23:24.352705
+(2 * x) * np.array([0.1, 0.3, 0.5])

# 2017-10-15 09:37:03.966151
+x

# 2017-10-15 09:37:13.411221
+y  = Variable(x)

# 2017-10-15 09:37:27.859593
+torch.from_numpy(x)

# 2017-10-15 09:37:33.390360
+Variable(torch.from_numpy(x))

# 2017-10-15 09:37:36.714853
+y = _

# 2017-10-15 09:37:39.991919
+y.clamp

# 2017-10-15 09:37:51.060991
+y.clamp(min=0)

# 2017-10-19 13:56:21.909110
+import tensorflow as tf

# 2017-10-19 14:05:55.873657
+help(tf.nn.relu)

# 2017-10-19 14:21:57.702934
+import gym

# 2017-10-19 14:21:59.698258
+gym.spaces

# 2017-10-19 15:41:57.301432
+from tensorforce.core.networks import  layered_network_builder

# 2017-10-19 15:42:10.759975
+dict(hoge='10')

# 2017-10-19 15:42:50.731932
+layered_network_builder(dict(type='dense', size=10, activation='relu'))

# 2017-10-19 15:42:57.278642
+network = _

# 2017-10-19 15:43:46.418187
+network['type']

# 2017-10-19 15:44:30.008132
+for n in network:
+    print(callable(n['type']))

# 2017-10-20 04:35:59.586052
+a = lambda x: hoge

# 2017-10-20 04:36:02.818748
+a = lambda x: "hoge"

# 2017-10-20 04:36:03.519295
+a()

# 2017-10-20 04:36:06.296389
+a(10)

# 2017-10-20 04:36:11.578219
+callable(a)

# 2017-10-20 04:36:15.592739
+callable("HOGE")

# 2017-10-20 04:36:41.133460
+class A():
+   def __call__(self):
+       return "HOGE"

# 2017-10-20 04:36:42.777059
+a = A()

# 2017-10-20 04:36:43.144086
+a

# 2017-10-20 04:36:47.187608
+a()

# 2017-10-20 04:36:51.423614
+callable(a)

# 2017-10-20 04:36:52.988423
+callable(A)

# 2017-10-22 00:18:41.919060
+import torch

# 2017-10-22 00:18:55.913949
+import torch.nn as nn

# 2017-10-22 02:03:47.672910
+a = torch.randn(2, 3)

# 2017-10-22 02:03:47.983253
+a

# 2017-10-22 02:03:50.677979
+a.sum()

# 2017-10-22 02:03:57.079458
+a.clamp(min=0)

# 2017-10-22 02:04:23.268503
+a.size

# 2017-10-22 02:04:24.245854
+a.size()

# 2017-10-22 02:04:39.712961
+help(a.size())

# 2017-10-22 02:04:46.012116
+dict(a.size())

# 2017-10-22 02:04:55.940320
+a.size()

# 2017-10-22 02:05:04.927382
+a.size().list()

# 2017-10-22 02:05:09.230450
+attr(a.size())

# 2017-10-22 02:06:25.906810
+dir(a.size())

# 2017-10-22 02:06:35.560789
+a.size().index

# 2017-10-22 02:06:36.513744
+a.size().index()

# 2017-10-22 02:06:40.240830
+a.size().count

# 2017-10-22 02:06:41.106236
+a.size().count()

# 2017-10-22 02:06:43.120246
+a.size().count(0)

# 2017-10-22 02:06:51.728425
+list(a.size())

# 2017-10-22 02:11:04.400247
+a.t

# 2017-10-22 02:11:05.203690
+a.t()

# 2017-10-22 02:11:06.300643
+a

# 2017-10-22 02:11:08.785905
+a.T()

# 2017-10-22 02:11:11.061900
+a.t()

# 2017-10-22 02:11:14.209544
+a.t_()

# 2017-10-22 02:11:55.944485
+a

# 2017-10-22 02:13:37.601663
+import numpy as np

# 2017-10-22 02:14:17.803979
+np.zeros((2, 3))

# 2017-10-22 02:14:23.011471
+np.zeros((3, 2))

# 2017-10-22 02:14:29.725852
+torch.from_numpy(np.zeros((3, 2)))

# 2017-10-22 02:14:38.105540
+a[torch.from_numpy(np.zeros((3, 2)))]

# 2017-10-22 02:14:43.956400
+a[torch.from_numpy(np.zeros((3, 2))) < 0]

# 2017-10-22 02:14:55.116893
+a[torch.from_numpy(np.zeros((3, 2))) == 0] = 0

# 2017-10-22 02:14:55.540881
+a

# 2017-10-23 00:47:56.132052
+import pandas as pd

# 2017-10-23 00:48:12.562526
+df = pd.read_csv('./violations.txt')

# 2017-10-23 00:48:13.076554
+df

# 2017-10-23 00:48:27.214001
+import numpy as np

# 2017-10-23 00:48:30.483837
+df.values()

# 2017-10-23 00:48:31.661209
+df.values

# 2017-10-23 00:48:42.293134
+df.values.T

# 2017-10-23 00:48:58.937200
+import matplotlib.pyplot as plt

# 2017-10-23 00:49:19.965837
+plt.plot(df.values.T)

# 2017-10-23 00:49:23.486554
+df.values.T

# 2017-10-23 00:50:01.227847
+np.squeeze(df.values.T)

# 2017-10-23 00:50:18.395446
+import matplotlib.pyplot as plt

# 2017-10-23 00:50:22.775762
+import pandas as pd

# 2017-10-23 00:50:27.463318
+df = pd.read_csv('./violations.txt')

# 2017-10-23 00:50:40.845770
+import numpy as np

# 2017-10-23 00:50:50.936186
+plt.plot(np.squeeze(df.values.T))

# 2017-10-23 00:53:40.180842
+plt.show()

# 2017-10-23 12:26:06.337320
+import numpy as np

# 2017-10-23 12:26:16.026216
+np.log10(2)

# 2017-10-23 15:27:05.156748
+ls

# 2017-10-23 15:29:17.094555
+import pan

# 2017-10-23 15:29:33.898958
+from pandas.core import eval

# 2017-10-23 15:32:19.507371
+from pandas.core.computation import eval

# 2017-10-23 15:32:55.862623
+eval('1 + 1')

# 2017-10-23 15:33:27.958922
+from numpy.random import randn

# 2017-10-23 15:33:28.727323
+df = DataFrame(randn(10, 2), columns=list('ab'))

# 2017-10-23 15:33:35.914422
+from pandas import DataFrame

# 2017-10-23 15:33:36.870030
+df = DataFrame(randn(10, 2), columns=list('ab'))

# 2017-10-23 15:33:38.050129
+df

# 2017-10-23 15:33:44.392624
+eval('a + b')

# 2017-10-23 15:41:04.397525
+np.zeros((12, 12))

# 2017-10-23 15:41:07.360079
+import numpy as np

# 2017-10-23 15:41:08.267387
+np.zeros((12, 12))

# 2017-10-23 15:41:11.777472
+print(np.zeros((12, 12)))

# 2017-10-23 15:41:54.029974
+12 * 12

# 2017-10-23 15:41:55.872066
+12 * 12 / 2

# 2017-10-23 15:43:41.165561
+import numpy as np

# 2017-10-23 15:43:46.799383
+np.zeros((9, 9))

# 2017-10-23 15:43:51.080600
+9 * 9 / 2

# 2017-10-23 15:44:22.627093
+(6 * 9) - (9)

# 2017-10-23 15:46:08.497398
+S = lambda x: (2*x/3)**2 - x/3

# 2017-10-23 15:46:10.352937
+S(9)

# 2017-10-23 15:46:20.095537
+6 * 3

# 2017-10-23 15:46:21.789909
+6 * 3 + 9

# 2017-10-23 15:46:39.735312
+2*9/3

# 2017-10-23 15:46:49.825698
+6**6

# 2017-10-23 15:46:53.544002
+6**2

# 2017-10-23 15:47:06.979746
+6**2 - x

# 2017-10-23 15:47:08.945106
+6**2 - 9

# 2017-10-23 15:47:23.929219
+S = lambda x: (2*x/3)**2 - x/3

# 2017-10-23 15:47:29.440891
+S = lambda x: (2*x/3)**2 - x

# 2017-10-23 15:47:32.479760
+S(9)

# 2017-10-23 15:47:39.177044
+np.zeros((12, 12))

# 2017-10-23 15:49:17.780399
+8 * 4 + 4 * 4

# 2017-10-23 15:49:22.740104
+S(12)

# 2017-10-23 15:50:11.608984
+9 * 9

# 2017-10-23 15:50:16.847881
+(9 * 9)/ 9

# 2017-10-23 15:50:27.837578
+(9 * 9)/ 9 * 3

# 2017-10-23 15:50:47.154312
+S = lambda x: (x * x) / x * 3

# 2017-10-23 15:50:49.971544
+S(9)

# 2017-10-23 15:50:51.972503
+S(12)

# 2017-10-23 15:50:59.053824
+S(15)

# 2017-10-23 15:57:55.318602
+S = lambda x: (x * x) / x * 3

# 2017-10-23 15:57:56.959947
+S(9)

# 2017-10-23 16:12:28.824508
+S = lambda x: (x * x) * 3 / 9

# 2017-10-23 16:12:30.603820
+S(9)

# 2017-10-23 16:12:33.503950
+S(12)

# 2017-10-23 16:12:44.374822
+S = lambda x: (x * x)  / 3

# 2017-10-23 16:12:46.710886
+S(9)

# 2017-10-23 16:12:48.583861
+S(12)

# 2017-10-24 14:23:56.389947
+from tensorforce.models import Model

# 2017-10-24 14:32:50.734119
+Model()

# 2017-10-24 14:35:37.848219
+from tensorforce.environments.contrib.openai_gym import OpenAIGym

# 2017-10-24 14:35:47.423574
+from tensorforce.contrib.openai_gym import OpenAIGym

# 2017-10-24 14:36:05.226379
+env = OpenAIGym('CartPole-v0')

# 2017-10-24 14:36:10.943977
+env.P 

# 2017-10-24 14:36:13.803705
+env.action_from_space

# 2017-10-24 14:36:20.534251
+env.actions

# 2017-10-24 14:36:50.756949
+env.execute

# 2017-10-24 14:37:02.892004
+env.states

# 2017-10-24 14:37:15.814188
+network_spec = [
+    dict(type='dense', size=32, activation='tanh'),
+    dict(type='dense', size=32, activation='tanh')
+]

# 2017-10-24 14:37:25.381237
+Model(env.states_spec)

# 2017-10-24 14:37:57.091979
+Model(env.states, env.actions, network_spec)

# 2017-10-24 14:38:25.946084
+from tensorforce import Configuration

# 2017-10-24 14:38:36.148085
+config = Configuration(
+    batch_size=4096,
+    # Agent
+    preprocessing=None,
+    exploration=None,
+    reward_preprocessing=None,
+    # BatchAgent
+    keep_last_timestep=True,
+    # PPOAgent
+    step_optimizer=dict(
+        type='adam',
+        learning_rate=1e-3
+    ),
+    optimization_steps=10,
+    # Model
+    scope='ppo',
+    discount=0.99,
+    # DistributionModel
+    distributions=None,  # not documented!!!
+    entropy_regularization=0.01,
+    # PGModel
+    baseline_mode=None,
+    baseline=None,
+    baseline_optimizer=None,
+    gae_lambda=None,
+    normalize_rewards=False,
+    # PGLRModel
+    likelihood_ratio_clipping=0.2,
+    # Logging
+    log_level='info',
+    # TensorFlow Summaries
+    summary_logdir=None,
+    summary_labels=['total-loss'],
+    summary_frequency=1,
+    # Distributed
+    # TensorFlow distributed configuration
+    cluster_spec=None,
+    parameter_server=False,
+    task_index=0,
+    device=None,
+    local_model=False,
+    replica_model=False,
+ )

# 2017-10-24 14:38:46.174605
+Model(env.states, env.actions, network_spec, config)

# 2017-10-24 14:39:11.598635
+from tensorforce.agents import TRPOAgent

# 2017-10-24 14:39:21.685874
+TRPOAgent(env.states, env.actions, network_spec, config)

# 2017-10-24 14:39:29.632597
+agent = _

# 2017-10-24 14:39:31.761358
+agent.act

# 2017-10-24 15:34:02.865782
+agent.batch_count

# 2017-10-24 15:34:05.862208
+agent.batch_size

# 2017-10-24 15:34:08.862243
+agent.batch

# 2017-10-24 15:35:48.249404
+for i, j in agent.batch['states'].items():
+    print(i, j)

# 2017-10-25 09:32:32.953997
+import tensorflow.contrib.keras as keras

# 2017-10-25 09:32:48.149767
+from tensorflow.contrib import keras

# 2017-10-25 09:34:17.035299
+import tensorflow.keras 

# 2017-10-25 09:34:31.376095
+import tensorflow.contrib.keras as keras

# 2017-10-25 09:35:06.011461
+model = keras.models.Sequential()

# 2017-10-25 09:46:34.767812
+from tensorflow.contrib.keras.api.keras.models import Sequential

# 2017-10-25 09:47:03.353367
+from tensorflow.contrib.keras import models

# 2017-10-25 09:47:16.039558
+models

# 2017-10-25 09:57:04.881088
+import keras 

# 2017-10-25 09:57:16.055786
+keras.models

# 2017-10-25 09:57:29.925941
+from keras.models import Sequential

# 2017-10-25 10:05:00.810609
+exit

# 2017-10-25 10:15:31.253347
+from tensorforce import Configuration

# 2017-10-25 10:16:01.430638
+from tensorforce.agents import TRPOAgent

# 2017-10-25 10:17:27.469046
+from tensorforce import Configuration
+from tensorforce.agents import PPOAgent
+
+config = Configuration(
+    batch_size=1000,
+    step_optimizer=dict(
+        type='adam',
+        learning_rate=1e-4
+    )
+)

# 2017-10-25 10:30:42.892950
+from tensorforce.contrib.openai_gym import OpenAIGym

# 2017-10-25 10:30:54.228765
+env = OpenAIGym('CartPole-v0')

# 2017-10-25 10:30:57.443413
+env.states

# 2017-10-25 11:09:08.461870
+ls

# 2017-10-26 06:14:41.021771
+import gym

# 2017-10-26 06:14:51.491256
+gym.spaces

# 2017-10-26 06:21:28.138045
+import inspect

# 2017-10-26 06:21:45.700094
+def hoge(a, b, c, d):
+    print(a, b, c, d)

# 2017-10-26 06:21:49.573355
+inspect(hoge)

# 2017-10-26 06:21:58.285905
+inspect.getfullargspec(hoge)

# 2017-10-26 06:22:05.173092
+inspect.getfullargspec(hoge)[0]

# 2017-10-26 06:22:25.526822
+inspect.getargspec(hoge)

# 2017-10-26 06:22:31.749348
+inspect.getargspec(hoge)[0]

# 2017-10-26 06:22:39.589907
+inspect.signature(hoge)

# 2017-10-26 06:22:42.137726
+inspect.signature(hoge)[0]

# 2017-10-26 06:22:48.004174
+inspect.getfullargspec(hoge)

# 2017-10-26 06:22:58.347102
+locals()

# 2017-10-26 06:23:02.657167
+from pprint import pprint

# 2017-10-26 06:23:05.589719
+pprint(locals())

# 2017-10-26 06:27:10.694432
+import gym

# 2017-10-26 06:27:12.397562
+gym.spaces

# 2017-10-26 06:27:18.005830
+gym

# 2017-10-26 06:27:34.937265
+gym.spaces.Direct

# 2017-10-26 06:27:42.147664
+gym.spaces.Discrete

# 2017-10-26 06:28:38.456453
+gym.Space

# 2017-10-26 06:28:55.878871
+import gym.spaces

# 2017-10-26 06:29:51.739014
+import gym

# 2017-10-26 06:30:02.027988
+env = gym.make('CartPole-v0')

# 2017-10-26 06:30:06.605263
+gym.spaces

# 2017-10-26 06:31:45.128457
+env.action_space

# 2017-10-26 06:33:32.117147
+gym.spaces.Box(-1.2, 0.6)

# 2017-10-26 06:33:44.753123
+gym.spaces.Box(-1.2, 0.6, shapce=(2))

# 2017-10-26 06:33:49.575025
+gym.spaces.Box(-1.2, 0.6, shape=(2))

# 2017-10-26 06:33:56.063193
+gym.spaces.Box(-1.2, 0.6, shape=(2)).sample

# 2017-10-26 06:33:56.994691
+gym.spaces.Box(-1.2, 0.6, shape=(2)).sample()

# 2017-10-26 06:42:58.575921
+a = None

# 2017-10-26 06:43:01.810483
+b = 10

# 2017-10-26 06:43:04.102729
+a = a or b

# 2017-10-26 06:43:04.568236
+a

# 2017-10-26 06:43:13.670231
+a = 20

# 2017-10-26 06:43:17.153500
+a = a or b

# 2017-10-26 06:43:17.458989
+a

# 2017-10-26 06:44:01.982281
+env.spec

# 2017-10-26 06:44:04.527046
+env.spec.id

# 2017-10-26 06:44:06.524842
+env.spec.make

# 2017-10-26 06:44:13.242335
+env.spec.tags

# 2017-10-26 06:44:18.736795
+env.spec.max_episode_steps

# 2017-10-26 06:44:23.784071
+env.spec.max_episode_seconds

# 2017-10-26 06:44:32.323243
+env.spec.trials

# 2017-10-26 06:44:41.346979
+env.spec.reward_threshold

# 2017-10-26 13:09:59.651716
+import tensorflow as tf

# 2017-10-26 13:10:06.880486
+tf

# 2017-10-26 13:10:11.394230
+tf.__version__

# 2017-10-26 13:10:16.852582
+tf.abs

# 2017-10-26 13:10:18.777440
+tf.keras

# 2017-10-26 13:11:02.097798
+tf.keras.applications.inception_v3.InceptionV3.mro

# 2017-10-26 13:11:04.944794
+tf.keras.applications.inception_v3.InceptionV3

# 2017-10-26 13:11:17.724095
+tf.keras.backend

# 2017-10-26 13:11:20.119272
+tf.keras.backend()

# 2017-10-26 13:11:24.160342
+tf.keras.backend.abs

# 2017-10-26 13:12:39.806501
+tf.keras.losses

# 2017-10-26 14:03:58.560533
+import numpy as np

# 2017-10-26 14:04:01.941267
+a = np.zeros((12, 12))

# 2017-10-27 08:06:23.236444
+from scipy.stats import norm

# 2017-10-27 08:06:35.107940
+x = norm.rvs(loc=0, scale=1, size=10)

# 2017-10-27 08:06:35.579422
+x

# 2017-10-27 08:07:01.587615
+norm.pdf(x=1.0, loc=0, scale=1)

# 2017-10-27 08:08:02.368664
+X = norm.rvs(loc=0, scale=1, size=1000)

# 2017-10-27 08:08:09.459487
+Y = norm.pdf(x=X, loc=0, scale=1)

# 2017-10-27 08:08:27.520302
+import matplotlib.pyplot as plt

# 2017-10-27 08:08:32.036814
+plt.plot(X, Y)

# 2017-10-27 08:08:39.759563
+plt.show()

# 2017-10-27 08:08:46.698013
+plt.plot(X, Y, 'o')

# 2017-10-27 08:37:28.398468
+plt.show()

# 2017-10-27 08:37:33.272991
+import numpy as np

# 2017-10-27 08:37:56.798832
+Q = np.random.normal(loc=0, scale=1, size=100)

# 2017-10-27 08:37:57.358060
+Q

# 2017-10-27 08:38:09.412879
+plt.plot(Q, 'o')

# 2017-10-27 08:38:17.559846
+plt.show()

# 2017-10-27 08:39:51.376013
+Y = norm.pdf(x=Q, loc=0, scale=1)

# 2017-10-27 08:39:56.451236
+plt.plot(Q, Y, 'o')

# 2017-10-27 08:41:57.352166
+plt.show()

# 2017-10-27 08:42:59.693582
+x = norm.rvs(loc=0, scale=1, size=10)

# 2017-10-27 08:43:04.766691
+x = norm.rvs(loc=0, scale=1, size=100)

# 2017-10-27 08:43:13.999645
+plt.hist(x)

# 2017-10-27 08:43:28.767258
+plt.show()

# 2017-10-27 08:43:32.127271
+x = norm.rvs(loc=0, scale=1, size=1000)

# 2017-10-27 08:43:34.768994
+plt.hist(x)

# 2017-10-27 08:43:42.749197
+plt.show()

# 2017-10-27 08:44:37.872102
+norm.cdf(x=1000, loc=0, scale=1)

# 2017-10-27 08:44:41.522418
+norm.cdf(x=0, loc=0, scale=1)

# 2017-10-27 08:45:21.377927
+from scipy.stats import binom

# 2017-10-27 08:45:31.250522
+binom.pmf(10)

# 2017-10-27 08:45:35.867643
+binom.pmf(n=1, p=1)

# 2017-10-27 08:45:39.658031
+binom.pmf(n=1, p=1, k=1)

# 2017-10-27 08:46:29.661761
+np.random.normal(0)

# 2017-10-27 08:46:34.557730
+np.random.normal(0, 1, 10)

# 2017-10-27 08:46:45.413147
+np.random.normal(0, 1000, 10)

# 2017-10-27 08:47:00.017760
+X = np.random.normal(0, 1000, 10000000)

# 2017-10-27 08:47:02.788286
+plt.hist(X)

# 2017-10-27 08:47:16.786105
+plt.show()

# 2017-10-27 08:47:21.578948
+plt.hist(X)

# 2017-10-27 08:47:28.443462
+plt.show()

# 2017-10-27 08:47:34.311985
+plt.hist(X, bins=100)

# 2017-10-27 08:47:52.415128
+plt.show()

# 2017-10-27 09:08:17.495856
+import tensorflow as tf

# 2017-10-27 18:05:05.708038
+class A():
+    def __init__(self, a):
+        self.a = a
+    def __add__(self, other):
+        return self.a - other

# 2017-10-27 18:05:22.097224
+a = A(10)

# 2017-10-27 18:05:28.340664
+b = A(3)

# 2017-10-27 18:05:30.658687
+a + b

# 2017-10-27 18:05:35.353898
+class A():
+    def __init__(self, a):
+        self.a = a
+    def __add__(self, other):
+        return self.a - other.a

# 2017-10-27 18:05:38.440672
+a = A(10)

# 2017-10-27 18:05:40.886785
+b = A(3)

# 2017-10-27 18:05:43.400347
+a + b

# 2017-10-27 18:06:09.498807
+class A():
+    def __init__(self, a):
+        self.a = a
+    def __call__(self):
+        return "Fuck"
+       
+    def __add__(self, other):
+        return self.a - other.a

# 2017-10-27 18:06:16.732659
+a = A(10)

# 2017-10-27 18:06:19.067157
+a()

# 2017-10-27 18:09:18.831169
+class A():
+    def __init__(self, a):
+        self.a = a
+    def __call__(self):
+        return "Fuck"
+       
+    def __getitem__(self, item):
+        return item

# 2017-10-27 18:09:22.861278
+a = A(10)

# 2017-10-27 18:09:25.078406
+a[0]

# 2017-10-27 18:09:27.940297
+a[10]

# 2017-10-27 18:09:35.973358
+a[100]

# 2017-10-27 18:12:17.844595
+1,3

# 2017-10-27 18:12:28.869621
+1, 33

# 2017-10-27 18:12:58.609958
+10;333

# 2017-10-27 18:13:07.260521
+b = _

# 2017-10-27 18:13:07.997766
+b

# 2017-10-27 18:13:28.249777
+def a():
+    return "A"

# 2017-10-27 18:13:30.674245
+def b():
+    return "A"

# 2017-10-27 18:13:33.782762
+def b():
+    return "b"

# 2017-10-27 18:13:37.536170
+a(); b()

# 2017-10-27 18:13:45.009533
+a(), b()

# 2017-10-29 11:46:00.404113
+from keras.datasets import mnist

# 2017-10-29 11:46:17.583178
+(x_train, y_train), (x_test, y_test) = mnist.load_data()

# 2017-10-29 11:51:18.328609
+x_train.shape

# 2017-10-29 11:51:31.381530
+import numpy as np

# 2017-10-29 11:51:38.038584
+x_train[np.newaxis].shape

# 2017-10-29 11:51:47.294427
+x_train[:,:,:,np.newaxis].shape

# 2017-10-29 11:53:20.477697
+x_train[np.newaxis].astype('float32')

# 2017-10-29 11:53:26.926671
+x_train[np.newaxis]

# 2017-10-29 13:36:29.408825
+import torch.nn.functional as F

# 2017-10-29 13:36:50.324232
+import torch.nn as nn

# 2017-10-29 13:37:08.338907
+torch

# 2017-10-29 13:37:10.836940
+import torch 

# 2017-10-29 13:37:20.875421
+import numpy as np

# 2017-10-29 13:37:38.937993
+np.random.normal(0, 3, 2)

# 2017-10-29 13:37:56.596383
+np.random.randn(5, 3)

# 2017-10-29 13:37:59.432442
+Q = np.random.randn(5, 3)

# 2017-10-29 13:38:00.578035
+Q.shape

# 2017-10-29 13:38:13.879507
+Q.unsqueeze(0)

# 2017-10-29 13:38:33.381255
+torch.from_numpy(Q).float()

# 2017-10-29 13:38:44.569240
+torch.from_numpy(Q).float().unsqueeze(0)

# 2017-10-29 13:38:53.853693
+torch.from_numpy(Q).float().squzeeze()

# 2017-10-29 13:39:02.745941
+torch.from_numpy(Q).float().squeeze

# 2017-10-29 13:39:04.252664
+torch.from_numpy(Q).float().squeeze(0)

# 2017-10-29 13:39:06.851574
+torch.from_numpy(Q).float().squeeze(1)

# 2017-10-29 13:39:10.598385
+torch.from_numpy(Q).float().squeeze(00)

# 2017-10-29 13:39:13.667773
+torch.from_numpy(Q).float().squeeze(0000)

# 2017-10-29 13:39:16.461222
+torch.from_numpy(Q).float().squeeze(-1)

# 2017-10-29 13:39:18.741430
+torch.from_numpy(Q).float().squeeze(3)

# 2017-10-29 13:39:20.281043
+torch.from_numpy(Q).float().squeeze(2)

# 2017-10-29 13:39:21.881871
+torch.from_numpy(Q).float().squeeze(1)

# 2017-10-29 13:39:27.379840
+000

# 2017-10-29 13:39:35.437756
+torch.from_numpy(Q).float().unsqueeze(0)

# 2017-10-29 13:39:48.864801
+Q.squeeze

# 2017-10-29 13:39:49.957675
+Q.squeeze()

# 2017-10-29 13:39:52.551014
+Q.squeeze().shape

# 2017-10-29 13:39:55.661335
+Q.unsqueeze().shape

# 2017-10-29 13:40:10.257586
+torch.from_numpy(Q).float().unsqueeze(0)

# 2017-10-29 13:40:19.345210
+torch.from_numpy(Q[np.newaxis]).float()

# 2017-10-29 13:40:27.106961
+state= torch.from_numpy(Q[np.newaxis]).float()

# 2017-10-29 13:40:41.907491
+from torch.autograd import Variable

# 2017-10-29 13:40:51.585944
+Variable(state)

# 2017-10-29 13:40:55.619136
+state

# 2017-10-29 13:41:25.669598
+state.multinomial()

# 2017-10-29 13:41:48.599560
+F.softmax(state)

# 2017-10-29 13:41:59.806089
+F.softmax(state).multinomial()

# 2017-10-29 13:46:44.909017
+np.finfo(np.float32)

# 2017-10-29 13:46:51.851863
+np.finfo(np.float32).eps

# 2017-10-29 13:54:35.716090
+from tensorflow.examples.tutorials.mnist import input_data

# 2017-10-29 13:54:40.838432
+mnist = input_data.read_data_sets('/tmp/data', one_hot=True)

# 2017-10-29 13:55:37.004206
+mnist.train.images.shape

# 2017-10-29 13:56:16.110129
+mnist.train.labels.shape

# 2017-10-29 13:57:07.468168
+mnist.test.labels

# 2017-10-29 13:57:08.808188
+mnist.test.labels.shape

# 2017-10-29 13:58:48.856805
+mnist.train.images

# 2017-10-29 13:58:52.908566
+mnist.train.images[0]

# 2017-10-29 14:17:27.730330
+tf.contrib

# 2017-10-29 14:17:56.940945
+import tensorflow.contrib.layers as layers

# 2017-10-29 14:18:11.002636
+help(layers.conv2d)

# 2017-10-29 14:24:18.045879
+tf

# 2017-10-29 14:24:25.979992
+import tensorflow as tf

# 2017-10-29 14:24:32.998301
+tf.random_gamma

# 2017-10-29 14:24:41.143034
+tf.random_gamma(3, 4)

# 2017-10-29 14:24:47.106703
+help(tf.random_gamma)

# 2017-10-29 14:24:54.400500
+tf.random_gamma((3, 4))

# 2017-10-29 14:24:59.001673
+tf.random_gamma((3, 4), alpha=0.5)

# 2017-10-29 14:25:06.479871
+a = tf.random_gamma((3, 4), alpha=0.5)

# 2017-10-29 14:25:16.373273
+a = tf.random_gamma((None, 3, 4), alpha=0.5)

# 2017-10-29 14:25:39.067102
+x = tf.placeholder(tf.float32, [None, 32, 32])

# 2017-10-29 14:26:08.536596
+np.prod(x.shape[1:])

# 2017-10-29 14:26:13.481263
+x.shape

# 2017-10-29 14:26:30.362003
+x = tf.placeholder(tf.float32, [None, 28, 28])

# 2017-10-29 14:27:40.586650
+tf.reshape(x, [None, np.prod(x[1:])])

# 2017-10-29 14:27:48.619098
+tf.reshape(x, [None, np.prod(x.shape[1:])])

# 2017-10-29 14:27:55.350332
+x.shape[1:]

# 2017-10-29 14:28:01.174359
+np.prod(x.shape[1:])

# 2017-10-29 14:28:15.509657
+[None, np.prod(x.shape[1:])]

# 2017-10-29 14:28:23.995572
+tf.reshape(x, [None, np.prod(x.shape[1:])])

# 2017-10-29 14:28:40.353364
+tf.reshape(x, [None, list(np.prod(x.shape[1:]))])

# 2017-10-29 14:28:51.065036
+np.prod(x.shape[1:])

# 2017-10-29 14:28:53.358605
+np.prod(x.shape[1:]).as_list

# 2017-10-29 14:29:05.814967
+help(np.prod(x.shape[1:]))

# 2017-10-29 14:29:08.690583
+list(np.prod(x.shape[1:]))

# 2017-10-29 14:30:20.799067
+x.get_shape().as_list()

# 2017-10-29 14:30:23.852762
+x.get_shape().as_list()[1:]

# 2017-10-29 14:30:38.035176
+np.prod(x.get_shape().as_list()[1:])

# 2017-10-29 14:56:00.810422
+from tensorflow.examples.tutorials.mnist import input_data

# 2017-10-29 14:56:05.604724
+mnist = input_data.read_data_sets('/tmp/data', one_hot=True)

# 2017-10-29 14:57:06.197309
+help(mnist.train.next_batch)

# 2017-10-29 15:13:09.245567
+from keras.datasets import mnist

# 2017-10-29 15:13:15.989225
+(x_train, y_train), (x_test, y_test) = mnist.load_data()

# 2017-10-29 15:13:36.071099
+import numpy as np

# 2017-10-29 15:13:50.326568
+x_train.reshape(-1, 784).astype(np.float32) / 255

# 2017-10-29 15:14:14.501338
+x_train.shape

# 2017-10-29 15:14:20.241191
+(x_train.reshape(-1, 784).astype(np.float32) / 255).shape

# 2017-10-29 16:12:38.835831
+import tensorflow.python.keras as keras

# 2017-10-29 16:12:53.316069
+import tensorflow.python

# 2017-10-29 16:12:57.846077
+import tensorflow.python.keras as keras

# 2017-10-29 16:13:05.667911
+import tensorflow as tf

# 2017-10-29 16:13:07.963228
+tf.keras 

# 2017-10-29 16:56:19.312369
+from tensorforce.core.distributions import *

# 2017-10-29 16:56:29.087224
+a = Bernoulli([None, 10])

# 2017-10-29 16:56:32.431121
+a = Bernoulli([2, 10])

# 2017-10-29 16:56:33.066366
+a

# 2017-10-29 16:56:38.486783
+a.tf_sample()

# 2017-10-29 16:56:56.593826
+b = Bernoulli([2, 10])

# 2017-10-29 16:57:03.876931
+a.tf_kl_divergence(b)

# 2017-10-29 16:58:19.473193
+a

# 2017-10-29 16:58:28.003659
+_, _, _, _ = a

# 2017-10-29 16:58:29.142881
+a()

# 2017-10-29 16:58:50.772086
+a.logit

# 2017-10-29 16:58:51.956770
+a.logit()

# 2017-10-29 16:58:54.634095
+a.logit

# 2017-10-29 16:58:57.260625
+a.log_probability

# 2017-10-29 16:58:58.288076
+a.log_probability()

# 2017-10-29 17:34:47.244716
+import tensorforce.util 

# 2017-10-29 17:34:49.764271
+import tensorforce.util as U

# 2017-10-29 17:34:53.417790
+x

# 2017-10-29 17:34:56.107947
+x = tf

# 2017-10-29 17:35:06.481702
+import tensorflow as tf

# 2017-10-29 17:54:28.864860
+import edward as ed

# 2017-10-29 18:05:43.277008
+import tensorflow as tf

# 2017-10-29 18:05:53.398224
+help(tf.random_normal)

# 2017-10-29 18:06:17.356539
+u = tf.random_uniform([10, 20])

# 2017-10-29 18:06:18.473011
+u

# 2017-10-29 18:06:23.864247
+sess = tf.InteractiveSession()

# 2017-10-29 18:06:30.898861
+sess.run(u)

# 2017-10-29 18:06:53.296048
+import tensorforce.util as U

# 2017-10-29 18:06:57.790508
+U.rank(u)

# 2017-10-29 18:06:59.837094
+u

# 2017-10-29 18:07:01.605303
+u.shape

# 2017-10-29 18:07:25.231879
+U.shape(u)

# 2017-10-29 18:07:34.691802
+U.prod(u)

# 2017-10-29 18:07:47.236989
+np

# 2017-10-29 18:07:52.071417
+import numpy as np

# 2017-10-29 18:08:04.548432
+U.prod(np.arange(1, 15))

# 2017-10-29 18:08:15.404748
+np.prod(np.arange(1, 15))

# 2017-10-30 09:24:14.248547
+tf

# 2017-10-30 09:24:23.441523
+tf.range(0, 128 * 4, 4)

# 2017-10-30 09:24:26.773094
+tf.range(0, 128 * 4, 4).eval()

# 2017-10-30 09:24:35.598257
+tf.reverse(tf.range(0, 128 * 4, 4))

# 2017-10-30 09:24:48.743948
+tf.reverse(tf.range(0, 128 * 4, 4), axis=(1,0))

# 2017-10-30 09:24:59.696970
+tf.reverse(tf.range(0, 128 * 4, 4), axis=(0,))

# 2017-10-30 09:25:03.888825
+tf.reverse(tf.range(0, 128 * 4, 4), axis=(0,)).eval()

# 2017-10-30 09:25:10.463510
+tf.reverse(tf.range(0, 128 * 4, 4), axis=(1,)).eval()

# 2017-10-30 09:25:13.039769
+tf.reverse(tf.range(0, 128 * 4, 4), axis=(1,0)).eval()

# 2017-10-30 09:25:16.011962
+tf.reverse(tf.range(0, 128 * 4, 4), axis=(1,0))

# 2017-10-30 09:25:19.874523
+tf.reverse(tf.range(0, 128 * 4, 4), axis=(0))

# 2017-10-30 09:25:21.674794
+tf.reverse(tf.range(0, 128 * 4, 4), axis=(0,))

# 2017-10-30 09:25:26.611710
+tf.reverse(tf.range(0, 128 * 4, 4), axis=(0,)).eval()

# 2017-10-30 09:26:37.218513
+tf.reverse(tf.range(0, 128 * 4, 4), axis=0).eval()

# 2017-10-30 09:26:48.141272
+tf.reverse(tf.range(0, 128 * 4, 4), axis=[None, 0]).eval()

# 2017-10-30 09:26:55.332566
+tf.reverse(tf.range(0, 128 * 4, 4), axis=[None,0]).eval()

# 2017-10-30 09:27:01.295836
+tf.reverse(tf.range(0, 128 * 4, 4), axis=[0, None]).eval()

# 2017-10-30 09:27:07.118521
+tf.reverse(tf.range(0, 128 * 4, 4), axis=[0,]).eval()

# 2017-10-30 09:27:19.745222
+tf.random_gamma((1,0))

# 2017-10-30 09:27:24.172064
+tf.random_gamma((1,0), alpha=0)

# 2017-10-30 09:27:26.259066
+tf.random_gamma((1,0), alpha=0).shape

# 2017-10-30 09:27:30.067830
+tf.random_gamma((1,0), alpha=0).get_shape

# 2017-10-30 09:27:30.971804
+tf.random_gamma((1,0), alpha=0).get_shape()

# 2017-10-30 09:27:33.937803
+tf.random_gamma((1,0), alpha=0).get_shape().as_list()

# 2017-10-30 09:27:47.612175
+tf.random_gamma((1,0), alpha=0).shape.as_list()

# 2017-10-30 09:27:51.843003
+tf.random_gamma((1,0), alpha=0)

# 2017-10-30 09:27:54.177268
+tf.random_gamma((1,0), alpha=0).eval()

# 2017-10-30 09:28:01.829754
+tf.random_gamma((1,), alpha=0).eval()

# 2017-10-30 09:28:13.336340
+tf.random_gamma((3,), alpha=0).eval()

# 2017-10-30 09:28:16.816068
+tf.random_gamma((3,1), alpha=0).eval()

# 2017-10-30 09:28:24.814341
+tf.random_gamma((0,1), alpha=0).eval()

# 2017-10-30 09:28:27.762879
+tf.random_gamma((1,1), alpha=0).eval()

# 2017-10-30 09:31:04.683542
+tf.linspace(0, 1, 10000)

# 2017-10-30 09:31:22.776986
+tf.linspace(0, 1, 10000, dtype=tf.float32)

# 2017-10-30 09:31:42.672963
+help(tf.linspace)

# 2017-10-30 09:31:54.805022
+tf.linspace(0., 1., 10000)

# 2017-10-30 09:32:10.921719
+tf.reverse(tf.linspace(0., 1., 10000), axis=(1,))

# 2017-10-30 09:32:13.828719
+tf.reverse(tf.linspace(0., 1., 10000), axis=(1,)).eval()

# 2017-10-30 09:32:23.682479
+tf.reverse(tf.linspace(0., 1., 10000), axis=(1,)).eval

# 2017-10-30 09:32:24.745080
+tf.reverse(tf.linspace(0., 1., 10000), axis=(1,)).eval()

# 2017-10-30 09:32:41.655570
+tf.linspace(0., 1., 10000).eval()

# 2017-10-30 09:33:04.065537
+tf.reverse(tf.linspace(0., 1., 10000))

# 2017-10-30 09:33:14.531526
+tf.reverse(tf.linspace(0., 1., 10000), axis=(0,)).eval()

# 2017-10-30 09:33:57.165145
+A = tf.random_normal((10, 30, 40))

# 2017-10-30 09:33:57.565083
+A

# 2017-10-30 09:34:13.266122
+tf.reverse(A, axis=(0,))

# 2017-10-30 09:34:21.412317
+A.eval()

# 2017-10-30 09:34:35.299520
+(A - tf.reverse(A, axis=(0,))).eval()

# 2017-10-30 09:34:41.725573
+(A - tf.reverse(A, axis=(0,)))

# 2017-10-30 09:34:53.208808
+A = tf.random_normal((3, 2, 4))

# 2017-10-30 09:34:55.258819
+A.eval()

# 2017-10-30 09:35:02.018585
+tf.reverse(A, axis=(0,))

# 2017-10-30 09:35:04.353654
+tf.reverse(A, axis=(0,)).eval()

# 2017-10-30 09:35:38.709656
+A[0].eval()

# 2017-10-30 15:42:34.529520
+import gym

# 2017-10-30 15:42:36.780878
+env = gym.make('CartPole-v0')

# 2017-10-30 15:42:40.525264
+env.observation_space.n

# 2017-10-30 15:42:41.929535
+env.observation_space

# 2017-10-30 15:42:59.056003
+env.action_space.n

# 2017-10-30 15:48:28.517161
+import tensorflow as tf

# 2017-10-30 15:48:42.479381
+tf.placeholder(tf.float32, [None, env.observation_space])

# 2017-10-30 15:48:49.753742
+env.observation_space.contains

# 2017-10-30 15:48:51.030526
+env.observation_space.contains()

# 2017-10-30 15:48:56.309656
+env.observation_space.shape

# 2017-10-30 15:49:02.829009
+tf.placeholder(tf.float32, [None, env.observation_space.shape])

# 2017-10-30 15:49:15.204305
+env.observation_space.sample()

# 2017-10-30 15:49:24.856165
+tf.placeholder(tf.float32, [None, 4])

# 2017-10-30 15:57:46.675116
+import baselines.common.tf_util as U

# 2017-10-30 15:57:50.124490
+U.dense

# 2017-10-30 16:01:36.121959
+a = tf.constant([1, 2, 3])

# 2017-10-30 16:01:48.898979
+tf.sparse_softmax(a)

# 2017-10-30 16:02:02.249663
+tf.nn.softmax(a)

# 2017-10-30 16:02:08.427691
+a = tf.constant([1, 2, 3], tf.float32)

# 2017-10-30 16:02:09.158910
+a

# 2017-10-30 16:02:11.293624
+tf.nn.softmax(a)

# 2017-10-30 16:02:19.795053
+sess = tf.InteractiveSession()

# 2017-10-30 16:02:23.333381
+tf.nn.softmax(a)

# 2017-10-30 16:02:25.158894
+tf.nn.softmax(a).eval()

# 2017-10-30 16:26:33.846300
+from reinforce_with_baseline import PolicyEstimator

# 2017-10-30 16:27:09.944768
+policy = PolicyEstimator(env.action_space.n)

# 2017-10-30 16:27:18.248805
+import gym

# 2017-10-30 16:27:20.413775
+env = gym.make('CartPole-v0')

# 2017-10-30 16:27:22.811831
+policy = PolicyEstimator(env.action_space.n)

# 2017-10-30 16:28:00.080007
+from reinforce_with_baseline import PolicyEstimator

# 2017-10-30 16:28:01.360355
+policy = PolicyEstimator(env.action_space.n)

# 2017-10-30 16:28:28.618868
+tf.contrib.layer

# 2017-10-30 16:28:35.107132
+import tensorflow as tf

# 2017-10-30 16:28:39.408454
+tf.contrib.layer

# 2017-10-30 16:28:43.813867
+tf.contrib.layers.fully_connected

# 2017-10-30 16:29:12.844094
+import tensorflow as tf

# 2017-10-30 16:29:15.590321
+from reinforce_with_baseline import PolicyEstimator

# 2017-10-30 16:29:21.628789
+policy = PolicyEstimator(env.action_space.n)

# 2017-10-30 16:29:26.222476
+import gym

# 2017-10-30 16:29:29.331195
+env = gym.make('CartPole-v0')

# 2017-10-30 16:29:31.692401
+policy = PolicyEstimator(env.action_space.n)

# 2017-10-30 16:29:47.887199
+tf

# 2017-10-30 16:29:56.134734
+tf.contrib.layers.fully_connected

# 2017-10-30 16:37:17.397906
+import tensorflow as tf

# 2017-10-30 16:37:25.927860
+state = tf.placeholder(tf.int32, [], 'state')

# 2017-10-30 16:37:39.012908
+action = tf.placeholder(dtype=tf.int32, name='action')

# 2017-10-30 16:37:40.424351
+state

# 2017-10-30 16:37:41.895688
+action

# 2017-10-31 11:22:17.971462
+import tensorflow as tf

# 2017-10-31 11:22:23.172987
+x = tf.placeholder(tf.float32, [None])

# 2017-10-31 11:22:32.932707
+w = tf.Variable([0.], dtype=tf.float32)

# 2017-10-31 11:22:33.806518
+w

# 2017-10-31 11:22:33.915121
+x

# 2017-10-31 11:22:40.634287
+tf.matmul(w, x)

# 2017-10-31 11:22:43.377809
+tf.matmul(x, w)

# 2017-10-31 11:23:28.615421
+x = tf.placeholder(tf.float32, (1,))

# 2017-10-31 11:23:29.493230
+x

# 2017-10-31 11:23:30.682604
+w

# 2017-10-31 11:23:37.708545
+x * w

# 2017-10-31 11:23:42.911123
+tf.matmul(x, w)

# 2017-10-31 11:23:49.940611
+tf.matmul(x, w.T)

# 2017-10-31 11:24:01.038646
+tf.transpose(x)

# 2017-10-31 11:25:07.323106
+np.random.randn(1, 1)

# 2017-10-31 11:25:09.930792
+import numpy as np

# 2017-10-31 11:25:10.698711
+np.random.randn(1, 1)

# 2017-10-31 11:25:15.913462
+x = tf.placeholder(tf.float32, (1,1))

# 2017-10-31 11:25:16.678872
+x

# 2017-10-31 11:25:28.925010
+np.rank(x)

# 2017-10-31 11:25:32.007817
+x

# 2017-10-31 11:25:54.131544
+np.rank(np.random.randn(1, 1))

# 2017-10-31 11:25:57.545155
+np.rank(np.random.randn(1, 1, 1))

# 2017-10-31 11:27:43.922746
+np.ndim(np.random.randn(1, 1, 1))

# 2017-10-31 11:27:53.548306
+np.random.randn(1, 1, 1)

# 2017-10-31 11:27:57.440391
+np.random.randn(1, 1, 1).T

# 2017-10-31 11:28:00.339829
+np.random.randn(1, 1, 1)

# 2017-10-31 11:28:02.592593
+np.random.randn(1, 2, 1)

# 2017-10-31 11:28:04.581422
+np.random.randn(1, 2, 2)

# 2017-10-31 11:28:07.086460
+np.random.randn(2, 2, 2)

# 2017-10-31 11:28:46.932419
+np.rank(np.random.randn(2, 2, 2))

# 2017-10-31 11:28:52.561726
+np.rank(np.random.randn(2, 2, 2, 1))

# 2017-10-31 11:29:24.319047
+w

# 2017-10-31 11:29:25.165218
+x

# 2017-10-31 11:29:34.724705
+tf.matmul(x, w)

# 2017-10-31 11:29:51.541849
+x

# 2017-10-31 11:29:52.260572
+w

# 2017-10-31 11:29:56.196316
+x.get_shape().as_list()[1:]

# 2017-10-31 11:38:24.927223
+np.random.randn(2, 3.).ndim

# 2017-10-31 11:38:27.115288
+A = np.random.randn(2, 3.)

# 2017-10-31 11:38:31.762105
+A = np.random.randn(2, 3)

# 2017-10-31 11:38:32.538127
+A

# 2017-10-31 11:38:35.030988
+A.ndim

# 2017-10-31 12:30:41.697251
+A.T

# 2017-10-31 12:32:15.760754
+tf.minimum(x=1, y=2)

# 2017-10-31 12:32:18.131958
+tf.minimum(x=1, y=2).eval()

# 2017-10-31 12:32:22.338841
+sess = tf.InteractiveSession()

# 2017-10-31 12:32:24.653356
+tf.minimum(x=1, y=2).eval()

# 2017-10-31 12:43:59.353745
+x

# 2017-10-31 12:44:01.596705
+w

# 2017-10-31 12:44:19.166759
+x = tf.placeholder(tf.float32, [1])

# 2017-10-31 12:44:19.936447
+x

# 2017-10-31 12:44:22.137376
+x * w

# 2017-10-31 12:44:24.985449
+w * x

# 2017-10-31 12:44:49.219064
+x = tf.placeholder(tf.float32, [1,1])

# 2017-10-31 12:44:50.057491
+x

# 2017-10-31 12:45:00.102743
+w = tf.Variable([[0.]], dtype=tf.float32)

# 2017-10-31 12:45:00.981728
+w

# 2017-10-31 12:45:01.163210
+x

# 2017-10-31 12:45:09.938541
+tf.matmul(x, w)

# 2017-10-31 12:45:24.343430
+tf.matmul(x, w) + b

# 2017-10-31 12:47:01.331299
+np.random.randn()

# 2017-10-31 12:47:10.037850
+X = tf.pla

# 2017-10-31 12:47:19.149282
+X = tf.placeholder(tf.float32)

# 2017-10-31 12:47:20.947299
+X

# 2017-10-31 12:47:33.119446
+W = tf.Variable(np.random.randn(), name='weight')

# 2017-10-31 12:47:40.190371
+tf.multiply(X, W)

# 2017-10-31 12:56:21.668778
+tf.matmul(X, W)

# 2017-10-31 13:08:54.350278
+a = [0.7, 0.2, 0.1]

# 2017-10-31 13:09:07.684299
+np.choose(np.arange(3), p=a)

# 2017-10-31 13:09:34.528807
+np.random.choice(np.arange(3), p=a)

# 2017-10-31 13:09:49.863401
+[np.random.choice(np.arange(3), p=a) for i in range(10)]

# 2017-10-31 13:12:01.543215
+from collections import namedtuple

# 2017-10-31 13:12:10.935123
+Transition = namedtuple('Transition', ['state', 'next_state', 'action', 'done'])

# 2017-10-31 13:12:32.635444
+transitions

# 2017-10-31 13:12:34.398784
+transitions = []

# 2017-10-31 13:12:46.837770
+transitions.append(Transition(1, 2, 3, 4))

# 2017-10-31 13:12:50.541238
+transitions

# 2017-10-31 13:41:34.918076
+env = gym.make('CartPole-v0')

# 2017-10-31 13:41:36.698635
+import gym

# 2017-10-31 13:41:38.826541
+env = gym.make('CartPole-v0')

# 2017-10-31 13:41:47.923260
+state  = env.reset()

# 2017-10-31 13:42:06.981043
+tf.one_hot(state, int(env.observation_space.n))

# 2017-10-31 13:42:14.415419
+env.observation_space

# 2017-10-31 13:42:22.641643
+env.observation_space.shape

# 2017-10-31 13:44:34.713630
+np.prod((4, 12))

# 2017-10-31 13:44:46.767079
+np.prod(env.observation_space.shape)

# 2017-10-31 13:44:56.151349
+tf.one_hot(state, int(np.prod(env.observation_space.shape)))

# 2017-10-31 13:44:59.405189
+a = _

# 2017-10-31 13:45:00.245655
+a

# 2017-10-31 13:45:04.017576
+a.eval()

# 2017-10-31 13:45:11.813294
+state

# 2017-10-31 13:48:16.727096
+env.__class__

# 2017-10-31 13:49:54.043869
+env = gym.make('MountainCarContinuous-v0')

# 2017-10-31 13:49:55.352970
+env

# 2017-10-31 13:49:59.490721
+env.render()

# 2017-10-31 13:50:22.157918
+env.reset()

# 2017-10-31 13:53:42.966296
+import sklearn.pipeline
+import sklearn.preprocessing

# 2017-10-31 13:53:50.062634
+observation_examples = np.array([env.observation_space.sample() for x in range(10000)])

# 2017-10-31 13:53:54.368677
+observation_examples

# 2017-10-31 13:54:01.678989
+scaler = sklearn.preprocessing.StandardScaler()

# 2017-10-31 13:54:08.817462
+scaler.fit(observation_examples)

# 2017-10-31 13:54:20.555527
+featurizer = sklearn.pipeline.FeatureUnion([
+        ("rbf1", RBFSampler(gamma=5.0, n_components=100)),
+        ("rbf2", RBFSampler(gamma=2.0, n_components=100)),
+        ("rbf3", RBFSampler(gamma=1.0, n_components=100)),
+        ("rbf4", RBFSampler(gamma=0.5, n_components=100))
+        ])
+featurizer.fit(scaler.transform(observation_examples))

# 2017-10-31 13:54:26.943507
+from sklearn.kernel_approximation import RBFSampler

# 2017-10-31 13:54:29.312952
+featurizer = sklearn.pipeline.FeatureUnion([
+        ("rbf1", RBFSampler(gamma=5.0, n_components=100)),
+        ("rbf2", RBFSampler(gamma=2.0, n_components=100)),
+        ("rbf3", RBFSampler(gamma=1.0, n_components=100)),
+        ("rbf4", RBFSampler(gamma=0.5, n_components=100))
+        ])
+featurizer.fit(scaler.transform(observation_examples))

# 2017-10-31 13:54:31.585963
+featurizer

# 2017-10-31 13:54:44.414712
+def featurize_state(state):
+    """
+    Returns the featurized representation for a state.
+    """
+    scaled = scaler.transform([state])
+    featurized = featurizer.transform(scaled)
+    return featurized[0]

# 2017-10-31 13:54:46.914347
+state

# 2017-10-31 13:54:52.756980
+featurize_state(state)

# 2017-10-31 15:12:34.350818
+a = tf.constant(np.random.randn(10, 20))

# 2017-10-31 15:12:34.847740
+a

# 2017-10-31 15:12:45.526112
+tf.squeeze(a)

# 2017-10-31 15:12:52.434177
+a = tf.constant(np.random.randn(1, 10, 20))

# 2017-10-31 15:12:53.047156
+a

# 2017-10-31 15:12:54.607375
+tf.squeeze(a)

# 2017-10-31 15:12:54.959782
+a

# 2017-10-31 15:12:58.287878
+tf.squeeze(a)

# 2017-10-31 15:13:04.052463
+a = tf.constant(np.random.randn(1, 10, 20, 1, 1))

# 2017-10-31 15:13:06.005732
+tf.squeeze(a)

# 2017-10-31 15:57:55.472069
+x = np.arange(80, 170)

# 2017-10-31 15:57:56.184927
+x

# 2017-10-31 15:57:59.893886
+x = np.arange(80, 171)

# 2017-10-31 15:58:00.495208
+x

# 2017-10-31 15:58:06.795800
+q = x - 80

# 2017-10-31 15:58:07.154454
+q

# 2017-10-31 15:58:25.354052
+tf.nn.sigmoid(q)

# 2017-10-31 15:58:46.135082
+q = tf.constant(x - 80, dtype=tf.float32)

# 2017-10-31 15:58:47.038017
+q

# 2017-10-31 15:58:54.516102
+q2 = tf.nn.sigmoid(q)

# 2017-10-31 15:58:55.413924
+q2

# 2017-10-31 15:59:06.953566
+q3 = 255 * q2

# 2017-10-31 15:59:10.638608
+sess

# 2017-10-31 15:59:13.235299
+sess.run(q3)

# 2017-10-31 16:00:27.962812
+255 / 90

# 2017-10-31 16:00:29.810044
+Q = 255 / 90

# 2017-10-31 16:00:30.370054
+Q

# 2017-10-31 16:00:35.601054
+80 * Q

# 2017-10-31 16:00:44.942017
+90 * Q

# 2017-10-31 16:00:57.358489
+x

# 2017-10-31 16:01:15.625975
+def Contrast(x):
+    Q * (x - 90)

# 2017-10-31 16:01:19.238070
+def Contrast(x):
+    return Q * (x - 90)

# 2017-10-31 16:01:32.508710
+Contrast(x)

# 2017-10-31 16:01:43.670623
+x

# 2017-10-31 16:01:50.556745
+def Contrast(x):
+    return Q * (x - 80)

# 2017-10-31 16:01:54.344179
+Contrast(x)

# 2017-10-31 16:20:53.122144
+tf.layers.dense

# 2017-10-31 17:26:11.977931
+import numpy as np

# 2017-10-31 17:26:12.660461
+t_data = np.zeros((10,3))
+# 3つのうちどれか1つを1.0にする
+for row in t_data:
+    row[random.randint(0, 2)] = 1.0

# 2017-10-31 17:26:23.589705
+t_data = np.zeros((10,3))
+# 3つのうちどれか1つを1.0にする
+for row in t_data:
+    row[np.random.randint(0, 2)] = 1.0

# 2017-10-31 17:26:25.895805
+t_data

# 2017-10-31 17:26:53.773032
+t_data = np.zeros((10,3))
+# 3つのうちどれか1つを1.0にする
+for row in t_data:
+    a = row
+    a[np.random.randint(0, 2)] = 1.0

# 2017-10-31 17:26:56.517932
+t_data

# 2017-10-31 17:27:03.228069
+t_data = np.zeros((10,3))

# 2017-10-31 17:27:05.842776
+t_data = np.zeros((10,3))
+# 3つのうちどれか1つを1.0にする
+for row in t_data:
+    a = row
+    a[np.random.randint(0, 2)] = 1.0

# 2017-10-31 17:27:08.123403
+t_data

# 2017-10-31 17:27:18.698813
+t_data = np.zeros((10,3))
+# 3つのうちどれか1つを1.0にする
+for row in t_data:
+    a = row
+    a[np.random.randint(0, 2)] = 1.0

# 2017-10-31 17:27:21.176610
+t_data

# 2017-10-31 17:27:30.880780
+t_data = np.zeros((10,3))
+# 3つのうちどれか1つを1.0にする
+for row in t_data:
+    a = row.copy()
+    a[np.random.randint(0, 2)] = 1.0

# 2017-10-31 17:27:32.600543
+t_data

# 2017-10-31 17:33:43.918764
+x = tf.placeholder(tf.float32, shape=(10, 1))
+x_data = np.arange(0.0, 10.0).reshape(10, 1)
+# 1x3行列
+w = tf.constant([-0.5,0.25,0.5] , tf.float32, shape=(1,3))
+# 10x3行列
+b = tf.constant(np.array([[0.0,0.0,-5]]*10), tf.float32, shape=(10,3))
+# 10x3行列 教師(ラベル)データ
+t_data = np.zeros((10,3))
+# 3つのうちどれか1つを1.0にする
+for row in t_data:
+    row[random.randint(0, 2)] = 1.0
+t = tf.constant(t_data, tf.float32, shape=(10,3))
+
+# 行列の積 モデル
+f = tf.matmul(x, w)+b

# 2017-10-31 17:33:53.374991
+x = tf.placeholder(tf.float32, shape=(10, 1))
+x_data = np.arange(0.0, 10.0).reshape(10, 1)
+# 1x3行列
+w = tf.constant([-0.5,0.25,0.5] , tf.float32, shape=(1,3))
+# 10x3行列
+b = tf.constant(np.array([[0.0,0.0,-5]]*10), tf.float32, shape=(10,3))
+# 10x3行列 教師(ラベル)データ
+t_data = np.zeros((10,3))
+# 3つのうちどれか1つを1.0にする
+# 行列の積 モデル
+f = tf.matmul(x, w)+b

# 2017-10-31 17:34:04.711796
+t_data = np.zeros((10,3))
+# 3つのうちどれか1つを1.0にする
+for row in t_data:
+    a = row.copy()
+    a[np.random.randint(0, 2)] = 1.0

# 2017-10-31 17:34:11.619452
+t_data = np.zeros((10,3))
+# 3つのうちどれか1つを1.0にする
+for row in t_data:
+    row[np.random.randint(0, 2)] = 1.0

# 2017-10-31 17:34:14.881961
+f

# 2017-10-31 17:34:26.056161
+x = tf.placeholder(tf.float32, shape=(10, 1))
+x_data = np.arange(0.0, 10.0).reshape(10, 1)
+# 1x3行列
+w = tf.constant([-0.5,0.25,0.5] , tf.float32, shape=(1,3))
+# 10x3行列
+b = tf.constant(np.array([[0.0,0.0,-5]]*10), tf.float32, shape=(10,3))
+# 3つのうちどれか1つを1.0にする
+# 行列の積 モデル
+f = tf.matmul(x, w)+b

# 2017-10-31 17:34:26.712309
+f

# 2017-10-31 17:34:29.197835
+f.eval()

# 2017-10-31 17:34:51.202306
+f

# 2017-10-31 17:34:55.418399
+p = tf.nn.softmax(f)

# 2017-10-31 17:34:57.821342
+t

# 2017-10-31 17:35:13.067057
+t = tf.constant(t_data, tf.float32, shape=(10,3))

# 2017-10-31 17:35:14.077784
+t

# 2017-10-31 17:35:32.419822
+t * tf.log(p)

# 2017-10-31 17:35:47.042076
+(t * tf.log(p)).eval()

# 2017-10-31 19:00:00.472678
+tf.contrib.distributions.Normal(0, 0)

# 2017-10-31 19:00:03.718357
+tf.contrib.distributions.Normal(0., 0.)

# 2017-10-31 19:00:09.595447
+normal_dist = _

# 2017-10-31 19:00:16.865780
+normal_dist._sample_n(1)

# 2017-10-31 19:00:20.835156
+sample = _

# 2017-10-31 19:00:24.604006
+sample.eval()

# 2017-10-31 19:00:38.194578
+norm = tf.contrib.distributions.Normal(1., 0.)

# 2017-10-31 19:00:47.401074
+norm._sample_n(1)

# 2017-10-31 19:00:52.971059
+norm._sample_n(1).eval()

# 2017-10-31 19:00:58.334250
+norm.sample

# 2017-10-31 19:01:05.287315
+help(norm.sample)

# 2017-10-31 19:01:09.473118
+norm.sample(1)

# 2017-10-31 19:01:11.277503
+norm.sample(1).eval()

# 2017-10-31 19:01:14.373548
+norm.sample(10).eval()

# 2017-10-31 19:01:17.140656
+norm.sample(10, 20).eval()

# 2017-10-31 19:01:21.511739
+norm.sample((10, 20)).eval()

# 2017-10-31 19:01:59.754401
+norm = tf.contrib.distributions.Normal([.5, .1], [0.1, 0.2])

# 2017-10-31 19:02:02.192154
+norm.sample((10, 20)).eval()

# 2017-10-31 19:02:11.417826
+norm.sample(10).eval()

# 2017-10-31 19:02:22.062754
+import matplotlib.pyplot as plt

# 2017-10-31 19:33:54.243948
+import edward as ed

# 2017-10-31 19:34:20.127483
+from edward.models import Distribution

# 2017-10-31 19:34:27.463675
+from edward.models import Bernoulli

# 2017-10-31 19:34:33.563932
+Bernoulli()

# 2017-10-31 19:34:50.532563
+np.arange(10) / 10

# 2017-10-31 19:34:53.302094
+import numpy as np

# 2017-10-31 19:34:56.512549
+probs = np.arange(10) / 10

# 2017-10-31 19:34:57.485859
+probs

# 2017-10-31 19:35:06.423273
+Bernoulli(probs)

# 2017-10-31 19:35:10.464281
+b = _

# 2017-10-31 19:35:12.521563
+b.entropy

# 2017-10-31 19:35:13.565036
+b.entropy()

# 2017-10-31 19:35:15.957081
+b.entropy().eval()

# 2017-10-31 19:35:19.762553
+sess = tf.InteractiveSession()

# 2017-10-31 19:35:22.250454
+import tensorflow as tf

# 2017-10-31 19:35:24.946397
+b.entropy().eval()

# 2017-10-31 19:35:32.956370
+sess.run(b.entropy())

# 2017-10-31 19:35:38.685983
+sess = tf.InteractiveSession()

# 2017-10-31 19:35:39.775846
+sess

# 2017-10-31 19:35:44.970525
+sess.run(b.entropy())

# 2017-10-31 19:36:32.251267
+q = Bernoulli([0.1])

# 2017-10-31 19:36:32.732423
+q

# 2017-10-31 19:36:35.590624
+q.eval()

# 2017-10-31 19:36:45.347979
+q.entropy().eval()

# 2017-10-31 19:37:16.746061
+q

# 2017-10-31 19:37:24.698418
+q.prob

# 2017-10-31 19:37:26.721459
+q.prob().eval()

# 2017-10-31 19:37:28.955479
+q.prob()

# 2017-10-31 19:37:31.603887
+q.prob(0)

# 2017-10-31 19:37:33.783357
+q.prob(0).eval()

# 2017-10-31 19:37:36.877282
+q.prob(1).eval()

# 2017-10-31 19:37:40.419494
+q.prob(100).eval()

# 2017-10-31 19:37:45.079609
+q.probs(1).eval()

# 2017-10-31 19:37:49.762778
+q.prob

# 2017-10-31 19:37:51.003358
+q.probs

# 2017-10-31 19:37:53.092469
+q.probs.eval()

# 2017-10-31 19:38:10.587186
+- np.log2( q.probs.eval())

# 2017-10-31 19:38:15.825552
+- np.log10( q.probs.eval())

# 2017-10-31 19:38:17.890207
+- np.log( q.probs.eval())

# 2017-10-31 19:38:27.863753
+- np.log( q.probs.eval()) == q.entropy().eval()

# 2017-10-31 19:38:30.436196
+- np.log( q.probs.eval()) 

# 2017-10-31 19:38:34.889277
+q.entropy().eval()

# 2017-10-31 19:45:06.572889
+q.mean()

# 2017-10-31 19:45:09.036565
+q.mean().eval()

# 2017-10-31 19:45:24.981877
+q.sample()

# 2017-10-31 19:45:28.301590
+q.sample().eval()

# 2017-10-31 20:43:58.928022
+tf.clip_by_value(0., 1e-10, 1.0)

# 2017-10-31 20:44:01.131316
+tf.clip_by_value(0., 1e-10, 1.0).eval()

# 2017-10-31 20:44:09.564607
+tf.clip_by_value(1e-9, 1e-10, 1.0).eval()

# 2017-10-31 21:01:08.295480
+512 * int(64 / 16)**2

# 2017-11-01 13:46:07.458926
+import tensorflow as tf

# 2017-11-01 13:46:25.501936
+import tensorflow.contrib.eager as tfe

# 2017-11-01 13:46:34.746715
+tfe.enable_eager_execution()

# 2017-11-01 13:46:40.682222
+x = [[2.]]

# 2017-11-01 13:46:45.867705
+m = tf.matmul(x, x)

# 2017-11-01 13:46:50.060247
+print(m)

# 2017-11-01 13:46:59.171470
+a = tf.constant(12)

# 2017-11-01 13:47:01.975761
+counter = 0

# 2017-11-01 13:47:12.032120
+tf.equal(a, 1)

# 2017-11-01 13:47:17.740225
+a

# 2017-11-01 13:47:21.367472
+tf.equal(a, 1).eval()

# 2017-11-01 13:47:24.414634
+tf.equal(a, 1)

# 2017-11-01 13:48:06.526952
+while not tf.equal(a, 1):
+    if tf.equal(a % 2, 0):
+        a /= 2
+    else:
+        a = 3 * a + 1
+    print(a)

# 2017-11-01 13:48:35.343219
+def square(x):
+    return tf.multiply(x, x)

# 2017-11-01 13:48:47.498096
+grad = tfe.gradients_function(square)

# 2017-11-01 13:48:53.350853
+print(square(3.))

# 2017-11-01 13:49:02.026258
+print(grad(3.))

# 2017-11-01 13:49:37.262368
+gragrad = tfe.gradients_function(lambda x: grad(x)[0])

# 2017-11-01 13:49:42.006972
+print(gragrad(3.))

# 2017-11-01 13:50:59.364047
+def abs(x):
+    return x if x > 0. else -x

# 2017-11-01 13:51:09.197368
+grad = tfe.gradients_function(abs)

# 2017-11-01 13:51:15.151324
+import matplotlib.pyplot as plt

# 2017-11-01 13:51:44.709165
+X = tf.linspace(-5, 5, 1000)

# 2017-11-01 13:51:50.881933
+X = tf.linspace(-5., 5., 1000)

# 2017-11-01 13:51:52.523908
+X

# 2017-11-01 13:52:07.788108
+plt.plot(X, abs(X))

# 2017-11-01 13:52:17.267312
+plt.plot(X, grad(X))

# 2017-11-01 13:52:20.988510
+plt.show()

# 2017-11-01 13:52:34.850032
+abs(X)

# 2017-11-01 13:52:45.091544
+abs(1)

# 2017-11-01 13:52:47.198414
+abs(2)

# 2017-11-01 13:52:48.546364
+abs(3)

# 2017-11-01 13:52:50.441650
+X

# 2017-11-01 13:52:57.695770
+abs(X[0])

# 2017-11-01 13:53:01.746117
+X[0]

# 2017-11-01 13:56:33.621237
+class MNISTModel(tfe.Network):
+    def __init__(self):
+        super(MNISTModel, self).__init__()
+        self.layer1 = self.track_layer(tf.layers.Dense(units=10))
+        self.layer2 = self.track_layer(tf.layers.Dense(units=10))
+    def call(self, input):
+        result = self.layer1(input)
+        result = self.layer2(result)
+        return result

# 2017-11-01 13:56:43.645896
+model = MNISTModel()

# 2017-11-01 13:56:54.532687
+batch = tf.zeros([1, 1, 784])

# 2017-11-01 13:56:59.562799
+print(batch.shape)

# 2017-11-01 13:57:05.702502
+result = model(batch)

# 2017-11-01 13:57:09.150263
+print(result)

# 2017-11-01 18:05:57.296425
+MNISTModel

# 2017-11-01 19:31:03.782745
+import tensorflow as tf

# 2017-11-01 19:31:09.043052
+import tensorflow.contrib.eager as tfe

# 2017-11-01 19:31:14.231973
+tfe

# 2017-11-01 19:31:56.896819
+import tensorflow.contrib.eager as tfe

# 2017-11-01 21:48:17.502193
+import gym

# 2017-11-01 21:48:20.205436
+import universe  # register the universe environments

# 2017-11-01 21:48:43.470847
+env = gym.make('wob.mini.TicTacToe-v0')

# 2017-11-01 21:48:49.597554
+env.configure(remotes=1)  # automatically creates a local docker container

# 2017-11-01 21:50:04.824886
+import gym

# 2017-11-01 21:50:07.685484
+import universe  # register the universe environments

# 2017-11-01 21:50:12.609591
+env= gym.make('wob.mini.TicTacToe-v0')

# 2017-11-01 21:50:14.274138
+env

# 2017-11-01 21:50:17.597308
+env.n

# 2017-11-01 21:50:20.956294
+env.reset()

# 2017-11-01 21:50:26.078585
+env.configure(remotes=1)  # automatically creates a local docker container

# 2017-11-01 21:51:44.887861
+import gy

# 2017-11-01 21:51:46.715234
+import gym

# 2017-11-01 21:51:48.975025
+import universe  # register the universe environments

# 2017-11-01 21:51:51.804780
+env = gym.make('wob.mini.TicTacToe-v0')

# 2017-11-01 21:51:54.535838
+env.configure(remotes=1)  # automatically creates a local docker container

# 2017-11-02 12:48:39.941838
+import tensorflow.contrib.eager as tfe

# 2017-11-02 12:48:45.269508
+import tensorflow as tf

# 2017-11-02 12:48:56.931160
+tfe.enable_eager_execution()

# 2017-11-02 12:49:03.878750
+e = tf.exp(100)

# 2017-11-02 12:51:21.630982
+import numpy as np

# 2017-11-02 12:51:26.000972
+np.log(1)

# 2017-11-02 12:51:27.665283
+np.log(100)

# 2017-11-02 22:38:01.679599
+import numpy as np

# 2017-11-02 22:38:09.579527
+np.linspace(-1, 1, 100)

# 2017-11-02 22:38:12.650649
+X = np.linspace(-1, 1, 100)

# 2017-11-03 14:57:06.706810
+import gym

# 2017-11-03 14:57:16.122996
+env = gym.make('CartPole-v0')

# 2017-11-03 14:57:23.978019
+env.env.observation_space.shape

# 2017-11-03 14:57:30.042555
+env.observation_space.shape[0]

# 2017-11-03 14:57:34.673733
+env.observation_space.n

# 2017-11-03 14:57:37.708873
+env.action_space.n

# 2017-11-03 14:59:27.940032
+from keras.utils import np_utils

# 2017-11-03 14:59:42.892900
+np_utils.to_categorical([0, 1, 2], 3)

# 2017-11-03 14:59:45.443715
+np_utils.to_categorical([0, 1, 2], 4)

# 2017-11-03 15:08:51.303664
+from keras.layers import Dense, Dense, Model

# 2017-11-03 15:08:55.381358
+from keras.layers import Dense, Input

# 2017-11-03 15:09:04.521859
+from keras.models import Model

# 2017-11-03 15:09:21.649569
+NUM_STATES = env.observation_space.shape[0]

# 2017-11-03 15:09:30.486935
+NUM_ACTIONS = env.action_space.n

# 2017-11-03 15:09:47.340734
+l = Input(shape=(NUM_STATES, ))

# 2017-11-03 15:09:58.079581
+l = Dense(20, action='relu')(l)

# 2017-11-03 15:10:08.852758
+l = Dense(20, activation='relu')(l)

# 2017-11-03 15:10:34.512274
+probs = Dense(NUM_ACTIONS, activation='softmax')(l)

# 2017-11-03 15:10:57.536608
+l_input = Input(shape=(NUM_STATES, ))

# 2017-11-03 15:11:11.482893
+l_dense = Dense(20, action='relu')(l_input)

# 2017-11-03 15:11:28.050391
+import gym

# 2017-11-03 15:11:33.630566
+NUM_ACTIONS = env.action_space.n

# 2017-11-03 15:11:37.005209
+env = gym.make('CartPole-v0')

# 2017-11-03 15:11:38.449335
+NUM_ACTIONS = env.action_space.n

# 2017-11-03 15:11:43.884422
+NUM_STATES = env.observation_space.shape[0]

# 2017-11-03 15:11:57.182168
+from keras.models import Model

# 2017-11-03 15:12:03.495842
+from keras.layers import Dense, Input

# 2017-11-03 15:12:08.397192
+l_input = Input(shape=(NUM_STATES, ))

# 2017-11-03 15:12:17.806499
+l_dense = Dense(20, activation='relu')(l_input)

# 2017-11-03 15:12:26.456731
+probs = Dense(NUM_ACTIONS, activation='softmax')(l_dense)

# 2017-11-03 15:12:47.052346
+model = Model(inputs=[l_input], outputs=[probs])

# 2017-11-03 15:12:48.322922
+model

# 2017-11-03 15:13:41.701860
+from keras.utils import plot_model

# 2017-11-03 15:14:00.097351
+plot_model(model, to_file='model.png')

# 2017-11-03 15:23:26.772363
+from keras.utils.visualize_util import plot

# 2017-11-03 15:24:33.362559
+from keras.utils.visualize_util import model_to_dot

# 2017-11-03 15:24:48.411685
+from keras.utils.vis_utils import model_to_dot

# 2017-11-05 05:16:30.677552
+from pandas_datareader import data

# 2017-11-05 05:16:37.398674
+import matplotlib.pyplot as plt

# 2017-11-05 05:16:38.277257
+import pandas as pd

# 2017-11-05 05:16:50.134240
+tickers = ['AAPL', 'MSFT', 'GSPC']

# 2017-11-05 05:16:54.743841
+data_source = 'yahoo'

# 2017-11-05 05:17:02.325540
+start_date = '2000-01-01'

# 2017-11-05 05:17:08.928411
+end_date = '2016-12-31'

# 2017-11-05 05:17:34.868651
+panel_data = data.DataReader(tickers, data_source, start_date, end_date)

# 2017-11-05 05:17:44.516569
+panel_data

# 2017-11-05 05:17:50.623473
+panel_data['AAPL']

# 2017-11-05 05:17:54.146604
+panel_data[['AAPL']]

# 2017-11-05 05:18:05.479139
+close = panel_data.ix['Close']

# 2017-11-05 05:18:07.499629
+close 

# 2017-11-05 05:18:12.187652
+close.head()

# 2017-11-05 05:31:56.197734
+panel_data

# 2017-11-05 05:33:49.918614
+panel_data.ix[0]

# 2017-11-05 05:33:52.539530
+panel_data.ix[0].head()

# 2017-11-05 05:34:35.759188
+panel_data['close']['AAPL'].head()

# 2017-11-05 05:34:38.400458
+panel_data['Close']['AAPL'].head()

# 2017-11-05 05:34:50.332474
+panel_data.ix

# 2017-11-05 05:35:03.799523
+panel_data.ix[:,0,:]

# 2017-11-05 05:35:26.312532
+panel_data.ix[:,:,0]

# 2017-11-05 05:35:31.037070
+panel_data.ix[:,:,0].head()

# 2017-11-05 05:35:50.779368
+panel_data.to_frame()

# 2017-11-05 05:35:57.011145
+panel_data.to_frame().head()

# 2017-11-05 05:36:14.519162
+panel_data.to_frame().to_panel()

# 2017-11-05 05:37:37.760137
+adj_close = panel_data.ix['Adj Close']

# 2017-11-09 04:18:41.968879
+import numpy as np

# 2017-11-09 04:19:07.330017
+np.array([[1., 2], [3, 4]])

# 2017-11-09 04:19:09.866647
+A = np.array([[1., 2], [3, 4]])

# 2017-11-09 04:19:53.811697
+B = np.random.randint(-5, 5, 4, dtype=np.int32).reshape((2, 2))

# 2017-11-09 04:19:54.706376
+A

# 2017-11-09 04:19:55.147689
+B

# 2017-11-09 04:20:01.796814
+C = np.random.randint(-5, 5, 4, dtype=np.int32).reshape((2, 2))

# 2017-11-09 04:20:12.973408
+A = B @ C

# 2017-11-09 04:20:13.439774
+A

# 2017-11-09 04:20:14.964789
+B

# 2017-11-09 04:20:15.417730
+C

# 2017-11-09 04:20:34.458024
+np.testing.assert_almost_equal(A.T, C @ B)

# 2017-11-09 04:20:38.504195
+A.T

# 2017-11-09 04:20:42.052143
+C @ B

# 2017-11-09 14:10:46.519366
+from mpl_toolkits.mplot3d import Axes3D

# 2017-11-09 14:15:25.281298
+import numpy as np

# 2017-11-09 14:15:32.213397
+np.random.rand

# 2017-11-09 14:15:44.107002
+help(np.random.randn)

# 2017-11-09 14:16:11.755354
+help(np.random.multinomial)

# 2017-11-09 14:16:36.491239
+np.random.multinomial(size=14)

# 2017-11-09 14:16:46.351371
+np.random.multinomial(0.1, 1., 14)

# 2017-11-09 14:16:53.183333
+np.random.multinomial(0.1, 1, 14)

# 2017-11-09 14:16:55.114308
+np.random.multinomial(1, 1, 14)

# 2017-11-09 14:17:02.566833
+np.random.multinomial()

# 2017-11-09 14:17:20.793830
+help(np.random.multinomial)

# 2017-11-09 14:17:21.961708
+np.random.multinomial(20, [1/6.]*6, size=1)

# 2017-11-09 14:17:25.595494
+np.random.multinomial(20, [1/6.]*6, size=2)

# 2017-11-09 14:18:24.596664
+np.random.multivariate_normal(0, 1, size=20)

# 2017-11-09 14:18:29.209064
+np.random.multivariate_normal(0, 1)

# 2017-11-09 14:18:47.413363
+help(np.random.multivariate_normal)

# 2017-11-09 14:18:56.809293
+mean = [0, 0]
+cov = [[1, 0], [0, 100]]

# 2017-11-09 14:19:06.015190
+np.random.multivariate_normal(mean, cov)

# 2017-11-09 14:20:01.890749
+from scipy.stats import multivariate_normal

# 2017-11-09 14:26:01.199963
+np.random.randint(0, 1, 20)

# 2017-11-09 14:26:17.202917
+np.random.randint(0, 1, 14, np.float32)

# 2017-11-09 14:26:20.847665
+np.random.randint(0, 1, 14, np.int32)

# 2017-11-09 14:26:26.426256
+np.random.randint(0, 2, 14, np.int32)

# 2017-11-09 14:26:39.080298
+np.random.randn(0, 2, 14, np.int32)

# 2017-11-09 14:26:43.798310
+np.random.randn()

# 2017-11-09 14:26:46.553255
+np.random.randn(14)

# 2017-11-09 14:27:12.904197
+np.random.randn(28).reshape((14, 2))

# 2017-11-09 14:28:26.066464
+np.random.randint(0, 4, 14)

# 2017-11-09 14:28:38.658067
+np.random.randint(0, 4, 14)[np.newaxis]

# 2017-11-09 20:16:26.191380
+import tensorflow as tf

# 2017-11-09 20:16:43.332084
+vec = tf.Variable([7., 7.], 'vec')

# 2017-11-09 20:16:54.501569
+loss = tf.reduce_sum(tf.square(vec))

# 2017-11-09 20:17:35.395520
+from tensorflow.contrib.opt import ScipyOptimizerInterface

# 2017-11-09 20:17:56.216260
+opt = ScipyOptimizerInterface(loss, options={'maxiter': 100})

# 2017-11-09 20:18:07.792546
+with tf.Session() as session:
+    opt.minimize(session)

# 2017-11-09 20:18:23.739807
+vector = tf.Variable([7., 7.], 'vector')
+
+# Make vector norm as small as possible.
+loss = tf.reduce_sum(tf.square(vector))
+
+optimizer = ScipyOptimizerInterface(
+    loss, var_to_bounds={vector: ([1, 2], np.infty)})
+
+with tf.Session() as session:
+  optimizer.minimize(session)

# 2017-11-09 20:18:26.765134
+import numpy as np

# 2017-11-09 20:18:28.161704
+vector = tf.Variable([7., 7.], 'vector')
+
+# Make vector norm as small as possible.
+loss = tf.reduce_sum(tf.square(vector))
+
+optimizer = ScipyOptimizerInterface(
+    loss, var_to_bounds={vector: ([1, 2], np.infty)})
+
+with tf.Session() as session:
+  optimizer.minimize(session)

# 2017-11-14 09:10:19.307954
+import pandas as pd

# 2017-11-14 09:10:27.826193
+import pandas_datareader.data as web

# 2017-11-14 09:11:02.175578
+df = web.DataReader("HCP", 'yahoo', '2010/1/1', '2017/1/1')

# 2017-11-14 09:11:03.551056
+df

# 2017-11-14 09:33:20.708970
+df.tail()

# 2017-11-14 09:35:27.108335
+df[0:2]

# 2017-11-14 09:51:12.357966
+df['Volume']

# 2017-11-14 09:51:18.105343
+df['Volume'].mean()

# 2017-11-14 09:52:44.091886
+df.head()

# 2017-11-15 07:47:08.282475
+nyse = web.DataReader('NYSE', 'yahoo', '2014/01/01', '2014/12/31')

# 2017-11-15 07:47:17.046015
+nyse = web.DataReader('NYSE', 'google', '2014/01/01', '2014/12/31')

# 2017-11-15 07:47:35.858340
+nyse = web.DataReader('NYSE', 'google', '2015/01/01', '2015/12/31')

# 2017-11-15 07:48:11.272796
+df = web.DataReader("HCP", 'yahoo', '2010/1/1', '2017/1/1')

# 2017-11-15 07:48:49.165119
+df = web.DataReader("NYSE", 'yahoo', '2010/1/1', '2017/1/1')

# 2017-11-15 07:56:47.848648
+df = web.DataReader("HCP", 'yahoo', '2016/1/1', '2016/2/1')

# 2017-11-15 07:57:04.048260
+df1 = pd.date_range("2016/1/1", "2016/2/1")

# 2017-11-15 07:57:06.814887
+df

# 2017-11-15 07:57:07.953617
+df1

# 2017-11-15 07:57:30.093811
+df2 = df1.join(df, how="right")

# 2017-11-15 07:58:09.704849
+index = pd.date_range("2016/1/1", "2016/2/1")

# 2017-11-15 07:58:20.460007
+df1 = pd.DataFrame(index=index)

# 2017-11-15 07:58:35.103262
+df2 = df1.join(df, how="right")

# 2017-11-15 07:58:37.523282
+df2

# 2017-11-15 07:58:45.229318
+df1

# 2017-11-15 07:58:50.495656
+from pprint import pprint

# 2017-11-15 07:58:52.420523
+pprint(df1)

# 2017-11-15 07:59:00.057130
+for i in df1:
+    print(i)

# 2017-11-15 07:59:08.784092
+df1[0]

# 2017-11-15 07:59:11.964630
+df1

# 2017-11-15 07:59:19.251982
+df1.index

# 2017-11-15 07:59:21.403477
+df1.index[0]

# 2017-11-15 08:00:34.042088
+df2 = df1.join(df, how="inner")

# 2017-11-15 08:00:35.045169
+df2

# 2017-11-15 08:00:44.300483
+df1

# 2017-11-15 08:00:50.029687
+df2

# 2017-11-15 08:00:57.897847
+df1

# 2017-11-15 08:00:58.662092
+df

# 2017-11-15 08:01:08.764866
+df2 = df1.join(df, how="outer")

# 2017-11-15 08:01:09.571175
+df2

# 2017-11-15 08:01:19.645044
+df2.dropna()

# 2017-11-15 08:01:22.197562
+df2

# 2017-11-15 08:01:23.815953
+df2.dropna()

# 2017-11-15 08:02:27.990016
+df2 = df1.join(df)

# 2017-11-15 08:02:28.950358
+df2

# 2017-11-15 08:03:11.272681
+df2 = df1.join(df, how="inner")

# 2017-11-15 08:03:12.750115
+df2

# 2017-11-15 08:03:20.339420
+df3 = df1.join(df, how="right")

# 2017-11-15 08:03:22.837783
+df2 == df3

# 2017-11-15 08:03:25.940668
+df2

# 2017-11-15 08:03:26.586692
+df3

# 2017-11-15 08:03:33.911762
+fd2

# 2017-11-15 08:03:34.659539
+df2

# 2017-11-15 08:03:36.314761
+df3

# 2017-11-15 08:03:40.757958
+df2

# 2017-11-15 08:03:44.152390
+df4

# 2017-11-15 08:03:46.142704
+df3

# 2017-11-15 08:03:56.547487
+df1.join(df, how="left")

# 2017-11-15 08:04:01.846549
+df1.join(df, how="inner")

# 2017-11-15 08:04:04.666818
+df

# 2017-11-15 08:04:11.874843
+df1

# 2017-11-15 09:48:48.807724
+help(pd.read_csv)

# 2017-11-15 09:49:09.545598
+import pandas as pd

# 2017-11-15 09:49:16.894252
+df= pd.read_csv('./GLD.csv')

# 2017-11-15 09:49:17.640235
+df

# 2017-11-15 09:49:44.251777
+df.columns

# 2017-11-15 09:49:53.330613
+df.columns.values

# 2017-11-15 09:49:56.370654
+df.columns.values()

# 2017-11-15 09:49:58.023138
+df.columns.values

# 2017-11-15 09:50:09.157640
+list(df.columns)

# 2017-11-15 22:24:24.933764
+df

# 2017-11-15 22:42:03.278292
+df = web.DataReader(['SPY', 'IBM', 'GOOG', 'GLD'], 'yahoo', start='2010/01/22', end='2012/12/31')

# 2017-11-15 22:42:05.362887
+df

# 2017-11-15 22:42:19.944093
+panel = web.DataReader(['SPY', 'IBM', 'GOOG', 'GLD'], 'yahoo', start='2010/01/22', end='2012/12/31')

# 2017-11-15 22:42:28.702620
+panel[0]

# 2017-11-15 22:42:32.700861
+panel['SPY']

# 2017-11-15 22:42:36.445491
+panel.keys()

# 2017-11-15 22:42:58.511165
+panel['Adj Close']

# 2017-11-15 22:43:02.106739
+panel['Adj Close'].head()

# 2017-11-15 22:43:34.520440
+reversed(panel['Adj Close'])

# 2017-11-15 22:43:42.351471
+panel['Adj Close']

# 2017-11-15 22:43:48.115592
+panel['Adj Close'].tail()

# 2017-11-15 22:44:36.351204
+
+import pdb; pdb.set_trace()
+panel = web.DataReader(['SPY', 'IBM', 'GOOG', 'GLD'], 'yahoo', start='2010/01/22', end='2012/12/31')

# 2017-11-15 22:47:34.720911
+hogehoge

# 2017-11-15 22:47:39.895382
+import pandas as pd

# 2017-11-15 22:47:48.401565
+import pandas_datareader.data as web

# 2017-11-15 22:47:54.148418
+panel = web.DataReader(['SPY', 'IBM', 'GOOG', 'GLD'], 'yahoo', start='2010/01/22', end='2012/12/31')

# 2017-11-15 23:03:40.875247
+help(web.DataReader)

# 2017-11-16 10:35:57.763243
+adj_close = panel_data.ix['Adj Close']

# 2017-11-16 10:36:10.914401
+adj_close = panel.ix['Adj Close']

# 2017-11-16 10:36:13.667191
+adj_close 

# 2017-11-16 10:36:27.115601
+adj_close.loc['2010']

# 2017-11-16 10:36:28.992450
+adj_close.loc['2010'].head()

# 2017-11-16 10:36:31.987817
+adj_close.loc['2010'].tail()

# 2017-11-16 10:36:48.287431
+adj_close.iloc[0]

# 2017-11-16 10:36:51.442657
+adj_close.iloc[-1]

# 2017-11-16 10:37:00.757382
+adj_close.iloc[[0, 0]]

# 2017-11-16 10:37:08.200649
+adj_close.iloc[[0, 0, 0]]

# 2017-11-16 10:37:14.936651
+adj_close.iloc[[0, 32]]

# 2017-11-16 10:37:21.870993
+adj_close.iloc[[0, 32], [0, 3]]

# 2017-11-16 10:38:00.933350
+q = panel.loc[:, 'Adj Close']

# 2017-11-16 10:38:14.311384
+panel.loc

# 2017-11-16 10:38:33.792335
+panel.loc[:, ['Adj Close']]

# 2017-11-16 10:38:41.172338
+panel.ix['Adj Close']

# 2017-11-16 10:39:46.349008
+panel[['Adj Close']]

# 2017-11-16 10:39:52.194202
+panel[:, ['Adj Close']]

# 2017-11-16 10:39:56.464716
+panel[['Adj Close']]

# 2017-11-16 10:40:18.747016
+panel[['Adj Close']][0]

# 2017-11-16 10:40:22.068573
+panel[['Adj Close']].iloc[0]

# 2017-11-16 10:40:26.002164
+panel[['Adj Close']].iloc[0].head()

# 2017-11-16 10:40:40.889805
+adj_close.pct_change()

# 2017-11-16 10:40:43.162192
+adj_close.pct_change().head()

# 2017-11-16 10:40:53.588360
+import matplotlib.pyplot as plt

# 2017-11-16 10:41:00.973498
+import seaborn as sns

# 2017-11-16 10:41:07.646653
+adj_close.plot()

# 2017-11-16 10:41:16.232481
+adj_close.pct_change().plot()

# 2017-11-16 10:41:41.630887
+plt.show()

# 2017-11-16 10:41:59.232375
+daily_pct_change = adj_close.pct_change()

# 2017-11-16 10:42:06.311521
+daily_pct_change[0]

# 2017-11-16 10:42:10.877134
+daily_pct_change.head()

# 2017-11-16 10:42:26.388265
+daily_pct_change.fillna(0, inplace=True)

# 2017-11-16 10:42:32.467067
+daily_pct_change.head()

# 2017-11-16 10:42:37.689014
+daily_pct_change.fillna(0)

# 2017-11-16 10:42:59.774058
+import numpy as np

# 2017-11-16 10:43:12.518239
+daily_log_returns = np.log(daily_pct_change() + 1)

# 2017-11-16 10:43:28.915819
+daily_log_returns = np.log(daily_pct_change + 1)

# 2017-11-16 10:43:35.853455
+daily_log_returns.plot()

# 2017-11-16 10:43:42.815025
+plt.show()

# 2017-11-16 10:46:06.122481
+panel[['Adj Close']].reset_index().pivot('Date', 'Tricker', 'Adj Close')

# 2017-11-16 10:47:02.210369
+def get(tickers, startdate, enddate):
+  def data(ticker):
+    return (web.get_data_yahoo(ticker, start=startdate, end=enddate))
+  datas = map (data, tickers)
+  return(pd.concat(datas, keys=tickers, names=['Ticker', 'Date']))

# 2017-11-16 10:47:05.929596
+tickers = ['AAPL', 'MSFT', 'GSPC']

# 2017-11-16 10:47:18.707359
+import datetime

# 2017-11-16 10:47:50.128228
+all_data = get(tickers, datetime.datetime(2006, 10, 1), datetime.datetime(2012, 1, 1))

# 2017-11-16 10:47:56.780454
+all_data.head()

# 2017-11-16 10:49:10.135862
+type(all_data)

# 2017-11-16 10:49:18.426522
+all_data[['Adj Close']]

# 2017-11-16 10:49:27.311116
+all_data[['Adj Close']].head()

# 2017-11-16 10:50:09.357765
+daily_close_px = all_data[['Adj Close']].reset_index().pivot('Date', 'Ticker', 'Adj Close')

# 2017-11-16 10:50:13.540267
+daily_close_px

# 2017-11-16 10:50:18.216227
+daily_close_px.head()

# 2017-11-16 16:20:48.748282
+import zipline as zp

# 2017-11-16 16:56:41.807446
+from selenium import webdriver

# 2017-11-16 16:56:55.477601
+from selenium.webdriver.common.keys import Keys

# 2017-11-16 16:56:57.238601
+Keys

# 2017-11-16 16:57:06.284431
+driver = webdriver.Firefox()

# 2017-11-16 16:57:23.950991
+driver.get('http://www.python.org')

# 2017-11-16 16:57:33.022281
+assert "Python" in driver.title

# 2017-11-16 16:57:48.653619
+elem = driver.find_element_by_name("q")

# 2017-11-16 16:57:51.750420
+elem

# 2017-11-16 16:57:58.694719
+elem.clear()

# 2017-11-16 16:57:59.613565
+elem

# 2017-11-16 16:58:11.827442
+elem.send_keys("pycon")

# 2017-11-16 16:58:30.803538
+elem.send_keys(Keys.RETURN)

# 2017-11-16 16:58:45.755819
+elem2 = driver.find_element_by_name("q")

# 2017-11-16 16:58:55.733551
+elem2.clear()

# 2017-11-16 16:59:07.836615
+elem2.send_keys("pycon")

# 2017-11-16 16:59:38.962231
+elem3 = driver.find_element_by_name("q")

# 2017-11-16 16:59:42.471271
+elem3.clear()

# 2017-11-16 16:59:53.345283
+elem3.send_keys("pycon")

# 2017-11-16 17:00:01.630461
+elem3.send_keys(Keys.RETURN)

# 2017-11-16 17:00:35.674661
+driver.page_source

# 2017-11-16 17:00:41.467624
+print(driver.page_source)

# 2017-11-16 17:05:13.339085
+from selenium import webdriver

# 2017-11-16 17:05:24.430057
+from selenium.webdriver.common.keys import Keys

# 2017-11-16 17:05:30.858628
+driver = webdriver.Firefox()

# 2017-11-16 17:05:50.463072
+driver.get("https://demotrade.fx.dmm.com/fxcrichpresen/webrich/direct/login")

# 2017-11-16 17:06:42.954252
+driver.title 

# 2017-11-16 17:07:08.065156
+elem = driver.find_element_by_name("accountId")

# 2017-11-16 17:07:31.647810
+elem2 = driver.find_element_by_name("password")

# 2017-11-16 17:07:37.296404
+elem.clear()

# 2017-11-16 17:07:40.961560
+elem2.clear()

# 2017-11-16 17:12:20.607245
+elem.send_keys("tsukamotoharuharu@gmail.com")

# 2017-11-16 17:12:30.671030
+elem2.send_keys("hogehoge96")

# 2017-11-16 17:12:50.425643
+elem2.send_keys(Keys.RETURN)

# 2017-11-16 17:12:59.410106
+driver.page_source

# 2017-11-16 17:15:17.575701
+driver.find_element_by_class_name("bid button streaming")

# 2017-11-16 17:16:02.942065
+driver.current_url

# 2017-11-16 17:17:17.640825
+driver.current_window_handle

# 2017-11-16 17:18:07.741153
+main_windows = driver.current_window_handle

# 2017-11-16 17:18:10.148649
+browser.find_element_by_tag_name('body').send_keys(Keys.CONTROL + Keys.TAB)

# 2017-11-16 17:18:13.681052
+driver.find_element_by_tag_name('body').send_keys(Keys.CONTROL + Keys.TAB)

# 2017-11-16 17:18:30.328371
+driver.switch_to_window(main_windows)

# 2017-11-16 17:18:46.133066
+driver.page_source

# 2017-11-16 17:19:09.978963
+driver.find_element_by_tag_name('body').send_keys(Keys.CONTROL + Keys.TAB)

# 2017-11-16 17:19:11.597532
+driver.page_source

# 2017-11-16 17:19:58.328645
+driver.find_element_by_tag_name('body').send_keys(Keys.CONTROL + Keys.TAB)

# 2017-11-16 17:20:00.854616
+driver.page_source

# 2017-11-16 17:20:08.125678
+print(driver.page_source)

# 2017-11-16 17:25:43.861974
+from selenium.webdriver.common.keys import Keys

# 2017-11-16 17:25:50.056705
+from selenium import webdriver

# 2017-11-16 17:25:56.932353
+browser = webdriver

# 2017-11-16 17:26:09.880212
+browser = webdriver.Firefox()
+browser.get('https://www.google.com?q=python#q=python')
+first_result = ui.WebDriverWait(browser, 15).until(lambda browser: browser.find_element_by_class_name('rc'))
+first_link = first_result.find_element_by_tag_name('a')
+
+# Save the window opener (current window, do not mistaken with tab... not the same)
+main_window = browser.current_window_handle
+
+# Open the link in a new tab by sending key strokes on the element
+# Use: Keys.CONTROL + Keys.SHIFT + Keys.RETURN to open tab on top of the stack 
+first_link.send_keys(Keys.CONTROL + Keys.RETURN)
+
+# Switch tab to the new tab, which we will assume is the next one on the right
+browser.find_element_by_tag_name('body').send_keys(Keys.CONTROL + Keys.TAB)
+    
+# Put focus on current window which will, in fact, put focus on the current visible tab
+browser.switch_to_window(main_window)
+
+# do whatever you have to do on this page, we will just got to sleep for now
+sleep(2)
+
+# Close current tab
+browser.find_element_by_tag_name('body').send_keys(Keys.CONTROL + 'w')
+
+# Put focus on current window which will be the window opener
+browser.switch_to_window(main_window)

# 2017-11-16 17:26:31.682022
+import selenium.webdriver.support.ui as ui

# 2017-11-16 17:26:35.488478
+from time import sleep

# 2017-11-16 17:27:22.375567
+browser = webdriver.Firefox()
+browser.get('https://www.google.com?q=python#q=python')
+first_result = ui.WebDriverWait(browser, 15).until(lambda browser: browser.find_element_by_class_name('rc'))
+first_link = first_result.find_element_by_tag_name('a')
+
+# Save the window opener (current window, do not mistaken with tab... not the same)
+main_window = browser.current_window_handle
+
+# Open the link in a new tab by sending key strokes on the element
+# Use: Keys.CONTROL + Keys.SHIFT + Keys.RETURN to open tab on top of the stack 
+first_link.send_keys(Keys.CONTROL + Keys.RETURN)
+
+# Switch tab to the new tab, which we will assume is the next one on the right
+browser.find_element_by_tag_name('body').send_keys(Keys.CONTROL + Keys.TAB)
+    
+# Put focus on current window which will, in fact, put focus on the current visible tab
+browser.switch_to_window(main_window)
+
+# do whatever you have to do on this page, we will just got to sleep for now
+sleep(2)
+
+# Close current tab
+browser.find_element_by_tag_name('body').send_keys(Keys.CONTROL + 'w')
+
+# Put focus on current window which will be the window opener
+browser.switch_to_window(main_window)

# 2017-11-16 17:31:43.235432
+from selenium.webdriver.common.keys import Keys

# 2017-11-16 17:31:48.995666
+Keys.COMMAND

# 2017-11-16 17:34:07.304734
+browser = webdriver.Firefox()
+browser.get('https://www.google.com?q=python#q=python')
+first_result = ui.WebDriverWait(browser, 15).until(lambda browser: browser.find_element_by_class_name('rc'))
+first_link = first_result.find_element_by_tag_name('a')

# 2017-11-16 17:34:13.190139
+from selenium import webdriver

# 2017-11-16 17:34:30.710007
+browser = webdriver.Firefox()
+browser.get('https://www.google.com?q=python#q=python')
+first_result = ui.WebDriverWait(browser, 15).until(lambda browser: browser.find_element_by_class_name('rc'))
+first_link = first_result.find_element_by_tag_name('a')

# 2017-11-16 17:34:36.220502
+import selenium.webdriver.support.ui as ui

# 2017-11-16 17:34:48.422929
+browser = webdriver.Firefox()
+browser.get('https://www.google.com?q=python#q=python')
+first_result = ui.WebDriverWait(browser, 15).until(lambda browser: browser.find_element_by_class_name('rc'))
+first_link = first_result.find_element_by_tag_name('a')

# 2017-11-16 17:35:13.896030
+browser.current_url

# 2017-11-16 17:35:43.701791
+first_link.send_keys(Keys.COMMAND + Keys.RETURN)

# 2017-11-16 17:35:58.028593
+browser.current_url

# 2017-11-16 17:36:11.132009
+main_windows = driver.current_window_handle

# 2017-11-16 17:36:13.935869
+main_windows = webdriver.current_window_handle

# 2017-11-16 17:36:20.625467
+main_windows = browser.current_window_handle

# 2017-11-16 17:36:22.180964
+main_windows

# 2017-11-16 17:36:47.283995
+browser.switch_to(main_windows)

# 2017-11-16 17:36:57.739918
+browser.switch_to_window(main_window)

# 2017-11-16 17:37:03.154493
+browser.switch_to_window(main_windows)

# 2017-11-16 17:37:53.191938
+browser.find_element_by_tag_name('body').send_keys(Keys.COMMAND + 'w')

# 2017-11-16 17:38:25.274222
+browser.minimize_window

# 2017-11-16 17:38:27.522474
+browser.minimize_window()

# 2017-11-16 17:38:43.906336
+browser.maximize_window()

# 2017-11-16 17:40:33.117841
+import selenium.webdriver as webdriver
+import selenium.webdriver.support.ui as ui
+from selenium.webdriver.common.keys import Keys
+from time import sleep

# 2017-11-16 17:40:54.171331
+browser = webdriver.Firefox()
+browser.get('https://www.google.com?q=python#q=python')
+first_result = ui.WebDriverWait(browser, 15).until(lambda browser: browser.find_element_by_class_name('rc'))
+first_link = first_result.find_element_by_tag_name('a')

# 2017-11-16 17:41:06.198964
+browser.window_handles[0]

# 2017-11-16 17:41:07.337822
+browser.window_handles[1]

# 2017-11-16 17:41:12.378308
+browser.window_handles

# 2017-11-16 17:41:53.165453
+first_link.send_keys(Keys.CONTROL + Keys.RETURN)

# 2017-11-16 17:42:03.340672
+first_link.send_keys(Keys.COMMAND + Keys.RETURN)

# 2017-11-16 17:42:18.565347
+browser.window_handles

# 2017-11-16 17:42:19.953930
+browser.window_handles[1]

# 2017-11-16 17:42:35.620359
+browser.switch_to_window(browser.window_handles[1])

# 2017-11-16 18:19:17.180695
+import pandas_datareader.data as web

# 2017-11-16 18:19:26.319362
+import pandas as pd

# 2017-11-16 18:19:40.098815
+data_original = pd.read_csv('./GOOG.csv')[::-1]

# 2017-11-16 18:20:07.986264
+closep = data_original.ix[:, 'Adj Close']

# 2017-11-16 18:20:09.730839
+closep

# 2017-11-16 18:20:23.380958
+closep = data_original.ix[:, 'Adj Close'].tolist()

# 2017-11-16 18:20:25.319234
+closep

# 2017-11-16 18:50:20.644974
+from tgym.envs import SpreadTrading

# 2017-11-16 18:52:45.620680
+from tgym.envs.trading import SpreadTrading

# 2017-11-16 18:53:12.289594
+import tgym.envs.trading

# 2017-11-16 18:53:17.005387
+import tgym.envs

# 2017-11-16 18:53:19.096496
+import tgym

# 2017-11-16 18:53:58.334379
+from tgym.envs.trading import SpreadTrading

# 2017-11-16 18:54:03.795169
+import tgym

# 2017-11-16 18:54:07.011678
+tgym.envs

# 2017-11-16 18:54:53.546877
+from tgym.envs import SpreadTrading

# 2017-11-16 18:55:43.454933
+import tgym.envs.trading

# 2017-11-16 18:55:59.842855
+import tgym.envs

# 2017-11-16 18:56:18.780031
+import tgym.envs.trading

# 2017-11-16 18:56:20.365421
+import tgym.env

# 2017-11-16 18:56:21.359384
+import tgym.envs

# 2017-11-16 18:56:49.811968
+import tgym

# 2017-11-16 18:56:52.376838
+tgym

# 2017-11-16 18:57:40.840782
+import tgym.envs

# 2017-11-16 18:58:29.290219
+import tgym.envs as envs

# 2017-11-16 18:58:31.271887
+envs.SpreadTrading

# 2017-11-17 22:30:01.279876
+import numpy as np

# 2017-11-17 22:30:11.593324
+import edward as ed

# 2017-11-17 22:30:15.655199
+import tensorflow as tf

# 2017-11-17 22:30:31.256658
+a = tf.contrib.distributions.Normal(10., 2.5**2)

# 2017-11-17 22:30:43.590101
+b = tf.contrib.distributions.Normal(8., 1.5**2)

# 2017-11-17 22:30:44.865873
+a

# 2017-11-17 22:30:45.020798
+b

# 2017-11-17 22:30:53.677931
+a + b

# 2017-11-17 22:31:04.117146
+a.mean()

# 2017-11-17 22:31:16.997732
+import tensorflow.contrib.eager as tfe

# 2017-11-17 22:31:21.364273
+tfe.enable_eager_execution()

# 2017-11-17 22:31:40.047894
+import tensorflow.contrib.eager as tfe

# 2017-11-17 22:31:42.078219
+tfe.enable_eager_execution()

# 2017-11-17 22:31:50.980759
+import tensorflow as tf

# 2017-11-17 22:31:58.311587
+a = tf.contrib.distributions.Normal(10., 2.5**2)

# 2017-11-17 22:32:01.112964
+b = tf.contrib.distributions.Normal(10., 2.5**2)

# 2017-11-17 22:32:07.414685
+b = tf.contrib.distributions.Normal(8., 1.5**2)

# 2017-11-17 22:32:14.748952
+a.mean()

# 2017-11-17 22:33:40.972546
+a.prob(3.0)

# 2017-11-17 22:34:16.217971
+a.covariance

# 2017-11-17 22:34:23.312970
+help(a.covariance)

# 2017-11-17 22:34:28.797124
+a.mean

# 2017-11-17 22:34:31.154777
+a.mean(b)

# 2017-11-17 22:34:45.921910
+a.covariance(b)

# 2017-11-17 22:34:57.381161
+a.covariance

# 2017-11-17 22:34:58.297179
+a.covariance()

# 2017-11-18 00:29:45.608160
+
+
+with tf.Graph().as_default():
+    # Define computation graph
+    x = tf.placeholder(tf.int32, shape=[None], name='x')
+
+    c = tf.scan(
+        fn=lambda a, x_t: a + x_t,
+        elems=x,
+        initializer=tf.constant(0))
+    
+    # Run the computation graph on some input
+    with tf.Session() as session:
+        print(session.run(c, feed_dict={x: [1, 2, 3, 4]}))

# 2017-11-18 00:30:46.827568
+
+
+with tf.Graph().as_default():
+    # Define computation graph
+    x = tf.placeholder(tf.uint32, shape=[None], name='x')
+
+    c = tf.scan(
+        fn=lambda a, x_t: a + x_t,
+        elems=x,
+        initializer=tf.constant(0))
+    
+    # Run the computation graph on some input
+    with tf.Session() as session:
+        print(session.run(c, feed_dict={x: [1, 2, 3, 4]}))

# 2017-11-18 00:30:59.770227
+x = tf.placeholder(tf.int32, shape=[None], name='x')

# 2017-11-18 00:31:06.965165
+import tensorflow as tf

# 2017-11-18 00:31:12.426571
+
+
+with tf.Graph().as_default():
+    # Define computation graph
+    x = tf.placeholder(tf.uint32, shape=[None], name='x')
+
+    c = tf.scan(
+        fn=lambda a, x_t: a + x_t,
+        elems=x,
+        initializer=tf.constant(0))
+    
+    # Run the computation graph on some input
+    with tf.Session() as session:
+        print(session.run(c, feed_dict={x: [1, 2, 3, 4, 5, 6]}))

# 2017-11-18 00:31:22.964647
+import tensorflow as tf

# 2017-11-18 00:31:27.683124
+x = tf.placeholder(tf.int32, shape=[None], name='x')

# 2017-11-18 00:31:57.526662
+c = tf.scan(fn=lambda a, x_t: a + x_t, elems=x, initializer=tf.constant(0))

# 2017-11-18 00:32:01.145037
+sess = tf.InteractiveSession()

# 2017-11-18 00:32:18.197666
+sess.run(c, feed_dict={x: [1, 2, 3, 4, 5, 6]})

# 2017-11-18 02:11:51.834181
+import talib

# 2017-11-18 02:12:07.155980
+import numpy as np

# 2017-11-18 02:12:24.782932
+close = np.random.normal(0, 1, 100)

# 2017-11-18 02:12:31.236895
+output = talib.SMA(close)

# 2017-11-18 02:12:36.488202
+from talib import MA_Type

# 2017-11-18 02:12:55.907021
+upper, middle, lowwer = talib.BBANDS(close, matype=MA_Type.T3)

# 2017-11-18 04:10:28.392019
+from zaifapi import *

# 2017-11-18 04:10:35.982959
+zaif = ZaifPublicApi()

# 2017-11-18 04:10:42.615138
+zaif.last_price('btc_jpy')

# 2017-11-18 04:12:15.215879
+z = ZaifTradeApi()

# 2017-11-18 04:13:12.313979
+from pprint import pprint

# 2017-11-18 04:13:19.869737
+pprint(zaif.ticker('btc_jpy'))

# 2017-11-18 04:13:39.114200
+pprint(zaif.trades('btc_jpy'))

# 2017-11-18 04:13:46.665110
+pprint(len(zaif.trades('btc_jpy')))

# 2017-11-18 04:14:07.047101
+zaif.currency_pairs('btc_jpy')

# 2017-11-18 04:14:22.467481
+zaif.currencies('all')

# 2017-11-18 05:36:17.015249
+class dict2(dict):
+    def __init__(self, **kwargs):
+        dict.__init__(self, kwargs)
+        self.__dict__ = self

# 2017-11-18 05:36:28.501211
+a = {'A': 20, 'B': 10}

# 2017-11-18 05:36:31.305149
+dict2(A)

# 2017-11-18 05:36:33.899889
+dict2(a)

# 2017-11-18 05:36:58.277709
+a =  dict2({'A': 20, 'B': 30})

# 2017-11-18 05:37:05.480165
+a =  dict2('A', 20)

# 2017-11-18 05:37:23.203639
+dict({'a': 1})

# 2017-11-18 05:37:25.456771
+dict2({'a': 1})

# 2017-11-18 05:37:36.190452
+class dict2(dict):
+    def __init__(self, **kwargs):
+        dict.__init__(self, kwargs)
+        self.__dict__ = self

# 2017-11-18 05:37:40.444176
+dict2({'a': 1})

# 2017-11-18 05:37:48.846848
+a = dict2({'a': 1})

# 2017-11-18 05:37:55.899502
+dict2()

# 2017-11-18 05:37:57.350573
+a = adict2()

# 2017-11-18 05:37:58.931895
+a = dict2()

# 2017-11-18 05:38:17.951953
+a.update(a=10)

# 2017-11-18 05:38:18.963912
+a

# 2017-11-18 05:38:25.060072
+dict2(a=20, b=20)

# 2017-11-21 08:25:18.968516
+class Data(object):
+    @property
+    def data(self):
+        return self._data

# 2017-11-21 08:25:21.292959
+a = Data()

# 2017-11-21 08:25:46.048374
+class Data(object):
+    def __init__(self):
+        self._data = 0
+    @property
+    def data(self):
+        return self._data

# 2017-11-21 08:25:49.391253
+a = Data()

# 2017-11-21 08:25:50.079591
+a

# 2017-11-21 08:25:52.033515
+a.data

# 2017-11-21 08:25:54.685379
+class Data(object):
+    def __init__(self):
+        self._data = 0
+    @property
+    def data(self):
+        return self._data

# 2017-11-21 08:26:25.071283
+class Data(object):
+    def __init__(self):
+        self._data = 0
+    @property
+    def data(self):
+        return self._data
+    @data.setter
+    def data(self, value):
+        self._data = value
+        print("Fuck off")

# 2017-11-21 08:26:27.295529
+a = Data()

# 2017-11-21 08:26:29.091742
+a.data

# 2017-11-21 08:26:42.104493
+a.data = 10

# 2017-11-21 08:26:43.374789
+a

# 2017-11-21 08:26:44.339396
+a.data

# 2017-11-22 10:54:50.070076
+pwd

# 2017-11-22 11:39:40.716042
+import pandas as pd

# 2017-11-22 11:39:52.103107
+pd.read_csv('./vio_30_Dense_500_(500 , 100).txt')

# 2017-11-22 11:40:40.672001
+import pandas as pd

# 2017-11-22 11:40:56.437329
+a = pd.read_csv('./vio_60_Dense_500_(500 , 100).txt')

# 2017-11-22 11:40:56.978390
+a

# 2017-11-22 11:41:09.425582
+import matplotlib.pyplot as plt

# 2017-11-22 11:41:12.929407
+a.plot()

# 2017-11-22 11:41:35.628038
+plt.show()

# 2017-11-22 11:43:20.349290
+a = pd.read_csv('./vio_150_Sparse_500_(500 , 100).txt')

# 2017-11-22 11:43:23.782174
+import pandas as pd

# 2017-11-22 11:43:24.800469
+a = pd.read_csv('./vio_150_Sparse_500_(500 , 100).txt')

# 2017-11-22 11:43:28.874944
+import matplotlib.pyplot as plt

# 2017-11-22 11:43:30.437514
+a.plot

# 2017-11-22 11:43:31.663443
+a.plot()

# 2017-11-22 11:43:53.240095
+plt.show()

# 2017-11-22 11:44:16.376282
+import numpy as np

# 2017-11-22 11:44:22.823905
+abs(1 - a).plot()

# 2017-11-22 11:44:49.826397
+plt.show()

# 2017-11-22 11:44:51.343588
+a

# 2017-11-22 11:45:20.859517
+import tensorflow as tf

# 2017-11-22 11:45:26.770302
+import tensorflow.contrib.eager as tfe

# 2017-11-22 11:45:28.412820
+tfe.enable_eager_execution()

# 2017-11-22 11:45:48.634868
+a[:,1]

# 2017-11-22 11:45:51.250314
+a

# 2017-11-22 11:45:55.352928
+a.iloc[:,1]

# 2017-11-22 11:45:57.568321
+a.loc[:,1]

# 2017-11-22 11:46:00.597200
+a.ix[:,1]

# 2017-11-22 11:46:03.464935
+a.ix

# 2017-11-22 11:46:06.406505
+a.ix[0]

# 2017-11-22 11:46:09.623000
+a.ix[1]

# 2017-11-22 11:46:12.525290
+a

# 2017-11-22 11:46:20.347677
+a.loc[0]

# 2017-11-22 11:46:21.708073
+a.loc[1]

# 2017-11-22 11:46:22.743085
+a.loc[3]

# 2017-11-22 11:46:26.124891
+a.loc[-1]

# 2017-11-22 11:46:31.053897
+a.loc[263]

# 2017-11-22 11:46:33.477184
+a.loc[264]

# 2017-11-22 11:46:34.749888
+a.loc[263]

# 2017-11-22 11:46:43.862370
+a.loc[0,263]

# 2017-11-22 11:46:46.572997
+a.loc[:,263]

# 2017-11-22 11:46:54.114859
+int(a.loc[263])

# 2017-11-22 11:47:05.254142
+a.loc[0,:]

# 2017-11-22 11:47:13.245965
+a.shape

# 2017-11-22 11:47:21.879441
+a[:,0]

# 2017-11-22 11:47:28.285456
+np.asarray(a)

# 2017-11-22 11:47:33.321592
+b = np.asarray(a).T

# 2017-11-22 11:47:33.753105
+b

# 2017-11-22 11:48:00.493387
+tf.nn.softmax(b).eval()

# 2017-11-22 11:48:13.699364
+b.astype(np.float32)

# 2017-11-22 11:48:19.441946
+b

# 2017-11-22 11:48:24.822143
+b = b.astype(np.float32)

# 2017-11-22 11:48:27.213068
+tf.nn.softmax(b).eval()

# 2017-11-22 11:48:32.550705
+tf.nn.softmax(b)

# 2017-11-22 11:48:38.395026
+Q = tf.nn.softmax(b)

# 2017-11-22 11:48:39.028303
+Q

# 2017-11-22 11:48:41.510904
+Q[0:10]

# 2017-11-22 11:48:46.250191
+Q[:, 0:10]

# 2017-11-22 11:49:08.380707
+pd.DataFrame(Q).plot()

# 2017-11-22 11:49:11.891729
+Q

# 2017-11-22 11:49:15.305096
+type(Q)

# 2017-11-22 12:14:07.282383
+a = "0 0.0212585 0.510204 0.520833 0.680272 0.687358 0.765306 0.770621 0.816327 0.820578 0.853883 0.853883 0.877672 0.877672 0.895514 0.895514 0.910573 0.911754 0.921556 0.922619 0.933442 0.933442 0.940689 0.940689 0.946821 0.94904 0.949274 0.952077 0.953798 0.956633 0.957961 0.960619 0.961635 0.964136 0.9649 0.967262 0.967852 0.969919 0.970059 0.972577 0.97283 0.974992 0.97536 0.97558 0.977408 0.978353 0.978777 0.980442 0.980548 0.982143 0.983615 0.983615 0.984584 0.984584 0.985863 0.986243 0.987149 0.987421 0.987421 0.987457 0.988188 0.988208 0.98852 0.98852 0.988863 0.989849 0.990453 0.990646 0.991334 0.991473 0.991557 0.992255 0.992359 0.992996 0.993117 0.993699 0.993835 0.994366 0.994516 0.995002 0.995164 0.995607 0.995779 0.996183 0.996366 0.996925 0.997217 0.997301 0.997459 0.997732 0.997793 0.997969 0.998264 0.998456 0.998924 0.99915 0.999362 0.999584 0.999584 1".split(' ', ',')

# 2017-11-22 12:14:07.829273
+a

# 2017-11-22 12:14:13.044222
+"0 0.0212585 0.510204 0.520833 0.680272 0.687358 0.765306 0.770621 0.816327 0.820578 0.853883 0.853883 0.877672 0.877672 0.895514 0.895514 0.910573 0.911754 0.921556 0.922619 0.933442 0.933442 0.940689 0.940689 0.946821 0.94904 0.949274 0.952077 0.953798 0.956633 0.957961 0.960619 0.961635 0.964136 0.9649 0.967262 0.967852 0.969919 0.970059 0.972577 0.97283 0.974992 0.97536 0.97558 0.977408 0.978353 0.978777 0.980442 0.980548 0.982143 0.983615 0.983615 0.984584 0.984584 0.985863 0.986243 0.987149 0.987421 0.987421 0.987457 0.988188 0.988208 0.98852 0.98852 0.988863 0.989849 0.990453 0.990646 0.991334 0.991473 0.991557 0.992255 0.992359 0.992996 0.993117 0.993699 0.993835 0.994366 0.994516 0.995002 0.995164 0.995607 0.995779 0.996183 0.996366 0.996925 0.997217 0.997301 0.997459 0.997732 0.997793 0.997969 0.998264 0.998456 0.998924 0.99915 0.999362 0.999584 0.999584 1".split(' ', ',')

# 2017-11-22 12:14:31.823238
+import pandas as pd

# 2017-11-22 12:14:39.088943
+a = pd.read_csv('hoge')

# 2017-11-22 12:14:39.428799
+a

# 2017-11-22 12:15:59.530083
+import matplotlib.pyplot as plt

# 2017-11-22 12:16:01.403940
+a.plot()

# 2017-11-22 12:16:03.377235
+a

# 2017-11-22 12:16:12.465878
+a.columns

# 2017-11-22 12:16:18.740540
+np.asarray(a.col)

# 2017-11-22 12:16:21.465844
+import numpy as np

# 2017-11-22 12:16:22.520109
+np.asarray(a.col)

# 2017-11-22 12:16:25.437605
+np.asarray(a.columns)

# 2017-11-22 12:20:27.121421
+import importlib

# 2017-11-22 12:20:35.522821
+importlib.reload(a)

# 2017-11-22 12:21:17.786987
+reload

# 2017-11-22 12:23:26.913725
+import tensorflow.contrib.eager as tfe

# 2017-11-22 12:24:00.435117
+tf

# 2017-11-22 12:28:41.946318
+tfe

# 2017-11-22 12:35:58.501015
+a = tf.contrib.distributions.Normal(10., 2.5**2)

# 2017-11-22 12:35:59.416129
+a

# 2017-11-22 12:36:05.603990
+a.sample()

# 2017-11-22 12:39:43.450049
+import tensorflow as tf

# 2017-11-22 12:39:49.662904
+import tensorflow.contrib.eager as tfe

# 2017-11-22 12:39:52.770030
+tfe.enable_eager_execution()

# 2017-11-22 12:42:07.871097
+x = tf.placeholder(tf.float32, shape=[1, 1])

# 2017-11-22 12:42:22.635533
+tfe.enable_eager_execution()

# 2017-11-22 12:42:25.630812
+tf.placeholder

# 2017-11-22 12:42:28.138865
+tf.placeholder()

# 2017-11-22 12:42:33.420490
+a = tf.placeholder(tf.float32)

# 2017-11-22 12:42:40.882155
+x = tf.placeholder(tf.float32, shape=[1, 1])

# 2017-11-22 12:42:51.852719
+import tensorflow.contrib.eager as tfe

# 2017-11-22 12:42:55.597738
+tfe.enable_eager_execution()

# 2017-11-22 12:43:16.560764
+import tensorflow as tf

# 2017-11-22 12:43:20.859466
+x = tf.placeholder(tf.float32, shape=[1, 1])

# 2017-11-22 12:44:24.137501
+import tensorflow as tf
+
+import tensorflow.contrib.eager as tfe
+
+tfe.enable_eager_execution()

# 2017-11-22 12:44:30.652962
+x = tf.matmul([[1, 2],
+               [3, 4]],
+              [[4, 5],
+               [6, 7]])
+# Add one to each element
+# (tf.add supports broadcasting)
+y = tf.add(x, 1)
+
+# Create a random random 5x3 matrix
+z = tf.random_uniform([5, 3])

# 2017-11-22 12:44:33.611590
+x

# 2017-11-22 12:44:35.205284
+y

# 2017-11-22 12:44:36.568560
+z

# 2017-11-22 17:48:31.434424
+df = pd.read_csv('./hoge.csv')

# 2017-11-22 17:48:36.915222
+df.head()

# 2017-11-22 17:48:43.977425
+import matplotlib.pyplot as plt

# 2017-11-22 17:48:47.744191
+df.plot()

# 2017-11-22 17:48:49.777703
+plt.show()

# 2017-11-22 17:50:23.794669
+df = pd.read_csv('./hoge.csv')

# 2017-11-22 17:50:26.333136
+import matplotlib.pyplot as plt

# 2017-11-22 17:50:29.997124
+df.plot()

# 2017-11-22 17:50:32.315303
+plt.show()

# 2017-11-22 17:51:35.224374
+import matplotlib.pyplot as plt

# 2017-11-22 17:51:38.209084
+df = pd.read_csv('./hoge.csv')

# 2017-11-22 17:51:40.601272
+df.plot()

# 2017-11-22 17:51:46.693394
+plt.show()

# 2017-11-22 17:52:08.187571
+df.plot()

# 2017-11-22 17:52:27.101786
+plt.ylim(0, 1)

# 2017-11-22 17:52:34.597483
+plt.show()

# 2017-11-22 18:00:48.810503
+import pandas as pd

# 2017-11-22 18:00:55.190192
+a = pd.DataFrame()

# 2017-11-22 18:00:59.851530
+a.empty()

# 2017-11-22 18:01:03.684585
+a.empty

# 2017-11-22 18:03:10.699714
+import pandas as pd

# 2017-11-22 18:03:20.730597
+df = pd.read_csv('./kekka0.csv')

# 2017-11-22 18:03:44.630241
+df.head()

# 2017-11-22 18:12:20.742762
+import random

# 2017-11-22 18:12:27.842861
+random.random(0.1)

# 2017-11-22 18:12:29.820951
+random.random()

# 2017-11-22 18:12:41.012893
+import numpy as np

# 2017-11-22 18:12:46.127306
+np.random.randint(0, 4, 14)

# 2017-11-22 18:12:48.229339
+np.random.randint(0, 4)

# 2017-11-22 18:17:46.098879
+a = pd.read_csv('kekka0.csv')

# 2017-11-22 18:17:49.037349
+a.head()

# 2017-11-22 18:17:52.996915
+a /= 10

# 2017-11-22 18:17:55.138240
+a.head()

# 2017-11-23 01:54:52.246368
+a = []

# 2017-11-23 01:54:53.898863
+a[10]

# 2017-11-23 02:06:20.452975
+df= pd.read_csv('./test.csv')

# 2017-11-23 02:06:23.096230
+df.head()

# 2017-11-23 02:06:30.957687
+import matplotlib.pyplot as plt

# 2017-11-23 02:06:33.232545
+df.plot()

# 2017-11-23 02:06:57.148437
+df.fillna

# 2017-11-23 02:07:04.494590
+df.fillna()

# 2017-11-23 02:07:06.317018
+df.fillna

# 2017-11-23 02:07:09.737798
+df

# 2017-11-23 02:07:14.400680
+df.plot()

# 2017-11-23 02:07:20.401451
+df.dropna()

# 2017-11-23 02:07:28.986626
+df.dropna(inplace=True)

# 2017-11-23 02:07:31.508696
+df.plot()

# 2017-11-23 02:07:37.855765
+df.head()

# 2017-11-23 02:08:58.163499
+df= pd.read_csv('./test.csv')

# 2017-11-23 02:09:00.799429
+import matplotlib.pyplot as plt

# 2017-11-23 02:09:03.626961
+df.plot()

# 2017-11-23 02:09:05.875096
+plt.show()

# 2017-11-23 02:10:17.933992
+df= pd.read_csv('./test.csv')

# 2017-11-23 02:10:21.096905
+import matplotlib.pyplot as plt

# 2017-11-23 02:10:23.417099
+df.plot()

# 2017-11-23 02:10:25.530586
+plt.show()

# 2017-11-23 02:11:06.939814
+df.plot()

# 2017-11-23 02:11:07.789192
+plt.show()

# 2017-11-23 02:37:16.882758
+df= pd.read_csv('./exp0.0001_120_linear_0.csv')

# 2017-11-23 02:37:18.721378
+df.plot()

# 2017-11-23 02:37:22.225640
+import matplotlib.pyplot as plt

# 2017-11-23 02:37:24.688483
+plt.show()

# 2017-11-23 02:37:45.631792
+df.plot()

# 2017-11-23 02:37:50.833446
+plt.xlim(0, 700)

# 2017-11-23 02:37:55.484086
+plt.ylim(0, 1)

# 2017-11-23 02:37:57.971189
+plt.show()

# 2017-11-23 02:39:07.677816
+df= pd.read_csv('./exp0.0005_120_linear_0.csv')

# 2017-11-23 02:39:12.064051
+df.plot()

# 2017-11-23 02:39:13.893151
+plt.show()

# 2017-11-23 02:43:55.522056
+df= pd.read_csv('./exp0.05_120_linear_4.csv')

# 2017-11-23 02:43:58.307410
+df.plot()

# 2017-11-23 02:44:02.969424
+plt.show()

# 2017-11-23 02:44:22.255649
+df.plot()

# 2017-11-23 02:44:23.397922
+plt.show()

# 2017-11-23 09:09:09.391129
+import numpy as np

# 2017-11-23 09:09:22.631736
+a1 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# 2017-11-23 09:09:27.305935
+a1.shape

# 2017-11-23 09:09:39.196311
+a2 = np.array([[10, 20, 30]])

# 2017-11-23 09:09:40.358402
+a1

# 2017-11-23 09:09:40.914733
+a2

# 2017-11-23 09:09:43.205437
+a2.shape

# 2017-11-23 09:09:45.052177
+a1

# 2017-11-23 09:09:49.947017
+a1.shape

# 2017-11-23 09:10:08.369860
+np.hstack((a1, a2))

# 2017-11-23 09:10:16.237425
+np.vstack((a1, a2))

# 2017-11-23 09:10:57.195183
+help(np.vstack)

# 2017-11-23 09:11:20.645062
+help(np.hstack)

# 2017-11-23 09:11:36.415605
+a1.shape

# 2017-11-23 09:11:38.352253
+a2.shape

# 2017-11-23 09:11:50.323850
+np.vstack((a1, a2)).shape

# 2017-11-23 09:12:21.938777
+np.hstack((a1, a2.T))

# 2017-11-23 09:12:23.859095
+np.hstack((a1, a2.T)).shape

# 2017-11-23 09:13:26.373770
+a2.T

# 2017-11-23 09:56:19.536347
+import keras.datasets.mnist as mnist

# 2017-11-23 09:56:41.481090
+mnist.load_data('./data')

# 2017-11-23 09:56:51.406717
+hoge = _

# 2017-11-23 09:56:52.678971
+hoge.shape

# 2017-11-23 09:56:57.502053
+hoge

# 2017-11-23 09:57:02.707049
+len(hoge)

# 2017-11-23 09:58:29.594959
+(x_train, y_train), (x_test, y_test) = hoge

# 2017-11-23 09:58:32.316842
+x_train.shape

# 2017-11-23 09:58:49.232580
+x_train.astype

# 2017-11-23 09:58:52.362119
+x_train.type

# 2017-11-23 09:59:00.404690
+x_train.nbytes

# 2017-11-23 09:59:09.365921
+type(x_train)

# 2017-11-23 10:00:10.463165
+x_train[0]

# 2017-11-23 10:00:18.387096
+x_train.dtype

# 2017-11-23 10:02:18.201338
+y_train.shape

# 2017-11-23 10:02:34.576130
+from keras.utils.np_utils import to_categorical

# 2017-11-23 10:02:39.450641
+to_categorical(y_train).shape

# 2017-11-23 10:03:04.374510
+x_train.shape

# 2017-11-23 10:34:24.890058
+import tensorflow as tf

# 2017-11-23 10:34:27.882427
+x = tf.placeholder(tf.float32, shape=[1, 1])

# 2017-11-23 10:34:28.359550
+x

# 2017-11-23 10:47:11.287470
+import tensorflow as tf

# 2017-11-23 10:47:14.425990
+tf

# 2017-11-23 10:47:17.025137
+tf.placeholder()

# 2017-11-23 10:47:37.806483
+import tensorflow as tf

# 2017-11-23 10:47:39.198712
+tf

# 2017-11-23 10:48:24.574170
+import tensorflow as tf

# 2017-11-23 10:48:32.190322
+x = tf.placeholder(dtype=tf.float32)

# 2017-11-23 10:48:33.098775
+x

# 2017-11-23 10:48:34.934112
+x.device

# 2017-11-23 13:42:25.375389
+a = tf.random_uniform([10, 20])

# 2017-11-23 13:42:29.422141
+a

# 2017-11-23 13:42:34.618551
+a.shape

# 2017-11-23 13:42:40.194709
+a.shape.as_list()

# 2017-11-23 13:42:42.074926
+a.shape.as_list()[0]

# 2017-11-23 13:42:47.858790
+a.get_shape

# 2017-11-23 13:42:49.016480
+a.get_shape()

# 2017-11-23 13:42:52.518211
+a.get_shape().as_list

# 2017-11-23 13:42:54.774271
+a.get_shape().as_list()

# 2017-11-23 13:42:59.096219
+a.get_shape.as_list()

# 2017-11-23 13:43:02.600368
+a.shape.as_list()

# 2017-11-23 13:43:16.700070
+a = np.zeros((12, 12))

# 2017-11-23 13:43:21.705216
+a.shape.as_list()

# 2017-11-23 13:43:34.074141
+a.shape

# 2017-11-23 13:43:51.815569
+a.shape[0]

# 2017-11-23 13:43:59.865247
+b = tf.random_uniform([10, 20])

# 2017-11-23 13:44:02.876819
+b.shape[0]

# 2017-11-23 13:44:04.965790
+b.shape[0].value

# 2017-11-23 13:44:33.462483
+a.shape[0]

# 2017-11-23 13:44:36.258409
+a.shape

# 2017-11-23 13:44:40.146499
+b.shape[0]

# 2017-11-23 13:44:42.452290
+b.shape[0].value

# 2017-11-23 13:44:44.935114
+b

# 2017-11-23 13:44:48.501096
+b.shape

# 2017-11-23 13:45:03.877561
+tf.reduce_mean(b, axis=0)

# 2017-11-23 13:45:06.493820
+tf.reduce_mean(b, axis=0).shape

# 2017-11-23 13:45:26.827251
+b.shape

# 2017-11-24 07:21:46.372167
+import gym

# 2017-11-24 07:23:37.912873
+import tensorflow as tf

# 2017-11-24 07:23:48.572167
+import gym

# 2017-11-24 07:23:56.291315
+import tensorflow as tf

# 2017-11-24 07:23:57.179927
+tf

# 2017-11-24 07:38:41.403512
+gpu_options = tf.GPUOptions(allow_growth=True)

# 2017-11-24 07:38:45.752032
+gpu_options

# 2017-11-24 07:39:33.371430
+sess = tf.InteractiveSession(config=tf.ConfigProto(gpu_options=gpu_options))

# 2017-11-24 07:39:36.277544
+sess

# 2017-11-24 14:02:10.531562
+rng = pd.date_range('1/1/2011', periods=72, freq='H')

# 2017-11-24 14:02:11.531914
+rng

# 2017-11-24 14:02:17.020868
+rng.dtype

# 2017-11-24 14:12:43.840397
+pd.Timestamp

# 2017-11-24 14:14:25.203382
+from downloads import to_dataframe

# 2017-11-24 14:14:48.024236
+csv = to_dataframe('./tests/FOREX-dir/DAT_MS_USDJPY_M1_201606.csv')

# 2017-11-24 14:15:05.209409
+csv.head()

# 2017-11-24 14:36:29.765209
+from downloads import load_forex

# 2017-11-24 14:37:41.325307
+df= load_forex(symbols=['USDJPY'], start='2010/01/01', end='2017/01/01')

# 2017-11-24 14:39:02.569769
+pd.Timestamp('2010/01/01')

# 2017-11-24 14:39:12.466196
+a = pd.Timestamp('2010/01/01')

# 2017-11-24 14:39:15.169260
+pd.Timedelta(a)

# 2017-11-24 14:41:16.402799
+%load_ext

# 2017-11-24 14:41:20.654850
+%load_ext autoreload

# 2017-11-24 14:41:25.613969
+%autoreload 2

# 2017-11-24 14:41:29.875388
+from downloads import load_forex

# 2017-11-24 14:41:38.510177
+df= load_forex(symbols=['USDJPY'], start='2010/01/01', end='2017/01/01')

# 2017-11-24 14:42:12.285660
+%aimport downloads

# 2017-11-24 14:42:16.569839
+%aimport load_forex

# 2017-11-24 14:42:27.894747
+%autoreload 1

# 2017-11-24 14:42:35.844158
+df= load_forex(symbols=['USDJPY'], start='2010/01/01', end='2017/01/01')

# 2017-11-24 14:42:50.135299
+from downloads import load_forex

# 2017-11-24 14:42:58.823966
+df = load_forex(symbols=['USDJPY'], start='2010/01/01', end='2017/01/01')

# 2017-11-24 14:46:11.463993
+df = load_forex(symbols=['USDJPY'], start='2010/01/01', end='2017/01/01', click_time=2)

# 2017-11-24 14:49:07.251458
+from downloads import load_forex

# 2017-11-24 14:49:08.277451
+df = load_forex(symbols=['USDJPY'], start='2010/01/01', end='2017/01/01', click_time=2)

# 2017-11-24 14:50:01.018489
+from downloads import maybe_download

# 2017-11-24 14:51:54.062672
+df = load_forex(symbols=['USDJPY'], start='2010/01/01', end='2017/01/01', click_time=2)

# 2017-11-24 14:52:28.881922
+from downloads import maybe_download

# 2017-11-24 14:52:37.032054
+from downloads import load_forex

# 2017-11-24 14:52:51.171634
+df = load_forex(symbols=['USDJPY'], start='2010/01/01', end='2017/01/01', click_time=2)

# 2017-11-24 14:54:16.201442
+df = load_forex(symbols=['USDJPY'], start='2010/01/01', end='2017/01/01', click_time=10)

# 2017-11-25 09:23:15.149665
+from downloads import load_forex

# 2017-11-29 18:00:40.435342
+a = tf.random_uniform([10, 1])

# 2017-11-29 18:00:40.890783
+a

# 2017-11-29 18:01:04.248646
+a = tf.random_uniform([10, 1])

# 2017-11-29 18:01:05.703777
+a

# 2017-11-30 14:38:34.747254
+with tfe.GradientTape() as g:
+    x = tf.constant(3.)
+    g.watch(x)
+    y = x * x

# 2017-11-30 14:38:51.168962
+grad = g.gradient(y, [x])

# 2017-11-30 14:38:54.889022
+grad

# 2017-11-30 14:39:05.569658
+grad[0].numpy() == 6

# 2017-11-30 14:40:42.199536
+with tfe.GradientTape() as g:
+    x = tf.constant(3.)
+    g.watch(x)
+    y = x * x
+    with tfe.GradientTape() as gg:
+        gg.watch(y)
+        z = 2 * y
+    inner_grad = gg.gradient(z, [y])[0]
+    assert inner_grad.numpy() == 2
+    y = y + inner_grad
+grad = g.gradient(y, [x])[0]
+assert grad.numpy() == 6.0

# 2017-11-30 14:41:32.924051
+y

# 2017-11-30 14:41:37.843019
+inner_grad

# 2017-11-30 14:42:06.985456
+with tfe.GradientTape() as g:
+    x = tf.constant(3.)
+    g.watch(x)
+    y = x * x
+    with tfe.GradientTape() as gg:
+        gg.watch(y)
+        z = 2 * y
+    inner_grad = gg.gradient(z, [y])[0]
+    assert inner_grad.numpy() == 2
+    # y = y + inner_grad
+grad = g.gradient(y, [x])[0]
+assert grad.numpy() == 6.0

# 2017-11-30 14:42:22.208638
+with tfe.GradientTape() as g:
+    x = tf.constant(3.)
+    g.watch(x)
+    y = x * x
+    with tfe.GradientTape() as gg:
+        gg.watch(y)
+        z = 2 * y
+    inner_grad = gg.gradient(z, [y])[0]
+    assert inner_grad.numpy() == 2
+    print(y)
+    print(inner_grad)
+    y = y + inner_grad
+grad = g.gradient(y, [x])[0]
+assert grad.numpy() == 6.0

# 2017-11-30 14:43:15.567428
+with tfe.GradientTape() as g:
+    x = tf.constant(3.)
+    g.watch(x)
+    y = x * x
+    with tfe.GradientTape() as gg:
+        gg.watch(y)
+        z = 2 * y
+    inner_grad = gg.gradient(z, [x])[0]

# 2017-11-30 14:43:17.797904
+inner_grad

# 2017-11-30 14:43:22.445713
+with tfe.GradientTape() as g:
+    x = tf.constant(3.)
+    g.watch(x)
+    y = x * x
+    with tfe.GradientTape() as gg:
+        gg.watch(y)
+        z = 2 * y
+    inner_grad = gg.gradient(z, [x])[0]

# 2017-11-30 14:43:25.901717
+inner_grad is None

# 2017-11-30 14:43:32.881670
+with tfe.GradientTape() as g:
+    x = tf.constant(3.)
+    g.watch(x)
+    y = x * x
+    with tfe.GradientTape() as gg:
+        gg.watch(y)
+        z = 2 * y
+        inner_grad = gg.gradient(z, [x])[0]

# 2017-11-30 14:43:39.726317
+with tfe.GradientTape() as g:
+    x = tf.constant(3.)
+    g.watch(x)
+    y = x * x
+    with tfe.GradientTape() as gg:
+        gg.watch(y)
+        z = 2 * y
+    z

# 2017-11-30 14:43:43.799033
+with tfe.GradientTape() as g:
+    x = tf.constant(3.)
+    g.watch(x)
+    y = x * x
+    with tfe.GradientTape() as gg:
+        gg.watch(y)
+        z = 2 * y
+    print(z)

# 2017-11-30 14:44:11.103822
+with tfe.GradientTape() as g:
+    x = tf.constant(3.)
+    g.watch(x)
+    y = x * x
+    with tfe.GradientTape() as gg:
+        gg.watch(y)
+        z = 2 * y
+    inner_grad = gg.gradient(z, [x])

# 2017-11-30 14:44:12.542880
+inner_grad

# 2017-11-30 14:46:05.095489
+with tfe.GradientTape() as g:
+    x = tf.constant(3.)
+    g.watch(x)
+    y = x * x
+    z = 2 * y
+    grad = g.gradient(z, [x])[0]
+    assert grad.numpy() == 12

# 2017-11-30 14:46:08.093079
+with tfe.GradientTape() as g:
+    x = tf.constant(3.)
+    g.watch(x)
+    y = x * x
+    z = 2 * y
+    grad = g.gradient(z, [x])[0]

# 2017-11-30 14:46:29.556728
+with tfe.GradientTape() as g:
+    x = tf.constant(3.)
+    g.watch(x)
+    y = x * x
+    z = 2 * y

# 2017-11-30 14:46:30.659325
+z

# 2017-11-30 14:48:26.980415
+with tfe.GradientTape() as g:
+    x = tf.constant(3.)
+    g.watch(x)
+    y = x * x
+    with tfe.GradientTape() as gg:
+        gg.watch(y)
+        z = 2 * y * y
+grad = g.gradient(z, [x])[0]

# 2017-11-30 14:48:29.629328
+grad

# 2017-11-30 14:49:24.229645
+8 * 27

# 2017-11-30 14:51:04.264406
+help(tfe.GradientTape)

# 2017-11-30 14:51:52.889214
+help(g.gradient)

# 2017-11-30 15:13:40.417510
+t1 = [[1, 2, 3], [4, 5, 6]]

# 2017-11-30 15:13:50.313445
+t2 = [[7, 8, 9], [10, 11, 12]]

# 2017-11-30 15:13:58.057624
+tf.concat([t1, t2], 1)

# 2017-11-30 15:14:48.133741
+tf.constant(t1).shape

# 2017-11-30 15:19:33.837043
+from network import CriticNetwork

# 2017-11-30 15:19:39.267260
+import network

# 2017-11-30 15:19:50.612197
+from ddpg_network import CriticNetwork

# 2017-11-30 15:21:06.735404
+from networks.ddpg_network import CriticNetwork

# 2017-11-30 15:23:12.606949
+sess = tf.InteractiveSession()

# 2017-11-30 15:23:24.120737
+env = gym.make('CartPole-v0')

# 2017-11-30 15:23:27.529039
+import gym

# 2017-11-30 15:23:28.913934
+env = gym.make('CartPole-v0')

# 2017-11-30 15:23:47.561595
+env.observation_space

# 2017-11-30 15:23:50.128987
+env.observation_space[0]

# 2017-11-30 15:23:52.457365
+env.observation_space.shape

# 2017-11-30 15:23:54.017407
+env.observation_space.shape[0]

# 2017-11-30 15:23:58.161952
+state_dim = env.observation_space.shape

# 2017-11-30 15:24:04.033588
+action_dim = env.action_space.n

# 2017-11-30 15:24:06.505048
+action_dim 

# 2017-11-30 15:24:56.684587
+CriticNetwork(sess, state_dim, action_dim, 0.01, 0.1, 'Continuous', 10)

# 2017-11-30 15:25:08.758315
+import tensorflow as tf

# 2017-11-30 15:25:12.180283
+import gym

# 2017-11-30 15:25:17.529086
+env = gym.make('CartPole-v0')

# 2017-11-30 15:25:19.475277
+state_dim = env.observation_space.shape

# 2017-11-30 15:25:22.187076
+action_dim = env.action_space.n

# 2017-11-30 15:25:28.140670
+from networks.ddpg_network import CriticNetwork

# 2017-11-30 15:25:34.421470
+sess = tf.InteractiveSession()

# 2017-11-30 15:25:37.817072
+CriticNetwork(sess, state_dim, action_dim, 0.01, 0.1, 'Continuous', 10)

# 2017-11-30 15:25:41.531671
+network = _

# 2017-11-30 15:25:49.493289
+network.outputs

# 2017-11-30 15:30:04.012285
+from networks.ddpg_network import CriticNetwork
+env = gym.make('CartPole-v0')
+state_dim = env.observation_space.shape
+action_dim = env.action_space.n
+sess = tf.InteractiveSession()
+network = CriticNetwork(sess, state_dim, action_dim, 0.01, 0.1, 'Continuous', 10)

# 2017-11-30 21:00:40.203400
+env = gym.make('Breakout-v0')

# 2017-11-30 21:00:50.916395
+env.observation_space

# 2017-11-30 21:01:26.722596
+env.observation_space.shape

# 2017-11-30 21:02:13.608817
+env2 = gym.make('CartPole-v0')

# 2017-11-30 21:02:32.086518
+env2.observation_space.shape

# 2017-11-30 21:02:43.907473
+env2.action_space.shape

# 2017-11-30 21:02:50.613897
+env.action_space.shape

# 2017-11-30 21:02:59.851226
+env.action_space.sample

# 2017-11-30 21:03:00.638058
+env.action_space.sample()

# 2017-11-30 21:03:10.741885
+env2.action_space.sample()

# 2017-11-30 21:03:31.424358
+env3 = gym.make('MountainCarContinuous-v0')

# 2017-11-30 21:03:39.054022
+env3.action_space.shape

# 2017-11-30 21:03:44.670155
+env3.action_space.sample()

# 2017-11-30 21:04:01.014123
+env3.observation_space.sample()

# 2017-11-30 21:04:16.518874
+env2.observation_space.sample()

# 2017-11-30 21:04:23.157559
+env.observation_space.sample()

# 2017-11-30 21:04:25.048783
+env.observation_space.sample().shape

# 2017-12-01 01:10:37.462444
+env = gym.make('Pendulum-v0 ')

# 2017-12-01 01:10:39.865259
+env = gym.make('Pendulum-v0')

# 2017-12-01 01:10:55.877631
+env.action_space.sample

# 2017-12-01 01:10:56.841781
+env.action_space.sample()

# 2017-12-01 01:11:03.561784
+env.observation_space.sample

# 2017-12-01 01:11:04.461989
+env.observation_space.sample()

# 2017-12-01 01:13:01.198314
+env = gym.make('InvertedPendulum-v1')

# 2017-12-01 01:13:57.790033
+env = gym.make('Pong-v0')

# 2017-12-01 01:14:01.361398
+env.render()

# 2017-12-01 01:14:12.609705
+env.observation_space.sample()

# 2017-12-01 01:14:17.378870
+env.observation_space.shape

# 2017-12-01 01:14:25.484424
+env.action_space.shape

# 2017-12-01 01:14:31.949133
+env.action_space.sample()

# 2017-12-01 01:14:54.372339
+env.action_space.n

# 2017-12-01 01:15:16.365931
+env2 = gym.make('Pendulum-v0')

# 2017-12-01 01:15:20.846163
+env2.action_space.n

# 2017-12-01 01:15:30.346813
+env2.action_space.shape

# 2017-12-01 01:19:46.541582
+env.action_space.shape

# 2017-12-01 01:19:47.893098
+env.action_space.shape[0]

# 2017-12-01 01:19:55.510159
+env.action_space.high

# 2017-12-01 01:27:24.542791
+tfe.enable_eager_execution()

# 2017-12-01 01:27:31.542185
+a = tf.random_uniform([2, 2])

# 2017-12-01 01:27:33.071781
+a

# 2017-12-01 01:27:39.087649
+tf.round(a)

# 2017-12-01 14:13:45.778902
+a = np.array([1, 2])

# 2017-12-01 14:13:51.764327
+a = np.array([[1, 2]])

# 2017-12-01 15:07:46.996461
+import tensorflow as tf

# 2017-12-01 15:07:49.414320
+sess = tf.InteractiveSession()

# 2017-12-01 15:08:06.438371
+writer = tf.summary.FileWriter(None, sess.graph)

# 2017-12-01 15:09:50.904670
+writer = tf.summary.FileWriter(".", sess.graph)

# 2017-12-01 15:13:24.414620
+tf.gfile.Exists('/tmp/fuck')

# 2017-12-01 15:26:01.495556
+from ddpg_agent import DDPGAgent

# 2017-12-01 15:26:20.870713
+from agents.ddpg_agent import DDPGAgent

# 2017-12-01 15:52:58.706779
+50_000_000

# 2017-12-01 16:51:57.622202
+import tensorflow as tf

# 2017-12-01 16:52:10.158606
+tfe.enable_eager_execution()

# 2017-12-01 16:52:14.326528
+a = tf.random_uniform([2, 2])

# 2017-12-01 16:52:21.210921
+b = tf.random_uniform([1])

# 2017-12-01 16:52:22.004426
+a

# 2017-12-01 16:52:22.156705
+b

# 2017-12-01 16:52:23.063629
+a + b

# 2017-12-01 16:52:42.541121
+c = tf.random_uniform([1, 1])

# 2017-12-01 16:52:43.350149
+c

# 2017-12-01 16:52:50.915264
+a + b

# 2017-12-01 16:52:51.856391
+a + c

# 2017-12-01 16:53:24.476134
+c = tf.random_uniform([1, 2])

# 2017-12-01 16:53:25.091504
+c

# 2017-12-01 16:53:32.957155
+c.numpy

# 2017-12-01 16:53:34.363730
+c.numpy()

# 2017-12-01 16:53:42.931117
+c.numpy().shape

# 2017-12-01 16:53:54.405064
+c

# 2017-12-01 16:53:56.023699
+a + b

# 2017-12-01 16:53:56.984760
+a + c

# 2017-12-01 16:54:01.813584
+a

# 2017-12-01 17:02:22.893239
+inputs = tf.placeholder(tf.float32, [None, 10])

# 2017-12-01 17:02:46.842719
+inputs = tf.placeholder(tf.float32, [10])

# 2017-12-01 17:03:01.542929
+dense = tf.layers.dense(inputs, 1)

# 2017-12-01 17:03:09.575404
+inputs = tf.placeholder(tf.float32, [None,10])

# 2017-12-01 17:03:10.555834
+dense = tf.layers.dense(inputs, 1)

# 2017-12-01 17:03:25.622073
+sess = tf.InteractiveSession()

# 2017-12-01 17:03:45.569407
+sess.run(sess, feed_dict={inputs: tf.random_normal(32, 10)})

# 2017-12-01 17:04:39.486257
+sess.run(sess, feed_dict={inputs: np.random.rand(32, 10)})

# 2017-12-01 17:04:48.630076
+sess.run(inputs, feed_dict={inputs: np.random.rand(32, 10)})

# 2017-12-01 17:04:51.325339
+hoge = sess.run(inputs, feed_dict={inputs: np.random.rand(32, 10)})

# 2017-12-01 17:04:52.407582
+hoge.shape

# 2017-12-01 17:05:09.801812
+sess.run(tf.global_variables_initializer())

# 2017-12-01 17:05:14.191451
+sess.run(inputs, feed_dict={inputs: np.random.rand(32, 10)})

# 2017-12-01 17:05:19.444861
+sess.run(dense, feed_dict={inputs: np.random.rand(32, 10)})

# 2017-12-01 17:07:49.816494
+tf.get_default_graph

# 2017-12-01 17:07:50.725624
+tf.get_default_graph()

# 2017-12-01 17:12:26.042984
+x1 = tf.Variable(1)

# 2017-12-01 17:12:32.036161
+x1.graph is tf.get_default_graph()

# 2017-12-01 17:12:39.348530
+graph = tf.Graph()

# 2017-12-01 17:13:05.519840
+with graph.as_default():
+    x2 = tf.Variable(2)

# 2017-12-01 17:13:09.898193
+x2.graph is graph

# 2017-12-01 17:13:15.854640
+graph = tf.Graph()

# 2017-12-01 17:13:20.925617
+with graph.as_default():
+    x2 = tf.Variable(2)
+    x3 = tf.Variable(3)

# 2017-12-01 17:13:26.275983
+x2.graph is x3.graph

# 2017-12-01 17:13:38.672729
+x2.graph is tf.get_default_graph()

# 2017-12-01 17:13:46.449207
+x2.graph is x1.graph

# 2017-12-01 17:15:37.611546
+sess = tf.InteractiveSession()

# 2017-12-01 17:15:40.512079
+sess.graph

# 2017-12-01 17:15:50.860347
+sess.graph is tf.get_default_graph()

# 2017-12-01 17:15:58.364573
+sess.graph is x2.graph

# 2017-12-01 18:49:20.674865
+ssh

# 2017-12-01 22:04:22.407643
+import zipline.algorithm as alg

# 2017-12-01 22:06:49.074233
+import zipline as zp

# 2017-12-01 22:07:11.693682
+import pytz
+from datetime import datetime
+import zipline as zp
+
+start = datetime(1990, 1, 1, 0, 0, 0, 0, pytz.utc)
+end = datetime(2002, 1, 1, 0, 0, 0, 0, pytz.utc)
+data = zp.utils.factory.load_from_yahoo(stocks=['AAPL'], indexes={}, start=start,
+                                        end=end, adjusted=False)
+
+class DualMovingAverage(zp.TradingAlgorithm):
+    def initialize(self, short_window=100, long_window=400):
+        self.add_transform(zp.transforms.MovingAverage, 'short_mavg', ['price'],
+                           window_length=short_window)
+
+        self.add_transform(zp.transforms.MovingAverage, 'long_mavg', ['price'],
+                           window_length=long_window)
+        self.invested = False
+
+    def handle_data(self, data):
+        short_mavg = data['AAPL'].short_mavg['price']
+        long_mavg = data['AAPL'].long_mavg['price']
+        buy = False
+        sell = False
+
+        if short_mavg > long_mavg and not self.invested:
+            self.order('AAPL', 100)
+            self.invested = True
+            buy = True
+        elif short_mavg < long_mavg and self.invested:
+            self.order('AAPL', -100)
+            self.invested = False
+            sell = True
+
+        self.record(short_mavg=short_mavg,
+                    long_mavg=long_mavg,
+                    buy=buy,
+                    sell=sell)
+
+
+import matplotlib.pyplot as plt
+dma = DualMovingAverage()
+perf = dma.run(data)
+fig = plt.figure()
+ax1 = fig.add_subplot(211,  ylabel='Price in $')
+data['AAPL'].plot(ax=ax1, color='r', lw=2.)
+perf[['short_mavg', 'long_mavg']].plot(ax=ax1, lw=2.)
+
+ax1.plot(perf.ix[perf.buy].index, perf.short_mavg[perf.buy],
+         '^', markersize=10, color='m')
+ax1.plot(perf.ix[perf.sell].index, perf.short_mavg[perf.sell],
+         'v', markersize=10, color='k')
+
+ax2 = fig.add_subplot(212, ylabel='Portfolio value in $')
+perf.portfolio_value.plot(ax=ax2, lw=2.)
+
+ax2.plot(perf.ix[perf.buy].index, perf.portfolio_value[perf.buy],
+         '^', markersize=10, color='m')
+ax2.plot(perf.ix[perf.sell].index, perf.portfolio_value[perf.sell],
+         'v', markersize=10, color='k')
+
+plt.legend(loc=0)
+plt.gcf().set_size_inches(14, 10)
+plt.show()

# 2017-12-01 22:13:56.949419
+from zaifapi import *

# 2017-12-01 22:15:10.823793
+zaif_public = ZaifPublicApi()

# 2017-12-01 22:15:28.821740
+btc_jpy = int(zaif_public.last_price('btc_jpy')['last_price'])

# 2017-12-01 22:15:32.078309
+bt_jpy

# 2017-12-01 22:15:34.279408
+btc_jpy

# 2017-12-01 22:15:44.704966
+zaif_public.last_price('btc_jpy')

# 2017-12-01 22:15:53.338304
+zaif_public.currency_pairs

# 2017-12-01 22:15:54.289046
+zaif_public.currency_pairs()

# 2017-12-01 22:15:58.264741
+zaif_public.currency_pairs('btc')

# 2017-12-01 22:16:01.467094
+zaif_public.currency_pairs('btc_jpy')

# 2017-12-01 22:22:17.642849
+zaif_public.currencies('btc_jpy')

# 2017-12-01 22:22:26.900786
+zaif_public.last_price('btc_jpy')

# 2017-12-02 12:01:27.148443
+zaif_public.ticker('btc_jpy')

# 2017-12-02 12:03:05.970750
+jkl;

# 2017-12-02 22:11:19.076713
+df = pd.read_csv('./exp0.0001_120_linear_0.csv')

# 2017-12-02 22:11:21.455124
+df.plot()

# 2017-12-02 22:11:26.302160
+plt.show()

# 2017-12-02 22:11:30.471121
+import matplotlib.pyplot as plt

# 2017-12-02 22:11:31.819279
+plt.show()

# 2017-12-02 22:12:12.439098
+df = pd.read_csv('./exp0.005_150_linear_4.csv')

# 2017-12-02 22:12:15.289914
+df.pf

# 2017-12-02 22:12:18.462364
+df.plot()

# 2017-12-02 22:12:20.175170
+plt.show()

# 2017-12-02 22:13:15.583492
+df2 = pd.DataFrame()

# 2017-12-02 22:13:22.622326
+df2.merge(df)

# 2017-12-02 22:16:07.443339
+dfs = []

# 2017-12-02 22:16:48.155770
+for i in range(5):
+    dfs.append(pd.read_csv('exp0.0005_150_power_{0}.csv'.format(i)))

# 2017-12-02 22:16:54.515128
+dfs[0].head()

# 2017-12-02 22:17:06.915758
+pd.concat(dfs, axis=1)

# 2017-12-02 22:17:14.540974
+pd.concat(dfs, axis=1).head()

# 2017-12-02 22:17:21.998172
+pd.concat(dfs, axis=10).head()

# 2017-12-02 22:17:24.107660
+pd.concat(dfs, axis=0).head()

# 2017-12-02 22:17:34.051604
+dfs[0].head()

# 2017-12-02 22:17:49.731600
+dfs[5].tail()

# 2017-12-02 22:17:52.433893
+dfs[4].tail()

# 2017-12-02 22:18:00.598970
+pd.concat(dfs, axis=0).tail()

# 2017-12-02 22:18:26.700248
+pd.concat(dfs, axis=0).mean()

# 2017-12-02 22:18:32.921295
+pd.concat(dfs, axis=0).plot()

# 2017-12-02 22:18:34.618604
+plt.show()

# 2017-12-02 22:18:48.641062
+pd.concat(dfs, axis=0).columns

# 2017-12-02 22:18:55.765380
+len(pd.concat(dfs, axis=0))

# 2017-12-02 22:19:01.098074
+len(pd.concat(dfs, axis=1))

# 2017-12-02 22:19:11.956865
+pd.concat(dfs, axis=1).columns()

# 2017-12-02 22:19:13.303465
+pd.concat(dfs, axis=1).columns

# 2017-12-02 22:19:16.807058
+pd.concat(dfs, axis=0).columns

# 2017-12-02 22:19:45.935304
+pd.concat(dfs, axis=1).columns

# 2017-12-02 22:21:30.131668
+pd.concat(dfs, axis=1, keys=['Min', 'Avg', 'Max'])

# 2017-12-02 22:21:38.923806
+pd.concat(dfs, axis=1, keys=['Min', 'Avg', 'Max']).mean()

# 2017-12-02 22:21:49.700996
+pd.concat(dfs, axis=1, keys=['Min', 'Avg', 'Max']).head()

# 2017-12-02 22:22:11.036104
+pd.concat(dfs, axis=1).head()

# 2017-12-02 22:23:31.574031
+pd.concat(dfs, axis=1).groupby(['Min'])

# 2017-12-02 22:23:37.410107
+pd.concat(dfs, axis=1).groupby(['Min', 'Avg'])

# 2017-12-02 22:23:47.531137
+pd.concat(dfs, axis=1).groupby()

# 2017-12-02 22:24:59.662336
+pd.concat(dfs, axis=1).head()

# 2017-12-02 22:25:27.984180
+pd.concat(dfs, axis=1)['Min']

# 2017-12-02 22:25:30.543750
+pd.concat(dfs, axis=1)['Min'].head()

# 2017-12-02 22:25:48.230990
+pd.concat(dfs, axis=1)['Min'].mean(axis=1)

# 2017-12-02 22:25:50.441947
+pd.concat(dfs, axis=1)['Min'].mean(axis=1).head()

# 2017-12-02 22:26:44.953680
+pd.concat(dfs, axis=1)['Min', 'Max'].mean(axis=1).head()

# 2017-12-02 22:26:49.307126
+pd.concat(dfs, axis=1)[['Min', 'Max']].mean(axis=1).head()

# 2017-12-02 22:26:54.254014
+pd.concat(dfs, axis=1)[['Min']].mean(axis=1).head()

# 2017-12-02 22:27:08.667979
+pd.concat(dfs, axis=1)['Min'].mean(axis=1).head()

# 2017-12-02 22:27:24.986090
+pd.concat(dfs, axis=1)[['Min']].head()

# 2017-12-02 22:28:40.418164
+pd.concat(dfs, axis=1).groupby()

# 2017-12-02 22:28:51.936976
+help(pd.concat(dfs, axis=1).groupby)

# 2017-12-02 22:30:16.849881
+pd.concat(dfs, axis=1).T

# 2017-12-02 22:30:20.628528
+pd.concat(dfs, axis=1).T.head()

# 2017-12-02 22:30:32.690709
+pd.concat(dfs, axis=1).T.groupby('Min')

# 2017-12-02 22:30:36.198411
+pd.concat(dfs, axis=1).T.groupby(['Min'])

# 2017-12-02 22:30:46.510540
+pd.concat(dfs, axis=1).head()

# 2017-12-02 22:31:26.331510
+df = pd.DataFrame({
+                       "date":[datetime.date(2012,x,1) for x in range(1,11)], 
+                       "returns":0.05*np.random.randn(10), 
+                       "dummy":np.repeat(1,10) 
+                      })

# 2017-12-02 22:31:34.852292
+import datetime

# 2017-12-02 22:31:36.581202
+df = pd.DataFrame({
+                       "date":[datetime.date(2012,x,1) for x in range(1,11)], 
+                       "returns":0.05*np.random.randn(10), 
+                       "dummy":np.repeat(1,10) 
+                      })

# 2017-12-02 22:31:40.023821
+df.head()

# 2017-12-02 22:32:13.867386
+df.groupby("dummy").agg({"returns": [np.mean, np.sum]})

# 2017-12-02 22:33:46.510181
+cdfs = pd.concat(dfs, axis=1)

# 2017-12-02 22:34:02.404910
+cdfs.groupby(by=cdfs.columns, axis=1)

# 2017-12-02 22:34:06.969353
+cdfs.groupby(by=cdfs.columns, axis=1).head()

# 2017-12-02 22:34:17.136802
+cdfs.groupby(by=cdfs.columns, axis=1).mean()

# 2017-12-02 22:34:19.537128
+cdfs.groupby(by=cdfs.columns, axis=1).mean().head()

# 2017-12-02 22:35:17.514466
+df = pd.DataFrame([['001', 'a', 1, 10, 100, 1000], ['002', 'b', 2, 20, 200, 2000]], columns=['id', 'name', 'c1', 'c2', 'c2', 'c3'], index=list('AB'))

# 2017-12-02 22:35:20.209361
+df

# 2017-12-02 22:35:37.169510
+df = df.set_index(['id', 'name'])

# 2017-12-02 22:35:39.082116
+df

# 2017-12-02 22:36:09.271587
+df = df.groupby(by=df.columns, axis=1).mean()

# 2017-12-02 22:36:16.538761
+df

# 2017-12-02 22:36:31.837243
+df.reset_index(inplace=True)

# 2017-12-02 22:36:33.444516
+df

# 2017-12-02 22:36:59.610618
+cdfs.groupby(by=cdfs.columns, axis=1).mean().head()

# 2017-12-02 22:38:28.371916
+cdfs.groupby(by=cdfs.columns, axis=1).mean().plot()

# 2017-12-02 22:38:30.669166
+plt.show()

# 2017-12-02 22:38:57.718859
+cdfs = pd.concat(dfs, axis=1)

# 2017-12-02 23:19:06.917113
+hoge = "{a}: {b}"

# 2017-12-02 23:19:13.981500
+hoge.format(a=10, b=20)

# 2017-12-02 23:21:01.201130
+cdfs = pd.concat(dfs, axis=1)

# 2017-12-02 23:31:06.347872
+import matplotlib.pyplot as plt

# 2017-12-02 23:31:57.221362
+help(plt.savefig)

# 2017-12-03 00:11:50.578055
+df = pd.read_csv('./test.csv')

# 2017-12-03 00:11:53.093869
+df.plot()

# 2017-12-03 00:11:55.913924
+import matplotlib.pyplot as plt

# 2017-12-03 00:11:57.185777
+plt.show()

# 2017-12-03 00:19:34.625094
+import matplotlib.pyplot as plt

# 2017-12-03 00:19:41.925451
+df = pd.read_csv('./test.csv')

# 2017-12-03 00:19:44.949159
+df.plot()

# 2017-12-03 00:19:46.660673
+plt.show()

# 2017-12-03 00:26:59.661947
+df = pd.read_csv('./test.csv')

# 2017-12-03 00:27:02.180602
+df.plot()

# 2017-12-03 00:27:06.784072
+import matplotlib.pyplot as plt

# 2017-12-03 00:27:07.871674
+plt.show()

# 2017-12-03 03:24:01.112392
+ls

# 2017-12-05 04:41:31.688394
+print("abc", file=sys.stderr)   # 標準エラー出力

# 2017-12-05 05:19:46.100198
+import matplotlib.pyplot as plt

# 2017-12-05 05:19:51.199506
+df = pd.read_csv('./test.csv')

# 2017-12-05 05:19:52.594532
+df.plot()

# 2017-12-05 05:19:54.241504
+plt.show()

# 2017-12-05 05:20:03.815503
+df

# 2017-12-05 05:20:12.646806
+df.head()

# 2017-12-05 05:20:56.880373
+df = pd.read_csv('./test.csv')

# 2017-12-05 05:20:59.081513
+df.plot()

# 2017-12-05 05:21:00.244152
+plt.show()

# 2017-12-05 05:43:06.631506
+df = pd.read_csv('./exp0.005_30_linear_4.csv')

# 2017-12-05 05:45:41.378063
+df = pd.read_csv('./exp0.05_30_linear_0.csv')

# 2017-12-05 05:45:57.347252
+df = pd.read_csv('./exp0.05_dense_30_linear_0.csv')

# 2017-12-05 05:46:05.194402
+df.head()

# 2017-12-05 05:46:08.616740
+df.tail()

# 2017-12-05 05:46:18.693085
+df.head()

# 2017-12-05 05:46:36.180514
+df[:, ['Min', 'Avg', 'Max']].head()

# 2017-12-05 05:46:38.678930
+df[:, ['Min', 'Avg', 'Max']]

# 2017-12-05 05:46:40.839918
+df[['Min', 'Avg', 'Max']]

# 2017-12-05 05:46:44.559446
+df[['Min', 'Avg', 'Max']].plot()

# 2017-12-05 05:46:45.935388
+plt.show()

# 2017-12-05 05:59:06.694129
+df = pd.read_csv('./exp0.05_dense_30_linear_0.csv')

# 2017-12-05 05:59:12.260256
+df = pd.read_csv('./data/exp0.05_dense_30_linear_0.csv')

# 2017-12-05 05:59:15.668907
+df.tail()

# 2017-12-05 05:59:34.620002
+df = pd.read_csv('./data/exp0.05_dense_30_linear_1.csv')

# 2017-12-05 05:59:36.250063
+df.tail()

# 2017-12-05 05:59:40.261286
+df = pd.read_csv('./data/exp0.05_dense_30_linear_2.csv')

# 2017-12-05 05:59:41.755015
+df.tail()

# 2017-12-05 05:59:44.079388
+df = pd.read_csv('./data/exp0.05_dense_30_linear_3.csv')

# 2017-12-05 05:59:46.123322
+df.tail()

# 2017-12-05 05:59:49.010787
+df.plot()

# 2017-12-05 05:59:51.613201
+plt.show()

# 2017-12-05 06:00:20.027046
+df[-1, ['Solved']]

# 2017-12-05 06:00:22.716466
+df[:, ['Solved']]

# 2017-12-05 06:00:25.007747
+df[['Solved']]

# 2017-12-05 06:00:26.776067
+df[['Solved']][-1]

# 2017-12-05 06:00:39.003828
+df[['Solved']].ix

# 2017-12-05 06:00:43.395190
+df[['Solved']].ilox

# 2017-12-05 06:00:44.682801
+df[['Solved']].iloc

# 2017-12-05 06:00:46.298923
+df[['Solved']].iloc[-1]

# 2017-12-05 06:01:00.000003
+df.iloc[-1]

# 2017-12-05 06:01:04.792476
+df.iloc[-1]['Solve']

# 2017-12-05 06:01:07.478091
+df.iloc[-1]['Solved']

# 2017-12-05 06:42:02.825780
+import pandas as pd

# 2017-12-05 06:42:24.869420
+from .math import mean_std

# 2017-12-05 06:44:00.144542
+df = pd.read_csv('./data/exp0.05_dense_30_linear_3.csv')

# 2017-12-05 06:44:01.374620
+df

# 2017-12-05 06:45:22.524641
+from .math import mean_std

# 2017-12-05 06:45:45.774987
+from math import mean_std

# 2017-12-05 06:46:09.809734
+from _math import mean_std

# 2017-12-05 08:14:41.612479
+from be_solved import find_solved

# 2017-12-05 08:14:44.116051
+find_solved()

# 2017-12-05 08:15:43.991140
+from be_solved import find_solved

# 2017-12-05 08:15:44.975331
+find_solved()

# 2017-12-05 08:15:57.676159
+from be_solved import find_solved

# 2017-12-05 08:15:58.654618
+find_solved()

# 2017-12-05 08:18:38.856229
+ls

# 2017-12-05 08:18:57.781182
+from be_solved import find_solved

# 2017-12-05 08:19:00.931676
+find_solved()

# 2017-12-05 08:42:19.492450
+from meanstd import mean_std

# 2017-12-05 08:42:21.695886
+mean_std()

# 2017-12-05 08:42:38.119717
+from meanstd import mean_std

# 2017-12-05 08:42:39.065254
+mean_std()

# 2017-12-05 08:42:50.265182
+from meanstd import mean_std

# 2017-12-05 08:42:50.949336
+mean_std()

# 2017-12-05 08:42:59.850896
+from meanstd import mean_std

# 2017-12-05 08:43:00.724930
+mean_std()

# 2017-12-05 14:44:36.869644
+import numpy as np

# 2017-12-05 14:44:54.124490
+np.random.randint(20, 60)

# 2017-12-05 23:05:03.077875
+pd.read_csv('./data/exp0.0001_dense_120_power_2.csv')[['Max']].iloc[-1]

# 2017-12-05 23:05:09.194853
+df = pd.read_csv('./data/exp0.0001_dense_120_power_2.csv')[['Max']]

# 2017-12-05 23:05:13.674470
+df.tail()

# 2017-12-05 23:06:09.178305
+df.index

# 2017-12-05 23:06:18.816488
+len(df)

# 2017-12-05 23:06:49.808890
+np.mean([20, 30, 10])

# 2017-12-05 23:06:53.213432
+np.mean([20, 3, 10])

# 2017-12-06 01:35:11.389804
+import pandas as pd

# 2017-12-06 01:35:19.670136
+df=  pd.read_csv('./vio_150_Sparse_400_175.txt')

# 2017-12-06 01:35:25.537474
+import matplotlib.pyplot as plt

# 2017-12-06 01:35:29.016352
+df.plot()

# 2017-12-06 01:35:39.324113
+plt.show()

# 2017-12-06 02:01:56.927721
+import pandas as pd

# 2017-12-06 02:02:17.284348
+df = pd.read_csv('./vio_30_dense_400_175.txt_0.csv')

# 2017-12-06 02:02:24.747352
+df.iloc[-1]

# 2017-12-06 02:02:26.807685
+df.iloc[-1].value

# 2017-12-06 02:02:30.905369
+df.iloc[-1].index

# 2017-12-06 02:02:39.897244
+int(df.iloc[-1])

# 2017-12-06 02:02:43.099981
+int(df.iloc[-1].index)

# 2017-12-06 02:02:49.209752
+df.iloc[-1].index

# 2017-12-06 02:02:50.592396
+df.iloc[-1].index.value

# 2017-12-06 02:02:58.474391
+df.iloc[-1].index[0]

# 2017-12-06 02:03:02.538390
+int(df.iloc[-1].index[0])

# 2017-12-06 02:03:15.983972
+df

# 2017-12-06 02:03:20.016312
+int(df.iloc[-1].index[0])

# 2017-12-06 02:03:32.502790
+df

# 2017-12-06 02:03:35.192103
+df.tail()

# 2017-12-06 02:03:37.914662
+df.index

# 2017-12-06 02:03:47.272871
+df.iloc[-1]

# 2017-12-06 02:03:49.464711
+df.iloc[-2]

# 2017-12-06 02:03:57.314166
+df.iloc[-2].name

# 2017-12-06 02:04:01.867664
+df.iloc[-2].index

# 2017-12-06 02:04:04.224718
+df.iloc[-2].name

# 2017-12-06 02:04:08.022827
+df.iloc[-2].column

# 2017-12-06 02:04:08.940663
+df.iloc[-2].columns

# 2017-12-06 02:04:11.344112
+df.iloc[-2]

# 2017-12-06 02:04:13.384976
+df.iloc[-1]

# 2017-12-06 02:04:52.102722
+len(df)

# 2017-12-06 02:07:13.755752
+import pandas as pd

# 2017-12-06 02:07:16.063796
+df = pd.read_csv('./vio_30_dense_400_175.txt_0.csv')

# 2017-12-06 02:07:17.743413
+df.iloc[-1]

# 2017-12-06 02:07:20.249860
+df.iloc[-1].index[0]

# 2017-12-06 02:07:23.049049
+df.iloc[-1].values

# 2017-12-06 02:07:30.736992
+df.iloc[-1].values == 0

# 2017-12-06 02:07:37.646444
+if df.iloc[-1].values == 0:
+    print("HOGE")

# 2017-12-06 02:07:40.892635
+a = []

# 2017-12-06 23:35:53.346258
+tfe.enable_eager_execution()

# 2017-12-06 23:35:58.443138
+a = tf.random_uniform([2, 2])

# 2017-12-06 23:36:08.710715
+s, u, v = tf.svd(a)

# 2017-12-06 23:36:09.682359
+s

# 2017-12-06 23:36:11.842607
+u

# 2017-12-06 23:36:12.098501
+v

# 2017-12-06 23:36:31.990007
+s_ = tf.svd(a, compute_uv=False)

# 2017-12-06 23:36:33.390117
+s_

# 2017-12-06 23:36:33.707810
+s

# 2017-12-06 23:38:35.035258
+tf.matrix_inverse(a)

# 2017-12-07 01:11:27.048797
+a = tf.random_uniform([7850, 7821])

# 2017-12-07 01:11:33.575782
+tf.matrix_inverse(a)

# 2017-12-07 05:24:50.593661
+from tensorflow.python.training import optimizer

# 2017-12-07 05:25:06.654193
+class Opt(optimizer.Optimizer):
+    pass

# 2017-12-07 05:25:08.958026
+Opt()

# 2017-12-07 05:25:27.150493
+Opt(use_locking=True, name="Fuck")

# 2017-12-07 05:34:33.835541
+np.show_config()

# 2017-12-07 05:40:06.324961
+from tensorflow.python.training import optimizer

# 2017-12-07 05:42:22.771789
+class Opt(optimizer.Optimizer):
+    def __init__(self, learning_rate, use_locking=False, name="Fuck"):
+        super(Opt, self).__init__(use_locking, name)
+        self._learning_rate = learning_rate
+    def minimize():
+        print("FUCK")
+    def compute_gradients(loss):
+        print(loss)

# 2017-12-07 05:42:26.205574
+a = Opt()

# 2017-12-07 05:42:30.820693
+a = Opt(10)

# 2017-12-07 05:42:31.857892
+a

# 2017-12-07 05:42:38.959554
+opt = Opt(10)

# 2017-12-07 05:43:00.903390
+opt.minimize(loss)

# 2017-12-08 17:46:20.074447
+import scipy.io.wavfile  as wio

# 2017-12-08 17:46:26.569381
+import matplotlib.pyplot as plt

# 2017-12-08 17:46:38.596590
+rate, data = wio.read("./20171026080602_ope_330292.wav")

# 2017-12-08 17:49:10.446051
+import soundfile as sf

# 2017-12-08 17:49:20.488304
+data, sample_rate = sf.read('./20171026080602_ope_330292.wav')

# 2017-12-08 17:49:23.636433
+data

# 2017-12-08 17:49:26.702022
+sample_rate

# 2017-12-08 17:49:29.279046
+data

# 2017-12-08 17:49:37.672228
+data.shape

# 2017-12-08 17:49:51.638775
+sample_rate

# 2017-12-08 17:49:55.470713
+data.shape

# 2017-12-08 17:52:47.899285
+plt.specgram(data, Fx=sample_rate)

# 2017-12-08 17:53:15.917753
+data.dtype

# 2017-12-08 17:53:29.748816
+data.shape

# 2017-12-08 17:53:34.038180
+data.sum()

# 2017-12-08 17:53:39.660029
+sample_rate.shape

# 2017-12-08 17:53:42.682233
+sample_rate

# 2017-12-08 17:53:46.573429
+plt.specgram(data, Fx=sample_rate)

# 2017-12-08 17:54:18.326050
+plt.specgram(data, Fx=2)

# 2017-12-08 17:55:27.745609
+plt.specgram(data, Fx=2, NFFT=256, Fs=2, noverlap=0, window=np.hamming(256))

# 2017-12-08 17:55:41.299960
+plt.specgram(data, NFFT=256, Fs=2, noverlap=0, window=np.hamming(256))

# 2017-12-08 17:55:46.083289
+plt.show()

# 2017-12-08 17:55:58.509526
+plt.specgram(data, NFFT=256, Fs=2, noverlap=0, window=np.hamming(256))

# 2017-12-08 17:55:59.817900
+plt.show()

# 2017-12-08 18:02:03.719531
+sample_rate

# 2017-12-08 18:02:14.541475
+plt.specgram(data, NFFT=256, Fs=sample_rate, noverlap=0, window=np.hamming(256))

# 2017-12-08 18:02:19.637158
+plt.show()

# 2017-12-08 18:43:19.195217
+tfe.enable_eager_execution()

# 2017-12-08 18:43:31.729941
+a = tf.random_uniform([100, 100])

# 2017-12-08 18:43:35.702998
+a.shape

# 2017-12-08 18:43:36.193366
+a

# 2017-12-08 18:43:41.203001
+tf.matrix_inverse(a)

# 2017-12-08 18:43:53.056215
+a = tf.random_uniform([1000, 1000])

# 2017-12-08 18:43:54.928623
+tf.matrix_inverse(a)

# 2017-12-08 18:44:07.940984
+a = tf.random_uniform([10000, 10000])

# 2017-12-08 18:44:12.103274
+tf.matrix_inverse(a)

# 2017-12-08 18:45:59.117372
+tfe.enable_eager_execution()

# 2017-12-08 18:46:39.646190
+a = tf.random_uniform([10, 5])

# 2017-12-08 18:46:46.298622
+s, u, v = tf.svd(a)

# 2017-12-08 18:46:50.249103
+s.shape

# 2017-12-08 18:46:53.507762
+u.shape

# 2017-12-08 18:46:58.504522
+v.shape

# 2017-12-08 18:47:39.361507
+u

# 2017-12-08 18:48:16.302595
+tf.matmul(tf.transpose(u), v)

# 2017-12-08 18:48:29.863145
+tf.matmul(tf.transpose(u), u)

# 2017-12-08 18:50:27.117141
+tf.eye(5) * s

# 2017-12-08 18:50:30.276920
+s

# 2017-12-08 18:50:35.265550
+S = tf.eye(5) * s

# 2017-12-08 18:51:30.908817
+tf.matmul(tf.matmul(tf.transpose(v), tf.matrix_inverse(S)), tf.transpose(u))

# 2017-12-08 18:51:34.721797
+B = tf.matmul(tf.matmul(tf.transpose(v), tf.matrix_inverse(S)), tf.transpose(u))

# 2017-12-08 18:51:36.537901
+A

# 2017-12-08 18:51:38.149567
+a

# 2017-12-08 18:51:40.679896
+B

# 2017-12-08 18:51:55.013299
+a.numpy

# 2017-12-08 18:51:59.736100
+Q = a.numpy

# 2017-12-08 18:52:03.927219
+b

# 2017-12-08 18:52:04.588681
+B

# 2017-12-08 18:52:12.106153
+W = B.numpy

# 2017-12-08 18:52:13.040800
+W

# 2017-12-08 18:52:23.550519
+np.testing.assert_almost_equal(Q, W)

# 2017-12-08 18:52:29.985967
+Q

# 2017-12-08 18:52:46.959561
+b = tf.matmul(tf.matmul(tf.transpose(v), tf.matrix_inverse(S)), tf.transpose(u))

# 2017-12-08 18:52:49.709337
+b.numpy()

# 2017-12-08 18:52:54.669059
+a.numpy()

# 2017-12-08 18:52:58.511770
+A = a.numpy()

# 2017-12-08 18:53:01.577147
+B = b.numpy()

# 2017-12-08 18:53:05.749135
+np.testing.assert_almost_equal(A, B)

# 2017-12-08 18:53:15.700429
+np.testing.assert_almost_equal(A, B.T)

# 2017-12-08 18:53:50.952410
+A.shape

# 2017-12-08 18:53:52.921102
+B.shape

# 2017-12-08 18:53:57.069274
+np.testing.assert_almost_equal(A, B.T)

# 2017-12-08 18:56:10.552966
+A**-1

# 2017-12-08 18:56:15.064729
+(A**-1).shape

# 2017-12-08 18:56:18.222483
+B.shape

# 2017-12-08 18:56:25.111622
+np.testing.assert_almost_equal(A**-1, B.T)

# 2017-12-08 18:56:40.283946
+A**-1 * B

# 2017-12-08 18:56:51.503173
+np.mat(A**-1,  B)

# 2017-12-08 18:56:53.924126
+np.mat(A**-1,  B.T)

# 2017-12-08 18:56:59.440024
+np.mat(A, B)

# 2017-12-08 18:57:04.252671
+A * B

# 2017-12-08 18:57:08.126463
+A.shape

# 2017-12-08 18:57:09.160087
+B.shape

# 2017-12-08 18:57:16.297441
+np.multiply(A, B)

# 2017-12-08 18:57:19.539107
+A

# 2017-12-08 18:57:22.898115
+B

# 2017-12-08 18:57:26.178438
+A.shape

# 2017-12-08 18:57:27.697341
+B.shape

# 2017-12-08 18:57:31.125158
+A * B

# 2017-12-08 18:57:36.672269
+A * B.T

# 2017-12-08 18:57:40.482637
+(A * B.T).shape

# 2017-12-09 04:33:22.386914
+tfe.enable_eager_execution()

# 2017-12-09 04:33:34.406790
+x=  tf.random_normal([100, 784])

# 2017-12-09 04:33:39.644120
+x =  tf.random_normal([100, 784])

# 2017-12-09 04:33:42.088405
+x = tf.random_normal([100, 784])

# 2017-12-09 04:33:56.989867
+net = tf.layers.dense(x, 10)

# 2017-12-09 04:34:01.472056
+net

# 2017-12-09 04:34:03.761526
+net.shape

# 2017-12-09 04:36:02.623544
+l=tf.layers.dense(x,300,name='ip1')
+with tf.variable_scope('ip1', reuse=True):
+    w = tf.get_variable('kernel')

# 2017-12-09 04:36:31.864701
+x.consumers

# 2017-12-09 04:36:41.919371
+x

# 2017-12-09 04:38:21.513171
+net = tf.layers.dense(x, 10, name='yui')

# 2017-12-09 04:38:31.471651
+tf.get_variable(name='yui')

# 2017-12-09 04:38:41.122567
+tf.get_variable()

# 2017-12-09 04:38:55.022546
+tf.trainable_variables()

# 2017-12-09 04:39:43.637228
+def get_weights():
+  return [v for v in tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES) if v.name.endswith('weights:0')]

# 2017-12-09 04:39:48.003228
+get_weights()

# 2017-12-09 04:40:05.919927
+x = tf.random_normal([100, 784])

# 2017-12-09 04:40:07.147364
+x

# 2017-12-09 04:40:15.660334
+net = tf.layers.dense(x, 10, name='yui')

# 2017-12-09 04:40:21.370464
+def get_weights():
+  return [v for v in tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES) if v.name.endswith('weights:0')]

# 2017-12-09 04:40:25.875730
+get_weights()

# 2017-12-09 04:40:32.584341
+sess = tf.InteractiveSession()

# 2017-12-09 04:40:40.789934
+sess.run(tf.global_variables_initializer())

# 2017-12-09 04:40:44.786856
+get_weights()

# 2017-12-09 04:40:49.894100
+net

# 2017-12-09 04:40:57.465556
+x

# 2017-12-09 04:41:29.940048
+sess.run(net)

# 2017-12-09 04:41:33.686449
+get_weights()

# 2017-12-09 04:44:28.358811
+tf.Variable(initial_value=tf.truncated_normal_initializer())

# 2017-12-09 04:45:13.505885
+my_int_variable = tf.get_variable("my_int_variable", [1, 2, 3], dtype=tf.int32, 
+  initializer=tf.zeros_initializer)

# 2017-12-09 04:45:15.864516
+my_int_variable

# 2017-12-09 04:45:19.844581
+sess.run(my_int_variable)

# 2017-12-09 04:45:34.713061
+sess.run(tf.global_variables_initializer())

# 2017-12-09 04:45:37.130032
+sess.run(my_int_variable)

# 2017-12-09 04:47:11.079874
+tf.contrib.layers.xavier_initializer

# 2017-12-09 05:02:27.154676
+tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)

# 2017-12-09 05:03:05.638109
+tf.trainable_variables()

# 2017-12-09 05:04:10.306081
+tf.trainable_variables()[0]

# 2017-12-09 05:04:19.001924
+sess.run(tf.trainable_variables()[0])

# 2017-12-09 05:06:11.404085
+tf.trainable_variables()[0]

# 2017-12-09 05:06:48.902894
+net = tf.layers.dense(x, 10, name='yui', reuse=True)

# 2017-12-09 05:06:50.609630
+net

# 2017-12-09 05:07:05.142071
+sess.run(net)

# 2017-12-09 05:07:11.826335
+net = tf.layers.dense(x, 10, name='yuihoge', reuse=True)

# 2017-12-09 05:07:29.334072
+x = tf.random_normal([100, 784])

# 2017-12-09 05:07:32.309104
+net = tf.layers.dense(x, 10, name='yuihoge', reuse=True)

# 2017-12-09 05:08:23.005001
+x = tf.random_normal([4, 2])

# 2017-12-09 05:08:41.969466
+net = tf.layers.dense(x, 10, name='yuihoge')

# 2017-12-09 05:08:51.379599
+net = tf.layers.dense(x, 1, name='yuihoge')

# 2017-12-09 05:09:06.554170
+x = tf.random_normal([4, 2])

# 2017-12-09 05:09:10.867996
+net = tf.layers.dense(x, 1, name='yuihoge')

# 2017-12-09 05:09:21.128863
+tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)

# 2017-12-09 05:09:30.116345
+w = tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)[0]

# 2017-12-09 05:11:08.312491
+w1 = tf.get_variable(w.name, [2, 1]) + tf.random_normal([2, 1])

# 2017-12-09 05:12:16.204135
+w

# 2017-12-09 05:12:27.690806
+w.assign(10)

# 2017-12-09 05:12:53.948764
+w.assign(tf.random_normal(shape=[2, 1]))

# 2017-12-09 05:31:04.007316
+tf.float32

# 2017-12-09 05:34:34.176764
+np.random.normal(size=[3, 2])

# 2017-12-09 06:44:52.049691
+tfe.enable_eager_execution()

# 2017-12-09 06:46:45.526896
+x = tf.random_normal([4, 4])

# 2017-12-09 06:47:11.934113
+tf.norm(x, ord='fro')

# 2017-12-09 06:47:51.598433
+y = tf.random_normal([4, 1])

# 2017-12-09 06:47:52.588064
+y

# 2017-12-09 06:48:02.421569
+tf.norm(y, ord='fro')

# 2017-12-09 06:48:12.788026
+tf.norm(tf.transpose(y), ord='fro')

# 2017-12-09 06:52:21.644461
+a

# 2017-12-09 06:52:23.920923
+x

# 2017-12-09 06:52:31.840322
+tf.reduce_mean(x)

# 2017-12-09 07:01:09.363332
+tf.norm(y, ord='fro', axis=(0, 1))

# 2017-12-09 07:01:12.193456
+y

# 2017-12-09 07:01:18.074475
+tf.norm(y, ord='fro', axis=(0, 0))

# 2017-12-09 07:01:19.688192
+tf.norm(y, ord='fro', axis=(0, 1))

# 2017-12-09 07:01:22.735527
+x

# 2017-12-09 07:01:26.047088
+tf.norm(x, ord='fro', axis=(0, 1))

# 2017-12-09 07:02:59.358195
+tf.square(a)

# 2017-12-09 07:03:03.035045
+tf.square(10)

# 2017-12-09 07:03:13.809868
+tf.norm(tf.square(x), ord='fro', axis=(0, 1))

# 2017-12-09 07:03:54.654979
+tf.norm(tf.square(x), ord='fro', axis=(4, 4))

# 2017-12-09 07:03:57.119433
+tf.norm(tf.square(x), ord='fro', axis=(4, 1))

# 2017-12-09 07:03:59.021693
+tf.norm(tf.square(x), ord='fro', axis=(1, 1))

# 2017-12-09 07:04:01.136317
+tf.norm(tf.square(x), ord='fro', axis=(1, 0))

# 2017-12-09 07:04:05.816283
+tf.norm(tf.square(x), ord='fro', axis=(0, 1))

# 2017-12-09 07:04:14.412019
+tf.norm(tf.square(x), ord='fro', axis=(0, 0))

# 2017-12-09 07:04:16.576273
+tf.norm(tf.square(x), ord='fro', axis=(0, 1))

# 2017-12-09 07:04:22.109312
+tf.norm(tf.square(x), ord='fro', axis=(1, 1))

# 2017-12-09 07:04:24.610872
+tf.norm(tf.square(x), ord='fro', axis=(0, 1))

# 2017-12-09 07:04:46.111975
+q = tf.random_normal([10, 10, 10])

# 2017-12-09 07:04:51.214549
+tf.norm(tf.square(q), ord='fro', axis=(0, 1))

# 2017-12-09 07:04:53.722312
+tf.norm(tf.square(q), ord='fro', axis=(0, 1, 2))

# 2017-12-09 07:04:55.451793
+tf.norm(tf.square(q), ord='fro', axis=(0, 1, 1))

# 2017-12-09 07:04:57.282696
+tf.norm(tf.square(q), ord='fro', axis=(0, 0, 1))

# 2017-12-09 07:04:59.740724
+tf.norm(tf.square(q), ord='fro', axis=(0, 1))

# 2017-12-09 07:05:06.147304
+q.shape

# 2017-12-09 07:05:09.486300
+tf.norm(tf.square(q), ord='fro', axis=(1, 1))

# 2017-12-09 07:05:12.416834
+tf.norm(tf.square(q), ord='fro', axis=(0, 2))

# 2017-12-09 07:05:16.424378
+tf.norm(tf.square(q), ord='fro', axis=(0, 1))

# 2017-12-09 07:05:23.083384
+tf.norm(tf.square(q), ord='fro', axis=(0, 3))

# 2017-12-09 07:05:25.121580
+tf.norm(tf.square(q), ord='fro', axis=(0, 2))

# 2017-12-09 07:05:27.588924
+tf.norm(tf.square(q), ord='fro', axis=(1, 2))

# 2017-12-09 07:05:32.402437
+tf.norm(tf.square(q), ord='fro', axis=(2, 2))

# 2017-12-09 07:05:34.916196
+tf.norm(tf.square(q), ord='fro', axis=(0, 2))

# 2017-12-09 07:05:36.488538
+tf.norm(tf.square(q), ord='fro', axis=(0, 2, 0))

# 2017-12-09 07:05:38.357188
+tf.norm(tf.square(q), ord='fro', axis=(0, 1, 0))

# 2017-12-09 07:05:40.450679
+tf.norm(tf.square(q), ord='fro', axis=(0, 0, 0))

# 2017-12-09 07:05:41.654078
+tf.norm(tf.square(q), ord='fro', axis=(0, 0, 1))

# 2017-12-09 07:05:46.513165
+tf.norm(tf.square(q), ord='fro', axis=(1, 0, 1))

# 2017-12-09 07:05:48.196500
+tf.norm(tf.square(q), ord='fro', axis=(1, 1, 1))

# 2017-12-09 07:05:51.983888
+tf.norm(tf.square(q), ord='fro', axis=())

# 2017-12-09 07:05:53.311378
+tf.norm(tf.square(q), ord='fro', axis=(0))

# 2017-12-09 07:05:55.533767
+tf.norm(tf.square(q), ord='fro', axis=(1))

# 2017-12-09 07:05:57.843829
+tf.norm(tf.square(q), ord='fro', axis=(1, 1))

# 2017-12-09 07:05:59.663437
+tf.norm(tf.square(q), ord='fro', axis=(1, 0))

# 2017-12-09 07:06:06.581157
+tf.norm(tf.square(q), ord='fro', axis=(0, 1))

# 2017-12-09 07:06:14.917999
+tf.norm(tf.square(q), ord='fro', axis=(1, 1))

# 2017-12-09 07:06:18.482374
+tf.norm(tf.square(q), ord='fro', axis=(0, 1))

# 2017-12-09 07:06:22.767700
+tf.norm(tf.square(q), ord='fro', axis=(0, 1, 0))

# 2017-12-09 07:06:42.257753
+tf.norm(tf.square(q), ord='fro', axis=(0, 1))

# 2017-12-09 07:06:43.567114
+tf.norm(tf.square(q), ord='fro', axis=(0, 2))

# 2017-12-09 07:06:47.161556
+tf.norm(tf.square(q), ord='fro', axis=(1, 2))

# 2017-12-09 07:20:16.877052
+'hoge'.endswith('e')

# 2017-12-09 20:30:50.046547
+a = ['a', 'b', 'c']

# 2017-12-09 20:31:10.922984
+for i, j in enumerate(a, start=1):
+    print(i, j)

# 2017-12-09 20:31:17.038577
+for i, j in enumerate(a, start=2):
+    print(i, j)

# 2017-12-09 20:31:24.285066
+for i, j in enumerate(a, start=0):
+    print(i, j)

# 2017-12-09 20:31:30.326099
+for i, j in enumerate(a, start=-1):
+    print(i, j)

# 2017-12-09 20:31:40.376716
+help(enumerate)

# 2017-12-09 20:33:21.826047
+for i, j in enumerate(a[:-1]):
+    print(i, j)

# 2017-12-09 20:33:26.500380
+a

# 2017-12-09 20:33:54.646887
+for i, j in enumerate(reversed(a)[-1]):
+    print(i, j)

# 2017-12-09 20:34:03.638529
+for i, j in enumerate(reversed(a)):
+    print(i, j)

# 2017-12-09 20:34:11.331422
+for i, j in enumerate(reversed(a)[:-1]):
+    print(i, j)

# 2017-12-09 20:34:36.738775
+reverse(a)

# 2017-12-09 20:34:47.021887
+a.reverse

# 2017-12-09 20:34:47.876815
+a.reverse()

# 2017-12-09 20:34:49.757075
+a

# 2017-12-09 21:49:52.955032
+KeyboardInterrupt

# 2017-12-09 23:58:00.416791
+x = tf.random_normal((10, 10))

# 2017-12-09 23:58:02.524463
+y = tf.random_normal((10, 10))

# 2017-12-09 23:58:03.728764
+x

# 2017-12-09 23:58:47.160195
+loss = tf.square(tf.norm(x - y, ord='fro', axis=(0, 1)))

# 2017-12-09 23:58:52.239351
+sess = tf.InteractiveSession()

# 2017-12-09 23:58:55.957412
+sess.run(loss)

# 2017-12-10 01:16:22.124975
+import readchar

# 2017-12-10 01:16:30.973713
+import sys

# 2017-12-10 01:17:09.441932
+while True:
+    kb = readchar.readchar()
+    sys.stdout.write(kb)
+    if kb == 'q':
+        print("Fuck")
+        break

# 2017-12-10 01:17:27.977568
+while True:
+    kb = readchar.readchar()
+    # sys.stdout.write(kb)
+    print(kb)
+    if kb == 'q':
+        print("Fuck")
+        break

# 2017-12-10 02:26:20.738956
+import numpy as np

# 2017-12-10 02:26:36.533280
+A = np.arange(6).reshape((2, 3))

# 2017-12-10 02:26:36.824474
+A

# 2017-12-10 02:27:15.629947
+ta_switch = np.arange(6).reshape((3, 2))

# 2017-12-10 02:27:18.676093
+ta_switch

# 2017-12-10 04:54:49.555053
+with tf.Session() as sess:
+    a = tf.Variable(5., name='a')
+    b = tf.Variable(6., name='b')
+    c = tf.multiply(a, b, name='c')

# 2017-12-10 04:55:59.840154
+with tf.Session() as sess:
+    a = tf.Variable(5., name='a')
+    b = tf.Variable(6., name='b')
+    c = tf.multiply(a, b, name='c')
+    sess.run(tf.global_variables_initializer())
+    print(a.eval())
+    print(b.eval())
+    print(c.eval())
+    tf.train.write_graph(sess.graph_or_graph_def, './models', 'graph.pb', as_text=False)

# 2017-12-10 04:56:13.155037
+with tf.Session() as sess:
+    a = tf.Variable(5., name='a')
+    b = tf.Variable(6., name='b')
+    c = tf.multiply(a, b, name='c')
+    sess.run(tf.global_variables_initializer())
+    print(a.eval())
+    print(b.eval())
+    print(c.eval())
+    tf.train.write_graph(sess.graph_def, './models', 'graph.pb', as_text=False)

# 2017-12-10 05:58:41.643164
+import ctypes
+import numpy as np
+
+def mklVersion():
+    ver = np.zeros(199, dtype=np.uint8)
+    mkl = ctypes.cdll.LoadLibrary("libmkl_rt.so")
+    mkl.MKL_Get_Version_String(ver.ctypes.data_as(ctypes.c_char_p), 198)
+    return ver[ver != 0].tostring()
+
+mklVersion()

# 2017-12-10 06:02:47.801833
+import tensorflow as tf

# 2017-12-10 06:03:15.498232
+import tensorflow.contrib.eager as tfe
+
+tfe.enable_eager_execution()

# 2017-12-10 06:03:19.252607
+a = tf.random_uniform([10, 5])

# 2017-12-10 06:03:33.325135
+tf.reciprocal(a)

# 2017-12-10 06:03:44.688665
+tf.matmul(tf.reciprocal(a), a)

# 2017-12-10 06:03:52.641181
+tf.matmul(tf.reciprocal(a), a.T)

# 2017-12-10 06:03:58.282187
+tf.matmul(tf.reciprocal(a), tf.transpose(a))

# 2017-12-10 06:04:37.591118
+a = tf.random_uniform([10, 5])

# 2017-12-10 06:04:39.719991
+tfe.enable_eager_execution()

# 2017-12-10 06:05:27.673977
+a = tf.random_uniform([10, 5])

# 2017-12-10 06:05:28.961087
+a

# 2017-12-10 06:05:39.342544
+tf.matrix_inverse(a)

# 2017-12-10 06:18:21.333420
+a = tf.random_uniform([10, 10])

# 2017-12-10 06:18:23.043477
+s, u, v = tf.svd(a)

# 2017-12-10 06:18:23.943228
+s

# 2017-12-10 06:18:27.038703
+tfe.enable_eager_execution()

# 2017-12-10 06:18:46.625438
+a = tf.random_uniform([10, 10])

# 2017-12-10 06:18:47.868600
+s, u, v = tf.svd(a)

# 2017-12-10 06:18:48.871355
+s

# 2017-12-10 06:18:53.273363
+u

# 2017-12-10 06:18:55.597822
+v

# 2017-12-10 06:19:03.112713
+tf.matmul(u, v)

# 2017-12-10 06:19:24.529624
+tf.matmul(u, tf.transpose(v))

# 2017-12-10 06:20:07.247136
+v

# 2017-12-10 06:20:09.964998
+tf.matmul(u, tf.transpose(v))

# 2017-12-10 06:20:15.101214
+tf.matmul(u, tf.transpose(v)) - v

# 2017-12-10 06:20:36.237758
+tf.matmul(u, tf.transpose(v)) - 1

# 2017-12-10 06:20:52.904578
+tf.matmul(u, v, transpose_b=True)

# 2017-12-10 06:21:18.062571
+s, u, v = tf.svd(a, full_matrices=True)

# 2017-12-10 06:21:20.934559
+tf.matmul(u, v, transpose_b=True)

# 2017-12-10 06:21:31.341853
+tf.matmul(u, v, transpose_a=True)

# 2017-12-10 06:22:16.833511
+D = tf.diag(s)

# 2017-12-10 06:22:18.352572
+D

# 2017-12-10 06:22:20.415849
+s

# 2017-12-10 06:22:27.743455
+D.numpy()

# 2017-12-10 06:23:14.377318
+tf.reciprocal(s)

# 2017-12-10 06:23:19.948700
+s

# 2017-12-10 06:23:31.229345
+help(tf.reciprocal)

# 2017-12-10 06:23:48.313610
+1 / 0.18017113

# 2017-12-10 06:24:05.853606
+tf.reciprocal(s)

# 2017-12-10 06:24:11.903421
+tf.diag(tf.reciprocal(s))

# 2017-12-10 06:24:21.614503
+tf.transpose(tf.diag(tf.reciprocal(s)))

# 2017-12-10 06:24:26.854171
+tf.diag(tf.reciprocal(s))

# 2017-12-10 06:24:41.979697
+a = tf.random_uniform([10, 5])

# 2017-12-10 06:24:48.337563
+s, u, v = tf.svd(a, full_matrices=True)

# 2017-12-10 06:24:51.502912
+s

# 2017-12-10 06:25:04.069989
+tf.reciprocal(s)

# 2017-12-10 06:25:09.725438
+tf.diag(tf.reciprocal(s))

# 2017-12-10 06:26:34.696270
+A = tf.matmul(v, tf.matmul(tf.diag(tf.reciprocal(s)), u, transpose_b=True))

# 2017-12-10 06:26:59.543225
+tf.diag(tf.reciprocal(s))

# 2017-12-10 06:27:09.012880
+tf.matmuL(tf.diag(tf.reciprocal(s)), u)

# 2017-12-10 06:27:12.356515
+tf.matmul(tf.diag(tf.reciprocal(s)), u)

# 2017-12-10 06:27:18.448854
+tf.matmul(tf.diag(tf.reciprocal(s)), u, transpose_b=True)

# 2017-12-10 06:27:23.365602
+u

# 2017-12-10 06:27:37.313947
+s

# 2017-12-10 06:27:44.128847
+v

# 2017-12-10 06:28:18.767941
+# SVD decomposition
+d, U, V1 = tf.svd(a, full_matrices=True, compute_uv=True)
+# U and V1 are orthogonal matrices; I must be therefore an identity matrix
+I = tf.matmul(U, tf.transpose(V1))
+print("I = ")
+print(sess.run(I))
+
+D = tf.diag(d)
+# S_ = S since S = U*D*tran(V1)
+print("S_ = S = ")
+S_ = tf.matmul(U, tf.matmul(D, tf.transpose(V1)))
+print(sess.run(S_))
+
+# Moore-Penrose pseudo inverse
+# For non-square matrices, padding of m-n zero columns needed (see linear_inv.y)
+D = tf.transpose(tf.diag(np.reciprocal(d)))
+print("pseudo_inv(S) = ")
+S_ = tf.matmul(V1, tf.matmul(D, tf.transpose(U)))
+print(sess.run(S_))

# 2017-12-10 06:34:29.993474
+a = tf.random_uniform([3, 3])

# 2017-12-10 06:34:37.729595
+b = tf.eye((3, 3))

# 2017-12-10 06:34:45.263122
+b = tf.eye(3)

# 2017-12-10 06:34:45.673967
+b

# 2017-12-10 06:34:49.734385
+sess = tf.InteractiveSession()

# 2017-12-10 06:34:59.065496
+sess.run(tf.multiply(a, b))

# 2017-12-10 06:35:00.997224
+b

# 2017-12-10 06:35:07.801264
+sess.run(a)

# 2017-12-10 06:35:14.622973
+sess.run(b)

# 2017-12-10 06:35:26.610463
+sess.run(tf.matmul(a, b))

# 2017-12-10 06:35:33.397879
+a

# 2017-12-10 06:36:59.146551
+tfe.enable_eager_execution()

# 2017-12-10 06:37:02.427792
+a = tf.random_uniform([3, 3])

# 2017-12-10 06:37:02.677810
+a

# 2017-12-10 06:37:08.411923
+b = tf.eye(3)

# 2017-12-10 06:37:13.742961
+tf.multiply(a, b)

# 2017-12-10 06:52:10.246641
+from tensorflow.python.ops import linalg_ops

# 2017-12-10 06:52:21.700460
+linalg_ops.cholesky_solve

# 2017-12-10 06:52:25.568302
+tf.cholesky_solve

# 2017-12-10 06:52:34.473575
+linalg_ops.cholesky_solve

# 2017-12-10 06:52:58.679775
+from tensorflow.python.ops import math_ops

# 2017-12-10 07:37:49.760470
+import tensorflow as tf
+import numpy as np
+
+def body(x):
+    a = tf.random_uniform(shape=[2, 2], dtype=tf.int32, maxval=100)
+    b = tf.constant(np.array([[1, 2], [3, 4]]), dtype=tf.int32)
+    c = a + b
+    return tf.nn.relu(x + c)
+
+def condition(x):
+    return tf.reduce_sum(x) < 100
+
+x = tf.Variable(tf.constant(0, shape=[2, 2]))
+
+with tf.Session():
+    tf.initialize_all_variables().run()
+    result = tf.while_loop(condition, body, [x])
+    print(result.eval())

# 2017-12-10 07:42:35.773573
+t = tf.TensorArray(tf.float32, size=5)

# 2017-12-10 07:42:36.299798
+t

# 2017-12-10 07:51:33.145120
+import tensorflow as tf

# 2017-12-10 07:51:40.175274
+import tensorflow.contrib.eager as tfe
+
+tfe.enable_eager_execution()

# 2017-12-10 07:52:01.360943
+xs = tf.placeholder(tf.float32, shape=[5, 3, 4])

# 2017-12-10 07:52:12.064855
+import tensorflow as tf

# 2017-12-10 07:52:13.665123
+xs = tf.placeholder(tf.float32, shape=[5, 3, 4])

# 2017-12-10 07:52:21.030166
+tf.unstack(xs)

# 2017-12-10 07:52:28.750012
+from pprint import pprint

# 2017-12-10 07:52:32.304743
+pprint(tf.unstack(xs))

# 2017-12-10 07:52:52.504169
+tf.unstack(xs, axis=0)

# 2017-12-10 07:52:55.144558
+tf.unstack(xs, axis=1)

# 2017-12-10 07:52:58.132282
+tf.unstack(xs, axis=2)

# 2017-12-10 07:53:06.719927
+tf.unstack(xs, num=0)

# 2017-12-10 07:53:08.362587
+tf.unstack(xs, num=1)

# 2017-12-10 07:53:09.504315
+tf.unstack(xs, num=2)

# 2017-12-10 07:53:10.988140
+tf.unstack(xs, num=3)

# 2017-12-10 07:53:12.439397
+tf.unstack(xs, num=4)

# 2017-12-10 07:53:13.541409
+tf.unstack(xs, num=5)

# 2017-12-10 07:53:19.688276
+tf.unstack(xs, num=3)

# 2017-12-10 07:53:21.121844
+tf.unstack(xs, num=4)

# 2017-12-10 07:53:22.680931
+tf.unstack(xs, num=5)

# 2017-12-10 07:53:31.780612
+tf.unstack(xs, num=[5, 3])

# 2017-12-10 07:53:37.801823
+tf.unstack(xs, num=-1)

# 2017-12-10 08:01:32.191759
+with tf.control_dependencies(None):
+  w = tf.Variable(tf.constant(1))

# 2017-12-10 08:01:33.249020
+w

# 2017-12-10 08:36:43.744327
+print_slut = tf.Print(1)

# 2017-12-10 08:36:46.490000
+print_slut = tf.Print(1, 1)

# 2017-12-10 08:37:01.085872
+print_slut = tf.Print(message="slut")

# 2017-12-10 08:37:39.869578
+loss = lambda: print("HOGE")

# 2017-12-12 05:57:02.086868
+import numpy as np

# 2017-12-12 05:57:31.071409
+a = np.array([155.42, 150.65])

# 2017-12-12 05:57:44.352097
+b = np.array([375.92, 164.65])

# 2017-12-12 05:58:28.217867
+dist = np.linalg.norm(a - b)

# 2017-12-12 05:58:29.873120
+dist

# 2017-12-12 19:57:49.517691
+import gym

# 2017-12-12 19:57:51.127394
+env = gym.make('Pong-v0')

# 2017-12-12 19:57:55.385241
+env.render()

# 2017-12-12 20:26:57.205519
+import numpy as np

# 2017-12-12 20:27:02.116129
+A = np.random.randn(2, 3)

# 2017-12-12 20:27:02.557362
+A

# 2017-12-12 20:27:22.789863
+np.linalg.qr(A)

# 2017-12-12 20:27:28.357384
+Q, R = np.linalg.qr(A)

# 2017-12-12 20:27:28.888788
+Q

# 2017-12-12 20:27:29.496756
+R

# 2017-12-12 22:47:19.828053
+x = (14900, 1600)

# 2017-12-12 22:47:44.309760
+x = (19800, 800)

# 2017-12-12 22:47:55.805762
+y = (19800, 10000)

# 2017-12-12 22:48:03.374179
+import numpy as np

# 2017-12-12 22:48:43.122758
+d = np.sqrt((x[0] - y[0])**2 + (x[1] - x[1])**2 + 0.5)

# 2017-12-12 22:48:49.478476
+d

# 2017-12-13 08:21:31.837761
+dist = lambda x, y: np.sqrt((x[0] - y[0])**2 + (x[1] - x[1])**2 + 0.5)

# 2017-12-13 08:22:06.492323
+dist((3600, 2300), (200, 12200))

# 2017-12-13 08:26:05.034582
+dist((3600, 2300), (16150, 10800))

# 2017-12-13 08:32:30.125795
+dist((3600, 2300), (14900, 11650))

# 2017-12-13 08:33:11.308767
+from math import sqrt, pow

# 2017-12-13 08:34:06.080159
+dist = lambda x, y: sqrt(pow(x[0] - y[0], 2) + pow(x[1] - y[1], 2) + 0.5)

# 2017-12-13 08:34:23.320367
+dist((3600, 2300), (14900, 11650))

# 2017-12-13 08:35:07.212861
+dist((14200, 11650), (14900, 11650))

# 2017-12-13 08:43:54.557689
+a = "72 71 70 63 62 56 57 58 59 40 39 33 34 35 36 17 16 10 11 12 13 14 15 9 8 5 6 7 2 3 4 19 18 30 29 28 27 42 41 53 52 51 50 65 64 55 54 48 49 66 67 68 46 47 43 44 45 23 24 20 21 22 0 1 74 75 25 26 32 31 37 38 60 61 69".split()

# 2017-12-13 08:43:55.165387
+a

# 2017-12-13 08:43:57.354268
+len(a)

# 2017-12-13 17:38:40.088679
+7%6

# 2017-12-13 17:38:45.782402
+7%7

# 2017-12-14 13:12:04.080947
+import mxnet  as mx

# 2017-12-14 13:18:57.506989
+a = mx.nd.ones((2, 3))

# 2017-12-14 13:19:02.052284
+b = a * 2 + 1

# 2017-12-14 13:19:05.133898
+b.asnumpy()

# 2017-12-14 13:19:12.855085
+a

# 2017-12-14 13:19:16.753199
+a.asnumpy()

# 2017-12-15 00:52:03.532218
+def _l(j: int):
+    if j == -1:
+        return 7
+    return j % 7

# 2017-12-15 00:52:37.048095
+for i in range(-1, 8):
+    print(_l(i))

# 2017-12-15 00:52:54.912740
+def _l(j: int):
+    if j == -1:
+        return 7 - 1
+    return j % 7

# 2017-12-15 00:53:08.095282
+for i in range(-1, 8):
+    print(_l(i))

# 2017-12-15 01:24:09.755047
+_l

# 2017-12-15 01:24:37.450768
+for i in range(5, 10, -1):
+    print(_l(i))

# 2017-12-15 01:24:45.472936
+for i in range(10, 5, -1):
+    print(_l(i))

# 2017-12-15 01:24:55.792117
+for i in range(15, 0, -1):
+    print(_l(i))

# 2017-12-15 04:38:51.070497
+lower(5.5)

# 2017-12-15 04:40:30.510538
+import math

# 2017-12-15 04:40:36.354019
+math.floor(5.9)

# 2017-12-15 05:56:41.701621
+from random import random

# 2017-12-15 05:56:44.020623
+random(10)

# 2017-12-15 05:56:46.574907
+random()

# 2017-12-15 05:57:05.273475
+import random

# 2017-12-15 05:57:08.364617
+random.randint(10)

# 2017-12-15 05:57:10.267805
+random.randint()

# 2017-12-15 05:57:14.109039
+random.randint(0, 10)

# 2017-12-15 06:49:41.877473
+a = [1, 2, 3, 4, 5, 6, 7]

# 2017-12-15 06:49:46.559269
+a[3:5].reverse()

# 2017-12-15 06:49:47.057775
+a

# 2017-12-15 06:50:09.631178
+a[3:5] =  reversed(a[3:5])

# 2017-12-15 06:50:10.123293
+a

# 2017-12-15 06:50:22.364307
+reversed(a[3:5])

# 2017-12-15 06:50:25.162385
+list(reversed(a[3:5]))

# 2017-12-15 06:50:40.115849
+a[3:5]

# 2017-12-15 06:51:48.971094
+a = [1, 2, 3, 4, 5, 6, 7]

# 2017-12-15 06:51:57.526059
+i = 3

# 2017-12-15 06:52:03.363653
+j = 5

# 2017-12-15 06:52:50.131309
+a[i:j+1] = reversed(a[i:j+1])

# 2017-12-15 06:52:50.629100
+a

# 2017-12-15 06:53:57.463539
+a = [0, 1, 2, 3, 4, 5, 6, 7]

# 2017-12-15 06:53:58.716592
+len(a)

# 2017-12-15 06:54:03.481587
+a = [0, 1, 2, 3, 4, 5, 6]

# 2017-12-15 06:54:24.379459
+i = 6

# 2017-12-15 06:54:28.380535
+j = 4

# 2017-12-15 06:54:43.628300
+a[j:i+2] = reversed(a[j:i+2])

# 2017-12-15 06:54:44.252331
+a

# 2017-12-15 06:55:47.891680
+a = [0, 1, 2, 3, 4, 5, 6]

# 2017-12-15 06:56:05.004907
+i = 0

# 2017-12-15 06:56:20.025914
+i=3

# 2017-12-15 06:56:23.356241
+j=6

# 2017-12-15 06:56:56.288165
+a[i+1:j+1] = reversed(a[i+1:j+1])

# 2017-12-15 06:56:56.556567
+a

# 2017-12-15 06:59:06.152124
+a *= 2

# 2017-12-15 06:59:06.397811
+a

# 2017-12-15 07:16:45.106628
+a[0:-1]

# 2017-12-16 04:03:43.520371
+from torch import nn

# 2017-12-16 04:03:44.351379
+nn.Embedding(n_user, k, sparse=True)

# 2017-12-16 04:03:52.239920
+nn.Embedding(10, 20, sparse=True)

# 2017-12-16 04:11:57.466656
+tf

# 2017-12-16 04:12:11.590169
+tf.keras.layers.Embedding((1000, 10))

# 2017-12-16 04:12:14.276404
+tf.keras.layers.Embedding((1000, 10), 5)

# 2017-12-16 04:14:08.737812
+a = tf.keras.layers.Embedding(10, 3)

# 2017-12-16 04:14:36.696866
+inp = tf.constant([[1,2,4,5],[4,3,2,9]])

# 2017-12-16 04:14:37.842146
+inp

# 2017-12-16 04:14:42.616545
+a(inp)

# 2017-12-16 04:23:25.175481
+def hoge(*args):
+    return args

# 2017-12-16 04:23:28.259534
+hoge(10, 20, 30)

# 2017-12-16 04:23:45.300735
+def hoge(*args, **kwargs):
+    return args, kwargs

# 2017-12-16 04:23:49.340281
+hoge(10, 20, 30, a=10, b=20)

# 2017-12-16 04:43:29.247839
+class MatrixFactorizationTensorFlow(tfe.Network):
+
+  def __init__(self, data_format, n_user, n_item, k=20):
+    super(MatrixFactorizationTensorFlow, self).__init__(name='mf')
+    # self._input_shape = []
+    # モデルパラメータ(行列P, G)はEmbeddingを使う
+    # 各要素(ユーザやアイテム)をk次元のベクトルで表現するもので
+    # 単語のベクトル表現を考えるWord Embeddingなどで使われる
+    # 予測は__call__の方で内積する
+    self.user_factors = self.track_layer(tf.keras.layers.Embedding(n_user, k))
+    self.item_factors = self.track_layer(tf.keras.layers.Embedding(n_item, k))
+
+  def call(self, inputs, **kwargs):
+    x = self.user_factors(inputs[0]) * self.item_factors(inputs[1])
+    return x

# 2017-12-16 04:43:52.089279
+tfe.enable_eager_execution()

# 2017-12-16 04:43:53.507354
+class MatrixFactorizationTensorFlow(tfe.Network):
+
+  def __init__(self, data_format, n_user, n_item, k=20):
+    super(MatrixFactorizationTensorFlow, self).__init__(name='mf')
+    # self._input_shape = []
+    # モデルパラメータ(行列P, G)はEmbeddingを使う
+    # 各要素(ユーザやアイテム)をk次元のベクトルで表現するもので
+    # 単語のベクトル表現を考えるWord Embeddingなどで使われる
+    # 予測は__call__の方で内積する
+    self.user_factors = self.track_layer(tf.keras.layers.Embedding(n_user, k))
+    self.item_factors = self.track_layer(tf.keras.layers.Embedding(n_item, k))
+
+  def call(self, inputs, **kwargs):
+    x = self.user_factors(inputs[0]) * self.item_factors(inputs[1])
+    return x

# 2017-12-16 04:44:21.881226
+model = MatrixFactorizationTensorFlow('', 1000, 1000)

# 2017-12-16 04:44:31.083318
+model.graph

# 2017-12-16 04:44:49.964966
+model()

# 2017-12-16 05:58:52.945645
+a = tf.keras.layers.Embedding(10, 3)

# 2017-12-16 05:59:05.147039
+tf.all_variables()

# 2017-12-16 05:59:16.039131
+tf.global_variables()

# 2017-12-16 05:59:30.092388
+sess = tf.InteractiveSession()

# 2017-12-16 05:59:39.247227
+sess.run(tf.global_variables_initializer())

# 2017-12-16 05:59:43.088704
+tf.global_variables()

# 2017-12-16 06:04:40.870599
+keras

# 2017-12-16 06:04:45.093022
+import keras 

# 2017-12-16 18:50:20.358680
+import tensorflow as tf

# 2017-12-16 19:06:00.750750
+ls

# 2017-12-16 19:36:33.331928
+export_dir = "./checkpoints"

# 2017-12-16 19:36:43.386969
+builder = tf.saved_model_builder

# 2017-12-16 19:37:13.638544
+import tensorflow as tf

# 2017-12-16 19:37:33.116988
+ls

# 2017-12-16 19:37:34.705138
+export_dir = "./checkpoints"

# 2017-12-16 19:37:47.271976
+builder = tf.saved_model.builder.SavedModelBuilder(export_dir)

# 2017-12-16 20:08:03.962060
+def hoge():
+    hoge = 10
+    return ho

# 2017-12-16 20:08:05.898703
+def hoge():
+    hoge = 10
+    return hoge

# 2017-12-16 20:08:07.717382
+hoge()

# 2017-12-16 20:11:09.790418
+a = 10

# 2017-12-16 20:11:12.666791
+[*a]

# 2017-12-16 23:19:55.773710
+import tensorflow as tf

# 2017-12-16 23:20:01.705434
+model = tf.keras.Sequential()

# 2017-12-16 23:35:40.815982
+tf.contrib.learn.datasets

# 2017-12-16 23:35:45.071526
+tf.contrib.learn.datasets.DATASETS

# 2017-12-16 23:35:54.710788
+mnist = tf.contrib.learn.datasets.DATASETS['mnist']

# 2017-12-16 23:56:29.346401
+import tensorflow as tf

# 2017-12-16 23:56:49.862681
+FEATURE_KEYS = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']

# 2017-12-16 23:57:09.895116
+[tf.feature_column.numeric_column(key) for key in FEATURE_KEYS]

# 2017-12-16 23:57:32.396448
+[tf.feature_column.numeric_column(key, shape=1) for key in FEATURE_KEYS]

# 2017-12-16 23:57:45.013602
+from pprint import pprint

# 2017-12-16 23:57:49.345831
+pprint([tf.feature_column.numeric_column(key, shape=1) for key in FEATURE_KEYS])

# 2017-12-17 15:31:09.717864
+import pandas as pd

# 2017-12-17 15:31:26.740784
+df = pd.read_csv('./data/train.csv')

# 2017-12-17 15:31:38.604263
+label = df[:,0]

# 2017-12-17 15:31:51.646290
+df.columns.value_counts

# 2017-12-17 15:31:56.585790
+df.columns.values

# 2017-12-17 15:32:01.955283
+df.columns.values[0:10]

# 2017-12-17 15:32:13.758799
+df['label']

# 2017-12-17 15:32:17.739987
+label = df['label']

# 2017-12-17 15:31:54.297437
+df['pixel1']

# 2017-12-17 15:32:05.943175
+df['pixel1':]

# 2017-12-17 15:32:23.525750
+df[['pixel1']]

# 2017-12-17 15:32:35.370371
+df[['pixel1']:]

# 2017-12-17 15:32:56.420881
+df[['pixel1','pixel783']]

# 2017-12-17 15:33:54.670668
+df[['pixel1',0]]

# 2017-12-17 15:35:06.985285
+df[0:]

# 2017-12-17 15:35:12.901029
+df[1:]

# 2017-12-17 15:35:18.970694
+df[1:].head()

# 2017-12-17 15:35:26.392374
+df[0:].head()

# 2017-12-17 15:35:39.658706
+df[:,1:].head()

# 2017-12-17 15:35:51.223471
+df[:, 'pixel0':].head()

# 2017-12-17 15:36:08.057257
+df[::2]

# 2017-12-17 15:36:10.385418
+df[::2].head()

# 2017-12-17 15:36:36.808701
+df.loc

# 2017-12-17 15:36:55.000526
+df.loc['pixel0':'pixel783'].head()

# 2017-12-17 15:37:05.792722
+df.loc[:, 'pixel0':'pixel783'].head()

# 2017-12-17 15:37:30.825412
+df['label'].head()

# 2017-12-17 15:37:37.532112
+import numpy as np

# 2017-12-17 15:37:42.552318
+df['label'].numpy

# 2017-12-17 15:37:46.623272
+df['label'].asnumpy

# 2017-12-17 15:37:52.989147
+np.asarray(df['label'])

# 2017-12-17 15:39:33.153061
+df.loc[:, 'pixel0':].head()

# 2017-12-17 15:41:03.157346
+import tensorflow as tf

# 2017-12-17 15:41:51.125675
+data = np.asarray(df.loc[:, 'pixel0':])

# 2017-12-17 15:42:14.842993
+train_ds = tf.data.Dataset.from_tensor_slices((data, label))

# 2017-12-17 15:42:17.837689
+train_ds

# 2017-12-17 15:48:30.431594
+t = train_ds.batch(100)

# 2017-12-17 15:48:31.435688
+t

# 2017-12-17 15:49:18.239100
+sess

# 2017-12-17 15:49:21.957005
+sess = tf.InteractiveSession()

# 2017-12-17 15:49:25.381108
+sess.run(t)

# 2017-12-17 15:49:46.916987
+x = tf.placeholder(dtype=tf.uint64)

# 2017-12-17 15:49:54.906127
+x = tf.placeholder(dtype=tf.uint64, shape=[None, 784])

# 2017-12-17 15:50:04.782531
+y = tf.placeholder(dtype=tf.uint64, shape=[None])

# 2017-12-17 15:50:28.723336
+iterator = dataset.make_initializable_iterator()

# 2017-12-17 15:50:42.723606
+iterator = train_ds.make_initializable_iterator()

# 2017-12-17 15:56:59.593424
+import tensorflow as tf
+dataset = tf.data.Dataset.range(10)
+iterator = dataset.make_one_shot_iterator()
+next_element = iterator.get_next()
+sess = tf.InteractiveSession()
+for i in range(10):
+    print(sess.run(next_element))

# 2017-12-17 15:58:27.905536
+range_param = tf.placeholder(tf.int64)
+dataset = tf.data.Dataset.range(range_param)
+iterator = dataset.make_initializable_iterator()
+next_element = iterator.get_next()
+sess = tf.InteractiveSession()
+sess.run(iterator.initializer, feed_dict={range_param: 10})
+for i in range(10):
+    print(sess.run(next_element))
+
+sess.run(iterator.initializer, feed_dict={range_param: 30})
+for i in range(30):
+    print(sess.run(next_element))

# 2017-12-17 16:16:17.329140
+import tensorflow as tf

# 2017-12-19 01:27:09.530122
+a = map(int, """0 0 40 38 70 129 49 1 117 79 45 19 34 53 16 30 33 26 18 99 115 23 14 28 94 78 37 105 57 48 52 119 59 50 41 43 39 46 36 21 22 121 54 13 9 66 95 12 32 20 17 7 107 113 2 82 29 58 120 77 89 124 84 65 27 114 61 104 111 116 127 15 44 75 108 60 128 123 25 96 69 6 62 67 97 109 88 93 76 102 80 11 86 64 55 56 8 51 74 73 98 72 91 71 90 5 101 92 3 125 4 10 63 68 87 85 126 106 103 42 47 24 31 112 35 83 118 110 122 100""".split())

# 2017-12-19 01:27:10.068634
+a

# 2017-12-19 01:27:14.870066
+a = list(a)

# 2017-12-19 01:27:15.162098
+a

# 2017-12-19 01:27:25.171815
+a.sort()

# 2017-12-19 01:27:25.550779
+a

# 2017-12-19 01:28:07.879171
+[i == a[i+1]  for i in range(130)]

# 2017-12-19 01:28:12.047930
+len(a)

# 2017-12-19 01:28:35.848835
+import numpy as np

# 2017-12-19 01:28:55.539367
+np.testing.assert_almost_equal(np.asarray(a), np.arange(130))

# 2017-12-19 01:29:02.102783
+np.testing.assert_almost_equal(np.asarray(a[1:]), np.arange(130))

# 2017-12-19 01:29:17.853385
+np.testing.assert_almost_equal(np.asarray(a[1:] + [130]), np.arange(130))

# 2017-12-19 01:29:49.399740
+a

# 2017-12-19 01:29:54.301503
+for i in a:
+    print(i)

# 2017-12-19 01:30:16.418400
+for i, j in enumerate(a[1:]):
+    print((i, j), end='')

# 2017-12-19 20:28:40.992852
+import numpy as np

# 2017-12-19 20:28:56.168906
+"""0 31 10 37 4 48 8 49 15 1 28 20 33 29 9 38 32 44 14 43 36 16 3 17 46 11 45 50 26 5 47 7 25 30 27 2 19 34 35 21 6 22 23 13 24 12 40 18 41 39 42""".split()

# 2017-12-19 20:29:01.998760
+map(int, """0 31 10 37 4 48 8 49 15 1 28 20 33 29 9 38 32 44 14 43 36 16 3 17 46 11 45 50 26 5 47 7 25 30 27 2 19 34 35 21 6 22 23 13 24 12 40 18 41 39 42""".split())

# 2017-12-19 20:29:05.711349
+a = list(map(int, """0 31 10 37 4 48 8 49 15 1 28 20 33 29 9 38 32 44 14 43 36 16 3 17 46 11 45 50 26 5 47 7 25 30 27 2 19 34 35 21 6 22 23 13 24 12 40 18 41 39 42""".split()))

# 2017-12-19 20:29:06.178210
+a

# 2017-12-19 20:29:10.215586
+set(a)

# 2017-12-19 20:29:40.506520
+ls

# 2017-12-20 00:16:54.626534
+import random

# 2017-12-20 00:17:10.088711
+random.random(0)

# 2017-12-20 00:17:11.156628
+random.random()

# 2017-12-20 00:18:16.780571
+2 ** 3

# 2017-12-20 00:18:25.751074
+2^4

# 2017-12-20 00:18:37.595047
+2^2

# 2017-12-20 00:18:50.570501
+2^3

# 2017-12-20 00:33:29.085286
+1/0

# 2017-12-20 00:34:16.298029
+for i in range(10000):
+    print("\r{0}".format(i), end="", flush=True)

# 2017-12-20 00:34:31.661824
+for i in range(1000000):
+    print("\r{0}".format(i), end="", flush=True)

# 2017-12-23 01:19:50.151018
+import tensorflow as tf

# 2017-12-23 10:53:12.119150
+[0, 1, 2] + 1

# 2017-12-23 10:53:22.860988
+[i + 1 for i in [0, 1, 2]]

# 2017-12-23 14:25:08.728372
+a = [0, 1, 2, 3, 4, 5, 6]

# 2017-12-23 14:25:14.465349
+a[2:4].reverse()

# 2017-12-23 14:25:14.827082
+a

# 2017-12-23 14:25:24.871712
+reversed(a[2:4])

# 2017-12-23 14:26:22.216837
+a[2:5]

# 2017-12-23 14:26:25.365419
+a[2:5].reverse()

# 2017-12-23 14:26:25.704246
+a

# 2017-12-23 14:26:43.420884
+b = a[2:5]

# 2017-12-23 14:26:48.476603
+b.reverse()

# 2017-12-23 14:26:52.779083
+a[2:5] = b

# 2017-12-23 14:26:53.130723
+a

# 2017-12-23 14:48:47.747274
+"{a:2.f}".format(10.232)

# 2017-12-23 14:48:50.272003
+"{a:2.f}".format(a=10.232)

# 2017-12-23 14:49:01.824216
+"{0:2.f}".format(10.232)

# 2017-12-23 14:49:04.631278
+"{0:f.2}".format(10.232)

# 2017-12-23 14:49:07.415434
+"{0:2f}".format(10.232)

# 2017-12-23 14:49:09.794684
+"{0:f}".format(10.232)

# 2017-12-23 14:49:15.280038
+"{0:1.f}".format(10.232)

# 2017-12-23 14:49:16.822668
+"{0:2.f}".format(10.232)

# 2017-12-23 14:49:18.418687
+"{0:2f}".format(10.232)

# 2017-12-23 14:49:20.406490
+"{0:21f}".format(10.232)

# 2017-12-23 14:49:23.999037
+"{0:f}".format(10.232)

# 2017-12-23 14:50:00.392157
+"{0:.4f}".format(10.232)

# 2017-12-25 17:28:25.692515
+env = gym.make('Asteriods-v0')

# 2017-12-25 17:28:55.002217
+env = gym.make('Asteroids-v0')

# 2017-12-25 17:29:05.329634
+env.render()

# 2017-12-25 17:29:16.018739
+env.action_space

# 2017-12-25 17:29:18.719600
+env.action_space.n

# 2017-12-25 17:31:51.433846
+env.observation_space.shape

# 2017-12-27 21:01:37.536906
+A = np.random.randn(2, 3)

# 2017-12-27 21:01:46.279309
+L = np.eye(*A.shape)

# 2017-12-27 21:01:47.360883
+L

# 2017-12-27 21:02:47.467433
+U = A.copy()

# 2017-12-27 21:02:48.474437
+U

# 2017-12-27 21:02:52.019470
+A[0] = 10

# 2017-12-27 21:02:52.697908
+A

# 2017-12-27 21:02:54.369959
+U

# 2017-12-27 21:05:32.744826
+A

# 2017-12-27 21:05:38.379189
+A.shape

# 2017-12-27 21:05:40.683929
+A.shape[0]

# 2017-12-27 21:06:24.888107
+type(A)

# 2017-12-27 21:09:21.824193
+U

# 2017-12-27 21:09:23.177928
+L

# 2017-12-27 21:09:30.676548
+L[0,:]

# 2017-12-27 21:09:37.129137
+L[:, 0]

# 2017-12-27 21:09:53.123059
+L.shape

# 2017-12-27 21:10:14.163664
+L[:, 0]

# 2017-12-27 21:10:41.772659
+L

# 2017-12-27 21:10:43.420544
+L.shape

# 2017-12-27 21:10:59.940994
+L[0]

# 2017-12-27 21:11:10.626059
+L[:, 1]

# 2017-12-27 21:11:17.727418
+L[:, 0]

# 2017-12-27 21:11:22.330143
+A

# 2017-12-27 21:11:25.591972
+A = np.random.randn(2, 3)

# 2017-12-27 21:21:38.606360
+a

# 2017-12-27 21:21:44.666988
+A

# 2017-12-27 21:21:51.095436
+A = np.random.randn(3, 5)

# 2017-12-27 21:21:51.441267
+A

# 2017-12-27 21:22:19.342867
+for i in A[:,]:
+    print(i)

# 2017-12-27 21:22:36.906778
+for i in A.T:
+    print(i)

# 2017-12-27 21:29:33.473090
+A

# 2017-12-27 21:29:37.664882
+A.shape[1]

# 2017-12-27 21:49:49.434287
+np.trace(A)

# 2017-12-27 21:49:50.506232
+A

# 2017-12-27 21:49:57.631083
+np.diag(A)

# 2017-12-27 22:08:32.322485
+np.random.randint(20, 60)

# 2017-12-27 22:08:34.803519
+np.random.rand(20, 60)

# 2017-12-27 22:08:36.769855
+np.random.randn(20, 60)

# 2017-12-27 22:09:30.153837
+A

# 2017-12-27 22:09:42.197249
+E = np.eye(*A.shape)

# 2017-12-27 22:09:43.067926
+A

# 2017-12-27 22:09:43.407861
+B

# 2017-12-27 22:09:44.518606
+E

# 2017-12-27 22:09:59.271234
+np.mat(A, A)

# 2017-12-27 22:10:01.245236
+A

# 2017-12-27 22:10:05.104672
+np.mat(A, A.T)

# 2017-12-27 22:10:06.104770
+A

# 2017-12-27 22:10:08.024469
+A.T * A

# 2017-12-27 22:10:13.634756
+A.T @ A

# 2017-12-27 22:10:56.840284
+A

# 2017-12-27 22:11:00.330203
+np.invert(A)

# 2017-12-27 22:11:04.338279
+A**-1

# 2017-12-27 22:11:12.458585
+A**-1 @ A

# 2017-12-27 22:11:16.472167
+A @ A**-1

# 2017-12-27 22:11:21.996135
+(A**-1).shape

# 2017-12-27 22:11:22.754226
+A

# 2017-12-27 22:11:24.477739
+A>shape

# 2017-12-27 22:11:25.988645
+A.shape

# 2017-12-27 22:11:33.772213
+A @ (A**-1).T

# 2017-12-28 00:31:28.523827
+import tensorforce.util as U

# 2017-12-28 00:31:30.415320
+U

# 2017-12-28 02:59:54.398253
+class FuckYou(Exception):
+    pass

# 2017-12-28 03:00:11.501122
+raise FuckYou("Bitch")

# 2017-12-28 03:55:54.498788
+graph = tf.get_default_graph()

# 2017-12-28 03:55:57.673228
+import tensorforce.util as U

# 2017-12-28 03:56:04.461828
+import tensorflow as tf

# 2017-12-28 03:56:18.662269
+graph = tf.get_default_graph()

# 2017-12-28 03:56:19.765531
+graph

# 2017-12-28 03:56:33.693557
+var = tf.Variable(0)
+
+for s in xrange(2):
+    with tf.name_scope('myscope_%d' % s):
+        op = var.assign_add(s + 1)
+
+all_operations = [graph.get_operation_by_name('myscope_%d/AssignAdd' % s) for s in range(2)]
+all_op = tf.group(*all_operations)

# 2017-12-28 03:56:42.600591
+var = tf.Variable(0)
+
+for s in range(2):
+    with tf.name_scope('myscope_%d' % s):
+        op = var.assign_add(s + 1)
+
+all_operations = [graph.get_operation_by_name('myscope_%d/AssignAdd' % s) for s in range(2)]
+all_op = tf.group(*all_operations)

# 2017-12-28 03:56:44.324402
+all_op

# 2017-12-28 03:57:14.254177
+sess = tf.Session()
+sess.run(tf.global_variables_initializer())
+print(sess.run(var))  # prints 0
+sess.run(all_op)
+print(sess.run(var))  # prints 3

# 2017-12-28 14:39:23.917614
+import os 
+# Where we save our checkpoints and graphs
+experiment_dir = os.path.abspath("./experiments/")
+
+# Create directories for checkpoints and summaries
+checkpoint_dir = os.path.join(experiment_dir, "checkpoints")
+self.checkpoint_path = os.path.join(checkpoint_dir, "model")
+
+if not os.path.exists(checkpoint_dir):
+  os.makedirs(checkpoint_dir)
+
+saver = tf.train.Saver()
+# Load a previous checkpoint if we find one
+latest_checkpoint = tf.train.latest_checkpoint(checkpoint_dir)
+if latest_checkpoint:
+  print("Loading model checkpoint {}...\n".format(latest_checkpoint))
+  saver.restore(self.sess, latest_checkpoint)

# 2017-12-28 14:39:33.151262
+sess = tf.InteractiveSession()

# 2017-12-28 14:39:38.519049
+import os 
+# Where we save our checkpoints and graphs
+experiment_dir = os.path.abspath("./experiments/")
+
+# Create directories for checkpoints and summaries
+checkpoint_dir = os.path.join(experiment_dir, "checkpoints")
+self.checkpoint_path = os.path.join(checkpoint_dir, "model")
+
+if not os.path.exists(checkpoint_dir):
+  os.makedirs(checkpoint_dir)
+
+saver = tf.train.Saver()
+# Load a previous checkpoint if we find one
+latest_checkpoint = tf.train.latest_checkpoint(checkpoint_dir)
+if latest_checkpoint:
+  print("Loading model checkpoint {}...\n".format(latest_checkpoint))
+  saver.restore(sess, latest_checkpoint)

# 2017-12-28 14:39:50.504059
+import os 
+# Where we save our checkpoints and graphs
+experiment_dir = os.path.abspath("./experiments/")
+
+# Create directories for checkpoints and summaries
+checkpoint_dir = os.path.join(experiment_dir, "checkpoints")
+checkpoint_path = os.path.join(checkpoint_dir, "model")
+
+if not os.path.exists(checkpoint_dir):
+  os.makedirs(checkpoint_dir)
+
+saver = tf.train.Saver()
+# Load a previous checkpoint if we find one
+latest_checkpoint = tf.train.latest_checkpoint(checkpoint_dir)
+if latest_checkpoint:
+  print("Loading model checkpoint {}...\n".format(latest_checkpoint))
+  saver.restore(sess, latest_checkpoint)

# 2017-12-28 14:40:11.116315
+checkpoint_dir

# 2017-12-28 14:40:25.270408
+tf.train.latest_checkpoint(checkpoint_dir)

# 2017-12-28 14:40:49.605470
+checkpoint = tf.train.latest_checkpoint(checkpoint_dir)

# 2017-12-28 14:40:58.665968
+saver

# 2017-12-28 14:41:04.174262
+saver = tf.train.Saver()

# 2017-12-28 14:54:22.304881
+ls

# 2017-12-28 14:54:35.379625
+from model import CNN

# 2017-12-28 14:54:40.754033
+model = CNN()

# 2017-12-28 14:54:53.870758
+sess = tf.InteractiveSession()

# 2017-12-28 14:55:08.915794
+model = CNN(sess)

# 2017-12-28 14:55:16.695676
+saver = tf.train.Saver()

# 2017-12-28 14:55:47.266854
+saver.restore(sess, checkpoint)

# 2017-12-28 14:55:49.271815
+saver

# 2017-12-28 14:55:50.964352
+sess

# 2017-12-28 14:56:50.768531
+ls

# 2017-12-28 14:57:00.744280
+import pandas as pd

# 2017-12-28 14:57:13.385109
+df = pd.read_csv('./test.csv')

# 2017-12-28 15:03:31.341299
+df.head()

# 2017-12-28 15:04:11.572093
+df[0]

# 2017-12-28 15:04:16.884753
+df.iloc[0]

# 2017-12-28 15:04:33.329551
+np.asarray(df.iloc[0])

# 2017-12-28 15:04:59.679510
+model.eval(np.asarray(df.iloc[0]))

# 2017-12-28 15:06:34.109481
+model.predict(np.asarray(df.iloc[0]))

# 2017-12-28 15:06:43.919221
+model.predict(np.asarray(df.iloc[0:]))

# 2017-12-28 15:06:56.192443
+model.predict(np.asarray(df.iloc[0:2]))

# 2017-12-28 15:19:54.472589
+df.iloc[0]

# 2017-12-28 15:19:59.976803
+df.iloc[0:10]

# 2017-12-28 15:20:05.287547
+df.iloc[0:10].sum()

# 2017-12-28 15:20:12.778568
+df.iloc[0:10].sum(0)

# 2017-12-28 15:20:13.909996
+df.iloc[0:10].sum(1)

# 2017-12-28 15:20:24.589269
+(df.iloc[0:10] / 255).sum(1)

# 2018-01-01 23:26:46.568783
+1j

# 2018-01-01 23:26:49.467280
+1j ** 1j

# 2018-01-01 23:27:30.288958
+1j ** 1j ** 1j

# 2018-01-01 23:27:32.746535
+1j ** 1j ** 1j ** 1j

# 2018-01-03 02:03:49.393959
+a = np.arange(1, 13).reshape((4, 3))

# 2018-01-03 02:03:50.295637
+a

# 2018-01-03 02:03:58.197918
+a = np.arange(1, 13).reshape((4, 3)).astype(np.float32)

# 2018-01-03 02:03:58.924259
+a

# 2018-01-03 02:04:07.713123
+a[0,0]

# 2018-01-03 02:04:08.730924
+a[0,1]

# 2018-01-03 02:04:14.115319
+a[1,0]

# 2018-01-03 02:04:29.013507
+a[0]

# 2018-01-03 02:04:32.249437
+a[1]

# 2018-01-03 02:05:21.481449
+a.shape[0]

# 2018-01-03 02:24:41.765953
+np.eye(a.shape[0])

# 2018-01-03 02:57:01.823308
+ls

# 2018-01-03 02:57:12.723335
+np.arange(10)

# 2018-01-03 02:57:17.623009
+A = np.random.randn(3, 5)

# 2018-01-03 02:57:18.106251
+A

# 2018-01-03 02:57:23.378208
+A = np.arange(6).reshape((2, 3))

# 2018-01-03 02:57:23.784545
+A

# 2018-01-03 02:57:31.252280
+A = np.arange(12).reshape((4, 3))

# 2018-01-03 02:57:31.638794
+A

# 2018-01-03 02:57:51.187453
+B = np.eye(A)

# 2018-01-03 02:57:56.007722
+B = np.eye(A.shape[0])

# 2018-01-03 02:57:56.458031
+A

# 2018-01-03 02:57:56.868298
+B

# 2018-01-03 02:58:00.891230
+B @ A

# 2018-01-03 02:58:24.812305
+A = np.arange(1, 13).reshape((4, 3))

# 2018-01-03 02:58:28.284661
+B @ A

# 2018-01-03 02:59:02.818677
+B[1, 1] = 1 / A[1,0]

# 2018-01-03 02:59:03.627599
+B

# 2018-01-03 02:59:13.371191
+B[2, 2] = 1 / A[2,0]

# 2018-01-03 02:59:14.679206
+B

# 2018-01-03 02:59:15.254260
+A

# 2018-01-03 02:59:20.093939
+B @ A

# 2018-01-03 02:59:28.657863
+B

# 2018-01-03 02:59:29.042040
+A

# 2018-01-03 02:59:39.950259
+B[3, 3] = 1 / A[3,0]

# 2018-01-03 02:59:40.433849
+B

# 2018-01-03 02:59:42.744568
+B @ A

# 2018-01-03 02:59:58.226790
+A

# 2018-01-03 03:00:28.280686
+6 / 4

# 2018-01-03 03:02:23.928617
+B

# 2018-01-03 03:02:54.816273
+B[1, 0]

# 2018-01-03 03:03:01.863214
+B[1, 0] = -1

# 2018-01-03 03:03:02.452232
+B

# 2018-01-03 03:03:06.191244
+B @ A

# 2018-01-03 03:07:01.502733
+B

# 2018-01-03 03:07:04.351378
+A

# 2018-01-03 03:08:31.609323
+U = np.array([[ 1.,  2.,  3.],
+ [-0.,  1,  2.],
+ [ 0.,  0.,  1.],
+ [-0., -0.,  0.]])

# 2018-01-03 03:08:33.024271
+U

# 2018-01-03 03:08:38.559144
+L @ U

# 2018-01-03 03:08:41.298938
+B @ U

# 2018-01-03 03:08:44.822946
+U

# 2018-01-03 03:09:09.195449
+B

# 2018-01-03 03:09:41.131279
+B[1, 0] = 4

# 2018-01-03 03:09:44.955556
+B @ U

# 2018-01-03 03:14:15.013579
+B

# 2018-01-03 03:14:17.723587
+BU

# 2018-01-03 03:14:21.636866
+U

# 2018-01-03 03:14:23.603543
+A

# 2018-01-03 03:14:32.017826
+np.trace(A)

# 2018-01-03 03:14:40.820542
+np.diag(A)

# 2018-01-03 03:14:57.991437
+np.diag(A, 3)

# 2018-01-03 03:14:59.114042
+np.diag(A, 2)

# 2018-01-03 03:15:00.352104
+np.diag(A, 0)

# 2018-01-03 03:15:02.438828
+np.diag(A)

# 2018-01-03 03:15:11.539701
+np.diag(np.diag(A))

# 2018-01-04 04:48:02.735561
+np.mat("""7.49058  -2.57192   1.17964
+ -2.57192  0.883077 -0.405032
+  1.17964 -0.405032  0.185772""")

# 2018-01-04 04:48:29.606686
+RAP = np.mat("""7.49058  -2.57192   1.17964
+ -2.57192  0.883077 -0.405032
+  1.17964 -0.405032  0.185772""").reshape((3, 3))

# 2018-01-04 04:48:31.380909
+RAP

# 2018-01-04 04:48:39.937998
+RAP.I

# 2018-01-04 04:50:21.877389
+np.random.randn(20, 60)

# 2018-01-04 04:50:25.711360
+np.random.randn(2, 3)

# 2018-01-05 07:59:13.301149
+a = tf.get_variable('hoge')

# 2018-01-05 07:59:36.108687
+var = tf.Variable(0)

# 2018-01-05 07:59:36.887059
+var

# 2018-01-05 07:59:43.452972
+var.trainabl

# 2018-01-05 08:00:26.169899
+var.trainable

# 2018-01-05 08:01:09.488769
+tf.trainable_variables()

# 2018-01-05 08:01:27.036930
+var in tf.trainable_variables()

# 2018-01-05 08:34:16.332136
+kwargs = {'a': 10, 'b': 20}

# 2018-01-05 08:34:22.329270
+kwargs.get('a')

# 2018-01-05 08:34:24.805816
+kwargs

# 2018-01-05 08:34:26.969399
+kwargs.get('a', 10)

# 2018-01-05 08:34:29.031295
+kwargs.get('a', 20)

# 2018-01-05 08:34:31.478989
+kwargs.get('a', True)

# 2018-01-05 08:34:39.539910
+kwargs.get('a', False)

# 2018-01-05 08:34:42.611261
+kwargs.get('a', False, hoge)

# 2018-01-05 08:34:45.429583
+kwargs.get('a', False, 'a')

# 2018-01-05 08:35:39.754915
+kwargs.get('c', True)

# 2018-01-05 08:45:02.381699
+tf.get_variable('x', [1], tf.float32, 0)

# 2018-01-05 08:45:14.828567
+tf.get_variable('x', [1], tf.float32, tf.constant_initialize(3))

# 2018-01-05 08:45:19.673688
+tf.get_variable('x', [1], tf.float32, tf.constant_initializer(3))

# 2018-01-05 08:45:55.557827
+x = tf.get_variable('x', [1], tf.float32, tf.constant_initializer(3))

# 2018-01-05 09:30:24.349645
+from keras import regularizers

# 2018-01-05 09:30:30.173753
+regularizers.l1(0.001)

# 2018-01-05 09:30:39.548565
+regularizers.l1_l2(0.001, 0.001)

# 2018-01-05 09:31:12.369671
+from keras.models import Model, Sequential

# 2018-01-05 09:31:28.034809
+from keras.layers import Dense, Input, Dropout

# 2018-01-05 09:31:38.710757
+model = Sequential()

# 2018-01-05 09:32:02.337376
+model.add(Dense(16, activation='relu', input_shape=(10000,)))

# 2018-01-05 09:32:13.283780
+model.add(Dropout(0.5))

# 2018-01-05 09:32:26.524816
+model.add(Dense(16, activation='relu'))

# 2018-01-05 09:32:33.453439
+model.add(Dropout(0.5))

# 2018-01-05 09:32:46.027704
+model.add(Dense(1, activation='sigmoid'))

# 2018-01-05 09:33:43.958505
+model.summary()

# 2018-01-05 14:32:49.746940
+from sklearn import datasets

# 2018-01-05 14:32:54.861201
+iris = datasets.load_iris()

# 2018-01-05 14:32:56.848675
+iris

# 2018-01-05 14:33:01.137583
+iris.target

# 2018-01-05 14:38:37.930935
+tf.SparseTensor(values=[1, 2], indices=[[0, 0], [1, 2]], shape=[3, 4])

# 2018-01-05 14:38:43.452035
+import tensorflow as tf

# 2018-01-05 14:38:44.423834
+tf.SparseTensor(values=[1, 2], indices=[[0, 0], [1, 2]], shape=[3, 4])

# 2018-01-05 14:38:56.414900
+tf.SparseTensor(values=[1, 2], indices=[[0, 0], [1, 2]], dense_shape=[3, 4])

# 2018-01-05 14:39:12.506017
+import tensorflow.contrib.eager as tfe
+
+tfe.enable_eager_execution()

# 2018-01-05 14:39:24.349473
+import tensorflow.contrib.eager as tfe

# 2018-01-05 14:39:29.268504
+import tensorflow as tf

# 2018-01-05 14:39:36.357320
+tf.SparseTensor(values=[1, 2], indices=[[0, 0], [1, 2]], dense_shape=[3, 4])

# 2018-01-05 14:39:41.682938
+st = _

# 2018-01-05 14:39:45.262204
+st

# 2018-01-05 14:39:48.107052
+st.eval()

# 2018-01-05 14:39:53.254993
+sess = tf.InteractiveSession()

# 2018-01-05 14:39:56.656036
+sess.run(st)

# 2018-01-06 07:52:31.618506
+import tensorflow as tf

# 2018-01-06 07:52:46.032336
+image_r = tf.read_file('./cat.4372.jpg')

# 2018-01-06 07:52:48.088456
+image_r

# 2018-01-06 07:53:08.859875
+image = tf.image.decode_image(image_r, channels=3)

# 2018-01-06 07:53:10.148612
+image

# 2018-01-06 07:53:34.753875
+sess = tf.InteractiveSession()

# 2018-01-06 07:53:58.929663
+tf.global_variables_initializer().run()

# 2018-01-06 07:54:02.088267
+sess.run(init)

# 2018-01-06 07:54:48.110042
+tf.train.start_queue_runners(sess)

# 2018-01-06 07:54:52.893546
+x = sess.run(image)

# 2018-01-06 07:54:54.210825
+x

# 2018-01-06 07:55:03.699154
+import matplotlib.pyplot as plt

# 2018-01-06 07:55:32.783183
+plt.imshow(x)

# 2018-01-06 07:55:39.345880
+plt.show()

# 2018-01-06 08:00:17.714918
+image_r = tf.read_file(['./cat.4372.jpg', './cat.1111.jpg'] )

# 2018-01-06 08:05:25.275315
+import os

# 2018-01-06 08:05:30.362425
+os.mkdir('hoge')

# 2018-01-06 08:05:39.526988
+import os

# 2018-01-06 08:05:49.432424
+os.path.exists('hoge')

# 2018-01-06 08:06:12.373676
+help(os.path.exists)

# 2018-01-06 17:11:26.173186
+a = dict()

# 2018-01-06 17:11:29.631833
+a.update(a=10)

# 2018-01-06 17:11:30.636664
+a

# 2018-01-07 16:31:53.829357
+tfe.enable_eager_execution()

# 2018-01-07 16:32:00.955450
+vocab_size = 5000

# 2018-01-07 16:32:08.337854
+embed_size = 150

# 2018-01-07 16:32:49.875866
+embeddings = tf.Variable(tf.random_uniform([vocab_size, embed_size], -1, 1))

# 2018-01-07 16:33:00.644807
+embeddings = tfe.Variable(tf.random_uniform([vocab_size, embed_size], -1., 1.))

# 2018-01-07 16:33:10.985487
+embeddings

# 2018-01-07 16:33:13.229311
+embeddings.shape

# 2018-01-07 16:33:38.090318
+import tensorflow as tf

# 2018-01-07 16:33:40.081575
+vocab_size = 5000

# 2018-01-07 16:33:44.578654
+embed_size = 150

# 2018-01-07 16:33:51.788845
+embeddings = tf.Variable(tf.random_uniform([vocab_size, embed_size], -1., 1.))

# 2018-01-07 16:34:15.470769
+train_inputs = tf.placeholder(tf.int32, [None])

# 2018-01-07 16:34:39.049844
+embed = tf.nn.embedding_lookup(embeddings, train_inputs)

# 2018-01-07 16:34:40.418820
+embed

# 2018-01-07 16:40:15.887957
+import keras

# 2018-01-07 16:40:22.474944
+from keras.layers import Embedding

# 2018-01-07 16:40:33.423759
+from keras.models import Model, Sequential

# 2018-01-07 16:40:35.965830
+model = Sequential()

# 2018-01-07 16:40:50.464662
+model.add(Embedding(5000, 150))

# 2018-01-07 16:40:55.839890
+model.summary()

# 2018-01-07 16:42:20.377980
+model.add(Embedding(5000, 150, input_length=10))

# 2018-01-07 16:42:21.985266
+model

# 2018-01-07 16:42:23.909441
+model.summary()

# 2018-01-07 18:40:32.688391
+import os

# 2018-01-07 18:40:40.023099
+os.mkdir('hoge/hage')

# 2018-01-07 18:40:46.373738
+os.mkdir('hoge')

# 2018-01-07 18:40:49.101859
+os.mkdir('hoge/hage')

# 2018-01-08 15:57:27.564707
+from keras.layers import Embedding, Bidirectional, LSTM

# 2018-01-08 15:57:46.340189
+from keras.models import Sequential

# 2018-01-08 15:57:49.889829
+model = Sequential()

# 2018-01-08 15:58:01.789831
+model.add(Embedding(5000, 150))

# 2018-01-08 15:58:30.381298
+model.add(Bidirectional(LSTM(120)))

# 2018-01-08 15:58:37.390464
+model.add(Dense(1, activation='sigmoid'))

# 2018-01-08 15:58:48.750890
+from keras.layers import Dense

# 2018-01-08 15:58:53.951010
+model.add(Dense(1, activation='sigmoid'))

# 2018-01-08 15:59:37.755195
+model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])

# 2018-01-08 15:59:44.571261
+model.summary()

# 2018-01-08 17:50:10.128915
+a = {'A': 20, 'B': 10}

# 2018-01-09 23:52:24.529947
+from random import random

# 2018-01-09 23:52:34.304561
+from random import choice

# 2018-01-09 23:52:37.885724
+choices = [[0, 1, 2, 3], [10, 11, 12, 13], [20, 21, 22, 23], [30, 31, 32, 33]]

# 2018-01-09 23:52:44.320717
+choice(choices)

# 2018-01-09 23:52:53.768609
+help(choice)

# 2018-01-10 00:25:46.254951
+random

# 2018-01-10 00:25:50.015928
+from random import random

# 2018-01-10 00:25:52.094035
+random()

# 2018-01-10 00:26:56.122738
+a = [0, 1, 2, 3, 4, 5, 6]

# 2018-01-10 00:27:08.485745
+def hoge(a):
+    a.sort(reverse=True)

# 2018-01-10 00:27:10.635154
+hoge(a)

# 2018-01-10 00:27:11.173294
+a

# 2018-01-10 00:27:50.884977
+a = [0, 14, 5, 6, 2, 1 , 4]

# 2018-01-10 00:27:52.047508
+a

# 2018-01-10 00:28:15.026884
+def hoge(a):
+    a = sorted(a, reverse=True)

# 2018-01-10 00:28:17.147878
+hoge(a)

# 2018-01-10 00:28:17.661475
+a

# 2018-01-10 00:28:21.516468
+hoge(a)

# 2018-01-10 00:28:24.947124
+def hoge(a):
+    a = sorted(a, reverse=True)
+    return a

# 2018-01-10 00:28:28.157231
+hoge(a)

# 2018-01-10 00:28:30.374059
+a

# 2018-01-10 00:30:47.084983
+import random

# 2018-01-10 00:30:53.034395
+random.randint(0, 10)

# 2018-01-10 00:35:20.770220
+a

# 2018-01-10 00:35:25.541302
+random.shuffle(a)

# 2018-01-10 00:35:27.599218
+a

# 2018-01-10 00:57:08.926899
+a.index(14)

# 2018-01-10 01:47:52.521208
+a = [[0 for i in range(3)] for j in range(4)]

# 2018-01-10 01:47:52.823336
+a

# 2018-01-10 02:01:36.265995
+a = [[0 for i in range(j+1, 4)] for j in range(4)]

# 2018-01-10 02:01:36.519656
+a

# 2018-01-10 02:02:12.409656
+a = [[0 for i in range(j, 4)] for j in range(4)]

# 2018-01-10 02:02:14.078045
+a

# 2018-01-10 02:03:40.412591
+a[i][j]

# 2018-01-10 02:03:50.210321
+i = 2; j = 0

# 2018-01-10 02:03:53.746127
+a[i][j]

# 2018-01-10 02:03:59.746284
+i = 0; j = 2

# 2018-01-10 02:04:01.253879
+a[i][j]

# 2018-01-10 02:04:03.059829
+a

# 2018-01-10 02:04:12.621053
+i = 3; j = 2

# 2018-01-10 02:04:12.940475
+a

# 2018-01-10 02:04:14.130122
+a[i][j]

# 2018-01-10 02:04:20.450742
+a[j][i]

# 2018-01-10 02:04:22.300288
+i

# 2018-01-10 02:04:22.653711
+j

# 2018-01-10 02:04:59.510234
+a[j]

# 2018-01-10 02:05:14.951441
+a = [[0 for i in range(0, 4)] for j in range(4)]

# 2018-01-10 02:05:15.374473
+a

# 2018-01-10 02:05:19.085834
+a[j][i]

# 2018-01-10 02:05:20.247224
+a

# 2018-01-10 07:03:34.644115
+a = [6, 3, 10, 4, 12]

# 2018-01-10 07:03:52.323196
+q = zip(range(len(a), a))

# 2018-01-10 07:04:06.181951
+range(len(a))

# 2018-01-10 07:04:10.066242
+list(range(len(a)))

# 2018-01-10 07:04:12.030070
+list(range(len(a))), a

# 2018-01-10 07:04:17.293363
+zip(list(range(len(a))), a)

# 2018-01-10 07:04:20.108730
+a = zip(list(range(len(a))), a)

# 2018-01-10 07:04:22.500386
+a

# 2018-01-10 07:04:33.022522
+sorted(a)

# 2018-01-10 07:04:57.165556
+a = [6, 3, 10, 4, 12]

# 2018-01-10 07:05:20.702916
+b = zip(list(range(len(a))), a)

# 2018-01-10 07:05:21.473623
+b

# 2018-01-10 07:05:33.368812
+b = sorted(zip(list(range(len(a))), a),reverse=True)

# 2018-01-10 07:05:33.923298
+b

# 2018-01-10 07:07:27.171081
+b = sorted(a, zip(list(range(len(a)))),reverse=True)

# 2018-01-10 07:08:06.015707
+b = sorted(zip(a, list(range(len(a)))),reverse=True)

# 2018-01-10 07:08:06.513165
+b

# 2018-01-10 07:08:11.633296
+a

# 2018-01-10 07:08:54.406366
+a = [6, 3, 10, 4, 12]

# 2018-01-10 07:09:01.128935
+d = dict()

# 2018-01-10 07:09:14.491755
+for i, e in enumerate(a):
+    d[i] = e

# 2018-01-10 07:09:15.018972
+d

# 2018-01-10 07:09:51.101707
+sorted(a, key=lambda x: x[1])

# 2018-01-10 07:09:59.522885
+sorted(a, key=lambda x: x.values())

# 2018-01-10 07:10:08.968024
+sorted(de, key=lambda x: x.values())

# 2018-01-10 07:10:10.837207
+sorted(d, key=lambda x: x.values())

# 2018-01-10 07:10:13.012071
+d.values

# 2018-01-10 07:10:14.010956
+d.values()

# 2018-01-10 07:10:55.392713
+sorted(d, key=lambda x: x.values())

# 2018-01-10 07:11:40.863546
+sorted(d, key=lambda x: x[1])

# 2018-01-10 07:12:01.499156
+sorted(d.items(), key=lambda x: x[1])

# 2018-01-10 07:14:16.360777
+a

# 2018-01-10 07:14:17.925490
+d

# 2018-01-10 07:15:04.830055
+for i, e in enumerate(a):
+    d[e] = i

# 2018-01-10 07:15:05.224759
+d

# 2018-01-10 07:15:26.164308
+d.clear()

# 2018-01-10 07:15:28.028255
+for i, e in enumerate(a):
+    d[e] = i

# 2018-01-10 07:15:28.443989
+d

# 2018-01-10 07:15:48.199355
+sorted(d)

# 2018-01-10 07:18:01.956610
+d

# 2018-01-10 07:18:35.593472
+sorted(d.items(), key=lambda x: x[1])

# 2018-01-10 07:18:43.327118
+d

# 2018-01-10 07:18:45.750145
+sorted(d.items(), key=lambda x: x[0])

# 2018-01-10 08:00:27.711323
+a

# 2018-01-10 08:00:29.911285
+import numpy as np

# 2018-01-10 08:00:37.256002
+np.argsort(a)

# 2018-01-10 08:00:39.339300
+a

# 2018-01-10 08:50:29.721827
+len([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

# 2018-01-10 09:41:00.118548
+choices

# 2018-01-10 09:41:06.539301
+a = choices[2]

# 2018-01-10 09:41:06.849084
+a

# 2018-01-10 09:41:10.333266
+i = 0

# 2018-01-10 09:41:13.662779
+a[i-1:i]

# 2018-01-10 09:41:16.981889
+a[i-1:i+1]

# 2018-01-10 09:41:30.979583
+a[-1:]

# 2018-01-10 09:41:35.030361
+a[-1:0]

# 2018-01-10 09:41:36.408923
+a[-1:1]

# 2018-01-10 09:42:01.442954
+if i == 0:
+    print([a[-1], a[0]])

# 2018-01-10 09:56:51.338307
+[1, 2] in [2, 1]

# 2018-01-10 09:56:55.397517
+[1, 2] in [[2, 1]]

# 2018-01-10 09:56:58.802830
+[1, 2] in [[1, 2]]

# 2018-01-10 10:04:12.881358
+set([3, 1])

# 2018-01-10 10:04:40.225851
+set([3, 1]) ^ set([1, 3])

# 2018-01-10 10:04:44.198314
+set([3, 1]) & set([1, 3])

# 2018-01-10 10:04:47.928660
+set([3, 1]) | set([1, 3])

# 2018-01-10 10:04:53.076598
+set([3, 1]) ^ set([1, 2, 3])

# 2018-01-10 10:05:02.446124
+len(set([3, 1]) ^ set([1, 2, 3]))

# 2018-01-10 10:07:16.434930
+{1, 2} ^ {1, 3, 2}

# 2018-01-10 10:07:22.816409
+{1, 2} ^ {1, 3}

# 2018-01-10 10:07:26.226815
+{1, 2} ^ {1, 2}

# 2018-01-10 12:06:37.826012
+'''min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 1
+min 0'''.split('\n')

# 2018-01-10 12:06:39.401326
+a = _

# 2018-01-10 12:06:39.847508
+a

# 2018-01-10 12:06:42.199399
+len(a)

# 2018-01-10 12:08:07.268711
+len([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50])

# 2018-01-10 12:09:07.214756
+len([1, 32, 11, 38, 5, 49, 9, 50, 16, 2, 29, 21, 34, 30, 10, 39, 33, 45, 15, 44, 37, 17, 4, 18, 47, 12, 46, 51, 27, 6, 48, 8, 26, 31, 28, 3, 20, 35, 36, 22, 7, 23, 24, 14, 25, 13, 41, 19, 42, 40, 43])

# 2018-01-10 12:12:01.567173
+sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50])

# 2018-01-10 12:12:05.249323
+sum([1, 32, 11, 38, 5, 49, 9, 50, 16, 2, 29, 21, 34, 30, 10, 39, 33, 45, 15, 44, 37, 17, 4, 18, 47, 12, 46, 51, 27, 6, 48, 8, 26, 31, 28, 3, 20, 35, 36, 22, 7, 23, 24, 14, 25, 13, 41, 19, 42, 40, 43])

# 2018-01-10 12:13:11.423240
+sorted([44, 15, 37, 17, 4, 18, 47, 12, 46, 51, 27, 1, 32, 11, 38, 5, 49, 9, 50, 16, 2, 29, 21, 34, 30, 10, 39, 33, 45, 42, 19, 41, 13, 25, 14, 6, 48, 8, 26, 31, 28, 3, 20, 35, 36, 22, 7, 23, 24, 43, 40])

# 2018-01-10 12:14:14.234094
+sum([1, 32, 11, 38, 5, 49, 9, 50, 16, 2, 29, 21, 34, 30, 10, 39, 33, 45, 15, 44, 37, 17, 4, 18, 47, 12, 46, 51, 27, 6, 48, 8, 26, 31, 28, 3, 20, 35, 36, 22, 7, 23, 24, 14, 25, 13, 41, 19, 42, 40, 43])

# 2018-01-10 12:14:26.510422
+sum([1, 4, 1, 8, 26, 6, 22, 35, 31, 28, 31, 28, 31, 10, 30, 21, 34, 50, 21, 34, 50, 30, 34, 10, 39, 50, 38, 49, 41, 19, 41, 14, 30, 21, 3, 14, 6, 13, 18, 12, 10, 16, 34, 16, 8, 30, 49, 10, 30, 34, 48])

# 2018-01-10 12:14:37.137926
+sorted([1, 4, 1, 8, 26, 6, 22, 35, 31, 28, 31, 28, 31, 10, 30, 21, 34, 50, 21, 34, 50, 30, 34, 10, 39, 50, 38, 49, 41, 19, 41, 14, 30, 21, 3, 14, 6, 13, 18, 12, 10, 16, 34, 16, 8, 30, 49, 10, 30, 34, 48])

# 2018-01-10 14:41:15.691853
+a = [0, 0, 0.0, 0]

# 2018-01-10 14:41:28.769816
+a.index(0.0)

# 2018-01-10 14:41:36.657370
+type(a[0])

# 2018-01-10 14:41:39.109831
+type(a[2])

# 2018-01-10 14:45:51.753031
+for i in a:
+    print(isinstance(i, float))

# 2018-01-10 17:15:19.903917
+a = []

# 2018-01-10 17:15:31.550277
+def hoge(a, b):
+    a.append(b)

# 2018-01-10 17:15:34.175520
+hoge(a, 10)

# 2018-01-10 17:15:34.689567
+a

# 2018-01-10 17:21:51.966032
+len([2890057, 0.00016929460580912865, 5.722505604689312e-05, 6.613070539419089e-05, 0.0002186139021295566, 0.0008744556085182264, 0.002159369972055212, 5.722505604689312e-05, 3.766789912093463e-05, 0.00011010315154079644, 8.164284616566774e-05, 4.5924100968188105e-05, 0.00011756569847856155, 3.766789912093463e-05, 7.728935619481768e-05, 5.225142154602736e-05, 8.164284616566774e-05, 3.2566675478825915e-05, 0.00010332922717842324, 5.465347553238915e-05, 0.0002931000793094332, 0.00041331690871369294, 0.00016929460580912865, 8.164284616566774e-05, 0])

# 2018-01-10 17:27:44.802693
+len([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

# 2018-01-10 17:34:52.641804
+len(set([0, 31, 10, 15, 21, 4, 14, 43, 33, 8, 1, 2, 35, 27, 30, 47, 50, 45, 26, 6, 5, 46, 16, 36, 3, 11, 48, 49, 28, 29, 38, 32, 44, 18, 40, 12, 13, 7, 25, 20, 34, 19, 17, 24, 23, 22, 42, 39, 41, 37, 9]))

# 2018-01-10 17:44:17.311550
+a = [0, 31, 10, 15, 21, 4, 14, 43, 33, 8, 1, 2, 35, 27, 30, 47, 50, 45, 26, 6, 5, 46, 16, 36, 3, 11, 48, 49, 28, 29, 38, 32, 44, 18, 40, 12, 13, 7, 25, 20, 34, 19, 17, 24, 23, 22, 42, 39, 41, 37, 9]

# 2018-01-10 17:44:22.982728
+1 in a

# 2018-01-10 17:44:26.239581
+a.index(1)

# 2018-01-10 17:44:29.010799
+a.find(1)

# 2018-01-10 17:44:34.737741
+a.find

# 2018-01-10 17:44:36.787063
+a

# 2018-01-10 17:44:42.671408
+find(a)

# 2018-01-11 13:58:50.954464
+from random import choice

# 2018-01-11 13:58:55.538770
+choice([2, 3, 4, 5])

# 2018-01-12 14:43:10.896071
+""" -0.0990396
+-0.00475824
+  0.0954375
+ -0.0632903
+ -0.0916547
+ 0.00781175
+   0.024136
+  0.0498219
+   0.022905
+  0.0106861
+  0.0827945
+  0.0451542
+ -0.0448906
+  0.0503678
+ -0.0720622
+  -0.028404
+  0.0665665
+  -0.048908
+  -0.045128
+  0.0641014
+  0.0277694
+  0.0129957
+ -0.0810247
+-0.00867219
+  0.0528587
+  0.0732092
+ -0.0773992
+  0.0317445
+  0.0297821
+ -0.0830925
+ 0.00381572
+  0.0770649
+  0.0383884
+  0.0215708
+ -0.0796039
+  0.0609946
+  0.0671977
+  0.0232004
+ -0.0815958
+  0.0843316
+  -0.038079
+ -0.0883127
+ -0.0800326
+  0.0188695
+  0.0319312
+ 0.00805015
+  0.0275623
+ -0.0958958
+ -0.0545285
+  0.0978631
+  0.0374749
+  0.0502629
+  0.0611035
+0.000931814
+  0.0689859
+ -0.0519218
+  0.0825417
+ 0.00998909
+ -0.0436335
+  -0.102807
+  -0.104961
+ -0.0756345
+ -0.0185195
+ -0.0494403
+  0.0694839
+   0.100552
+  -0.064507
+  -0.103155
+ -0.0545916
+  0.0898782
+  0.0529553
+  0.0100736
+ -0.0988453
+  0.0993596
+  -0.095344
+ -0.0510398
+ -0.0542395
+  -0.101854
+   0.104984
+  0.0330343
+ 0.00586212
+ -0.0842766
+ -0.0910273
+  0.0175272
+   0.016376
+  0.0525699
+  0.0652755
+ -0.0445193
+ -0.0299454
+  0.0768891
+  0.0341757
+  0.0149576
+  0.0243847
+   0.015762
+  0.0585613
+  0.0467475
+ -0.0262968
+  0.0848291
+  -0.104701
+   0.074932
+  0.0109759
+  -0.103587
+  0.0591639
+  0.0601392
+  0.0169588
+ -0.0543108
+ -0.0360917
+  0.0200891
+  0.0911971
+  0.0964904
+ -0.0668855
+ -0.0443052
+ -0.0130838
+  0.0750291
+ -0.0434908
+ -0.0209133
+ -0.0381638
+ -0.0389138
+-0.00211198
+ -0.0979449
+  0.0617579
+  0.0428194
+ -0.0951461
+ -0.0960548
+  0.0133842
+ -0.0820359
+  0.0623266
+ -0.0913081
+ -0.0651776
+ 0.00530624
+  0.0545784
+  -0.100633
+ -0.0249863
+ -0.0136016
+  0.0104625
+ -0.0943339
+   0.069232
+  0.0812263
+  0.0253412
+  0.0785033
+ -0.0170068
+  0.0909651
+ -0.0104316
+ -0.0192115
+ -0.0905108
+  0.0603743
+ -0.0348049
+ -0.0539468
+ -0.0290172
+  0.0856447
+ -0.0919015
+  0.0750404
+ -0.0639705
+  0.0654777
+ -0.0178654
+ -0.0120875
+ -0.0375302
+  0.0744058
+  0.0163849
+-0.00763347
+  0.0223416
+  0.0228488
+ -0.0922524
+  0.0772942
+  0.0995232
+ -0.0847262
+ -0.0623438
+   0.012913
+ 0.00528467
+ -0.0971411
+  0.0864708
+  0.0958516
+  -0.057574
+ -0.0986614
+  0.0295483
+-0.00907832
+ -0.0303923
+ -0.0600951
+  0.0921391
+ -0.0843446
+   0.029562
+  0.0102514
+ -0.0590991
+ -0.0254514
+ -0.0342505
+-0.00727309
+ -0.0311844
+ -0.0974728
+-0.00986216
+  0.0698142
+ -0.0373016
+ -0.0868557
+ -0.0339611
+  0.0101871
+ -0.0864405
+-0.00798142
+  0.0740484
+ -0.0903677
+ -0.0637786
+ -0.0812154
+ -0.0531657
+  0.0354249
+ -0.0609045
+ -0.0278321
+  -0.013456
+ -0.0705977
+ -0.0679508
+ -0.0399149
+  0.0287803
+ -0.0635918
+  -0.101536
+ -0.0275618
+   0.103887
+ -0.0651252
+  0.0419154
+  0.0928531
+ -0.0945037
+ -0.0450444
+-0.00552299
+   0.095029
+   0.024611
+  0.0273976
+  0.0850522
+  0.0629632
+  0.0729009
+ 0.00728922
+  0.0914548
+ 0.00316706
+ -0.0791064
+-0.00513306
+ -0.0937586
+  0.0471205
+ -0.0786753
+  0.0757808
+ -0.0517807
+ -0.0750257
+   0.100493
+-0.00716856
+  0.0400964
+  0.0724388
+  0.0368981
+  0.0478385
+ -0.0214613
+  0.0239034
+ -0.0652282
+-0.00311594
+  0.0954044
+  0.0116049
+ -0.0667263
+   0.102716
+  0.0669345
+  0.0255792
+  0.0762174
+ -0.0883249
+  -0.074297
+ -0.0842437
+  -0.0372739
+  -0.0243512
+   0.0765334
+   0.0166098
+  -0.0570359
+  -0.0366346
+   0.0241999
+  0.00643733
+   0.0574009
+  -0.0871514
+   0.0738339
+   0.0782287
+   0.0756578
+  -0.0977663
+  -0.0858145
+  -0.0900232
+   0.0863235
+   0.0891676
+  -0.0796626
+   -0.059271
+    0.074026
+   0.0514075
+    0.034093
+  -0.0844253
+  -0.0442706
+   0.0197166
+   0.0445547
+    0.020685
+   0.0404701
+   0.0581808
+   0.0706222
+ -0.00446615
+   -0.102008
+   0.0900076
+   0.0825151
+   0.0970369
+  -0.0937013
+  0.00727981
+  -0.0220188
+   0.0505426
+   0.0946018
+   0.0110539
+   0.0347886
+  -0.0623305
+  -0.0324094
+     0.10374
+   0.0653703
+  -0.0236326
+ -0.00914585
+  -0.0881731
+  -0.0827582
+ -0.00647606
+   0.0810476
+   0.0982752
+    0.068116
+   0.0110784
+  -0.0842593
+ -0.00575609
+    0.087104
+ -0.00740301
+   0.0802779
+   0.0547224
+    0.055868
+  -0.0252857
+  -0.0998993
+   0.0242522
+  -0.0387655
+  -0.0316929
+  -0.0195385
+  -0.0533754
+  -0.0932179
+   -0.045432
+   0.0841964
+   0.0736391
+  -0.0374936
+   0.0518458
+    0.027765
+  -0.0920068
+   0.0752283
+   0.0634055
+-0.000901801
+   -0.088821
+  -0.0912096
+  0.00106826
+   -0.106443
+   -0.104453
+   0.0822218
+ -0.00213277
+  -0.0739435
+  -0.0429153
+  -0.0413243
+   0.0666169
+   0.0411469
+  0.00762378
+   0.0701731
+   0.0715806
+   0.0657624
+   0.0495018
+   0.0199308
+   0.0118843
+  -0.0853522
+  -0.0222281
+  -0.0994966
+    0.078966
+   0.0550843
+  -0.0670373
+  -0.0946138
+   0.0534716
+   -0.108981
+  -0.0823223
+   0.0702467
+   0.0264149
+   0.0166185
+  -0.0964199
+  -0.0798733
+  -0.0233657
+  -0.0303356
+   0.0700767
+   -0.102521
+   0.0750287
+  -0.0866023
+   0.0793976
+   0.0164404
+  -0.0850014
+   -0.105958
+  -0.0676033
+   -0.047597
+   0.0541959
+  -0.0418321
+   -0.063203
+  0.00704075
+   0.0507921
+   0.0230824
+   0.0487032
+  -0.0491015
+   0.0921345
+   0.0916299
+   0.0562453
+ -0.00239933
+   0.0827404
+  0.00641873
+    0.089717
+ -0.00303994
+  -0.0165257
+   0.0143247
+   -0.074705
+  -0.0169972
+   0.0725237
+  -0.0792695
+  -0.0661024
+-0.000679923
+  -0.0808648
+  -0.0462649
+ -0.00780267
+   0.0610518
+   0.0625634
+   0.0825992
+   0.0182249
+   0.0683415
+   0.0534634
+   0.0277844
+   0.0974112
+   0.0791616
+  -0.0546761
+   0.0846449
+  -0.0210952
+   -0.076457
+  -0.0768191
+  -0.0335301
+    -0.02895
+  0.00392841
+   -0.107543
+   0.0913766
+    0.110182
+  -0.0219649
+  -0.0724852
+   0.0955796
+  -0.0247822
+   0.0368319
+  -0.0617197
+  -0.0903705
+   0.0856248
+   0.0468482
+  -0.0447486
+   0.0805925
+   0.0712955
+   0.0155605
+   0.0300824
+   0.0648042
+     0.06361
+  -0.0676396
+  -0.0613618
+  -0.0112037
+   0.0315719
+   0.0172494
+  -0.0201829
+   0.0695522
+  -0.0639401
+ -0.00935652
+   0.0552665
+  -0.0776184
+  -0.0978562
+   0.0767051
+  -0.0835597
+   0.0495982
+  -0.0700812
+  -0.0165622
+   0.0117525
+   0.0291505
+   0.0386737
+  0.00401175
+   0.0647103
+   0.0946879
+  -0.0708424
+  -0.0544804
+   0.0662196
+   0.0772615
+  -0.0418804
+ -0.00577766
+  -0.0351597
+   0.0226151
+   0.0609795
+  -0.0335336
+   0.0631348
+  -0.0410859
+   0.0134072
+   0.0868879
+   0.0731022
+   0.0280387
+   0.0760428
+ -0.00691623
+  -0.0649423
+   0.0914936
+ -0.00091327
+  -0.0188518
+ -0.00604873
+  0.00584775
+  -0.0415963
+   0.0517107
+  -0.0112011
+  -0.0913158
+  -0.0853387
+  -0.0531976
+  -0.0720284
+  -0.0248412
+  -0.0532084
+   0.0557188
+   -0.103506
+   0.0338213
+  -0.0151115
+  -0.0817687
+  -0.0480694
+   0.0817539
+  -0.0920032
+  -0.0100815
+  -0.0280715
+   0.0927838
+   0.0318567
+  -0.0408051
+  0.00327349
+   0.0590014
+   0.0262901
+  -0.0921498
+  -0.0340252
+  -0.0446224
+  0.00286371
+  -0.0319941
+   0.0431342
+   0.0906845
+    0.097749
+  -0.0906894
+   0.0366245
+   0.0432474
+   0.0619165
+   0.0677579
+   0.0962429
+    0.049783
+ -0.00352413
+   0.0140231
+   0.0496256
+ -0.00417562
+   -0.066435
+   0.0804915
+  -0.0953044
+   0.0308152
+   0.0767135
+  -0.0255081
+  -0.0575195
+  -0.0872248
+  -0.0913192
+ -0.00673945
+   0.0389691
+    0.107404
+  -0.0201714
+  -0.0886747
+    0.049889
+   -0.109929
+   -0.076833
+   0.0721384
+  -0.0680515
+  -0.0128621
+-0.000217632
+   0.0553247
+    0.093617
+   0.0419082
+   0.0813564
+   -0.043755
+   0.0186288
+   0.0546381
+   0.0857439
+   0.0794972
+  -0.0963497
+     0.11327
+  -0.0864148
+   0.0391979
+   -0.029192
+  -0.0518861
+  -0.0107749
+   0.0839152
+  -0.0252286
+  -0.0220436
+  -0.0405267
+   0.0158342
+     0.05751
+   0.0421091
+  -0.0719017
+   0.0147143
+   0.0288103
+  -0.0712075
+  -0.0507044
+  0.00146211
+   0.0608083
+   0.0332143
+  -0.0163143
+ -0.00388908
+   0.0926617
+   -0.104533
+   0.0661404
+  0.00325896
+    0.107075
+   0.0548713
+  -0.0357501
+   0.0232508
+  -0.0285552
+   0.0667771
+   0.0604207
+    0.108082
+   0.0620254
+  -0.0975697
+   0.0885345
+ -0.00165004
+   0.0809555
+   0.0437332
+  -0.0354987
+   0.0481421
+  -0.0443955
+   0.0433476
+  -0.0561662
+ -0.00743848
+  0.00245879
+  0.00330862
+   -0.081436
+   0.0640848
+   -0.069636
+    -0.09086
+  -0.0234472
+  -0.0194477
+   0.0245955
+  -0.0755321
+   0.0838419
+   0.0522497
+   0.0834614
+   0.0734979
+   0.0022546
+  -0.0940156
+    0.056101
+    -0.09157
+   -0.035791
+  -0.0991316
+  0.00184528
+  0.00840676
+  -0.0624941
+  -0.0326821
+   -0.109357
+   0.0726755
+   0.0371702
+  -0.0713985
+   0.0929258
+   0.0678046
+   0.0218901
+  0.00697488
+  -0.0596902
+  -0.0665344
+    0.114106
+   0.0481835
+   0.0816446
+   -0.106031
+   0.0688235
+   0.0252576
+  -0.0645241
+  -0.0285503
+  -0.0424876
+  -0.0367943
+   -0.060268
+  -0.0301152
+  0.00618815
+     0.04705
+  -0.0737061
+   -0.102605
+   0.0287267
+   0.0928136
+   0.0395602
+  -0.0598016
+  -0.0113727
+  -0.0784009
+  -0.0652181
+   0.0897379
+   0.0448154
+   0.0111707
+  -0.0961825
+  -0.0320313
+  -0.0268522
+   0.0427578
+   0.0315013
+  -0.0551301
+  -0.0549924
+   0.0453605
+  -0.0454169
+   0.0620062
+  -0.0367891
+   0.0638698
+  -0.0884182
+   -0.106949
+-0.000203339
+  -0.0829072
+   0.0856969
+   0.0191221
+ -0.00367887
+   0.0231632
+  -0.0533516
+   0.0792729
+    0.084276
+  -0.0181308
+  -0.0303304
+   0.0263441
+   0.0142655
+   0.0760399
+   0.0445362
+    0.083588
+   -0.102711
+   0.0650719
+   0.0390898
+  0.00804131
+   0.0410311
+   0.0545153
+   0.0793196
+    0.082135
+   0.0255878
+  -0.0532277
+  -0.0800949
+   -0.046699
+   0.0519062
+  -0.0558313
+  -0.0842177
+  0.00493084
+  -0.0746639
+   0.0269348
+   0.0804165
+  0.00386875
+   0.0642914
+   0.0726654
+   0.0796226
+ -0.00497279
+  -0.0139274
+   0.0126475
+  -0.0434335
+  -0.0189436
+  0.00642088
+   0.0381245
+  -0.0984879
+   0.0632286
+  -0.0796563
+    0.096933
+    0.086621
+   -0.112963
+  -0.0660288
+   0.0504336
+   0.0915701
+   0.0450613
+   0.0811866
+  -0.0543169
+  -0.0505766
+   0.0430109
+  -0.0482787
+   0.0424204
+ -0.00618218
+   -0.101717
+  -0.0797944
+    0.100577
+    0.110542
+   0.0344789
+   0.0849995
+ -0.00568967
+    0.030857
+  -0.0211926
+    0.113388
+  -0.0902657
+   0.0670177
+   0.0337697
+   -0.082857
+   0.0812127
+    0.059702
+   0.0422816
+    0.053142
+   0.0652393
+  -0.0219025
+    0.101488
+  -0.0131266
+  -0.0249801
+   0.0631903
+   0.0144588
+  -0.0900095
+   -0.106715
+   0.0157916
+  -0.0733767
+  -0.0796054
+  0.00164752
+   0.0483973
+   0.0712472
+   0.0369334
+   0.0956257
+   0.0212915
+  -0.0860079
+  -0.0991895
+   0.0485397
+  -0.0792307
+  -0.0837881
+   0.0984015
+   0.0558892
+  -0.0593438
+    0.041537
+  -0.0853943
+  0.00525565
+  0.00790766
+   0.0385927
+  -0.0172994
+   0.0647214
+  -0.0186225
+   0.0532342
+    0.046033
+   0.0175117
+  -0.0285243
+     -0.0928
+  -0.0194964
+  -0.0840578
+   0.0543442
+   -0.045769
+   0.0266992
+   0.0227458
+  -0.0322763
+   0.0921977
+   0.0850968
+   0.0556237
+   0.0474228
+   0.0668825
+   0.0118267
+   0.0526468
+   0.0859587
+   0.0515849
+   0.0260044
+ -0.00539637
+   0.0220011
+   0.0437131
+   0.0798967
+  0.00857974
+   0.0817433
+   -0.069617
+   0.0702954
+   -0.014515
+   -0.106713
+  -0.0586727
+   0.0998025
+   0.0263918
+    0.105623
+   0.0161955
+   -0.101106
+   0.0266676
+  -0.0243847
+    0.010544
+   0.0792135
+   0.0578206
+   -0.111756
+  -0.0806731
+  -0.0213074
+  -0.0291847
+  -0.0315129
+  0.00816068
+  -0.0918475
+   0.0105197
+   0.0123622
+  0.00673495
+  -0.0988636
+    0.025226
+   0.0544318
+   0.0275684
+  -0.0678099
+  -0.0676812
+   0.0458102
+    0.022934
+-0.000481049
+   0.0587507
+  -0.0963589
+   0.0128399
+   0.0766045
+  0.00172369
+  -0.0252647
+  -0.0494196
+   0.0051452
+  -0.0784421
+   0.0739821
+  -0.0783621
+   -0.054037
+   0.0597844
+   0.0554745
+  -0.0234104
+  -0.0734225
+  -0.0253259
+    0.106557
+  -0.0943945
+   -0.103176
+   0.0141089
+   -0.013351
+    0.048277
+  -0.0758794
+    0.055535
+   0.0238246
+  -0.0272035
+   0.0630989
+  -0.0448924
+  -0.0109481
+  -0.0413658
+   0.0373154
+   0.0547726
+   0.0912946
+   -0.106316
+  -0.0213482
+   0.0904342
+   0.0248656
+   0.0792404
+   0.0744892
+   0.0958923
+   0.0551685
+    0.082616
+   0.0614206
+  -0.0237167
+  -0.0623937
+   0.0394193
+    0.105959
+  0.00462368
+   -0.114421
+ -0.00830855
+  -0.0649624
+    0.089881
+    0.119545
+  -0.0109625
+   -0.024177
+   0.0751593
+   0.0212551
+  -0.0818727
+   0.0400898
+  -0.0564474
+   0.0782155
+  -0.0953219
+    0.087909
+   -0.031404
+   0.0639608
+ -0.00954918
+  -0.0554252
+    0.101133
+   0.0918443
+  -0.0431448
+  -0.0960864
+   0.0616288
+  -0.0162028
+   0.0799836
+   0.0398865
+   0.0187641
+   0.0803607
+   0.0474861
+  -0.0720382
+   0.0420684
+    0.107522
+   0.0859284
+   0.0118041
+   0.0345066
+  -0.0563392
+   0.0882372
+   0.0642861
+   0.0316786
+   0.0307158
+   -0.108191
+   0.0985454
+  -0.0590372
+   0.0480991
+  -0.0175814
+   0.0607819
+  -0.0156845
+  -0.0618266
+   0.0252731
+  -0.0337688
+   0.0843316
+  -0.0972919
+  0.00204099
+  -0.0122043
+  -0.0673182
+   0.0522009
+  -0.0448139
+   0.0562795
+    0.109638
+   0.0495836
+  -0.0930679
+  -0.0535107
+  -0.0166167
+   0.0406353
+  -0.0396978
+    0.013609
+   -0.100534
+    0.071052
+   -0.117679
+  -0.0683214
+   0.0357296
+  -0.0094727
+   0.0122845
+  0.00169823
+   0.0736178
+    0.038325
+  -0.0187237
+   0.0189504
+  -0.0319349
+   -0.066762
+   0.0516046
+   -0.091726
+   0.0447264
+  -0.0434619
+  -0.0122216
+  0.00699744
+  -0.0368089
+  -0.0200273
+    0.080357
+  -0.0147925
+   0.0979326
+  -0.0725036
+  -0.0951096
+   0.0977411
+  -0.0668422
+   0.0734081
+   0.0781562
+   0.0968682
+   0.0785878
+  -0.0918456
+   0.0605024
+  -0.0979592
+   0.0507231
+ -0.00595932
+   0.0828001
+  -0.0612799
+  -0.0367476
+   0.0803555
+  -0.0673118
+  -0.0221546
+   -0.102816
+  -0.0755411
+  -0.0339753
+    0.109702
+   0.0825753
+   0.0529216
+  -0.0916315
+    0.105601
+  -0.0626781
+   0.0469248
+   -0.047505
+  -0.0549109
+  -0.0621617
+   0.0744391
+  -0.0534333
+  -0.0511695
+   -0.065409
+   -0.107445
+   0.0843998
+  -0.0593209
+   -0.106084
+   0.0798749
+  -0.0896278
+    0.102134
+-0.000900769
+   0.0544682
+   -0.104554
+   -0.102727
+   0.0746151
+ -0.00794323
+  -0.0370011
+   0.0232982
+   0.0766589
+  -0.0402688
+  -0.0488669
+ 0.000770325
+  -0.0837701
+   0.0663406
+  -0.0584156
+   0.0692774
+   -0.054866
+  -0.0946383
+   0.0989342
+  0.00174772
+    0.043489
+  -0.0932088
+  -0.0161034
+  -0.0415682
+  -0.0327237
+   0.0265199
+   0.0793435
+   0.0204117
+   0.0819324
+ -0.00744663
+  0.00412375
+    0.100189
+   0.0288059
+    0.100655
+ 0.000854432
+   0.0119565
+   -0.102888
+   0.0873981
+   0.0893191
+-0.000369009
+   0.0017543
+   0.0752374
+   -0.046564
+  -0.0921987
+  -0.0291288
+  -0.0424017
+    0.104327
+  0.00923869
+  -0.0694668
+   0.0690774
+  -0.0988885
+   0.0195174
+   0.0435122
+   -0.037573
+   0.0555046
+  0.00255969
+   0.0458363
+   0.0588438
+   0.0627237
+  -0.0195344
+   0.0721191
+  -0.0290985
+   0.0296036
+   0.0728188
+  -0.0883571
+   0.0671923
+ -0.00175003
+   0.0208434
+   -0.103475
+   0.0350766
+   0.0727967
+  -0.0776098
+  -0.0542435
+   0.0628675
+    0.100289
+  0.00292253
+   -0.067736
+   0.0204725
+   0.0365088
+  -0.0734477
+  -0.0486032
+   0.0991166
+   0.0942073
+  -0.0302558
+   0.0499265
+   0.0821467
+   -0.102903
+  -0.0830829
+      0.1081
+  -0.0268409
+ -0.00461264
+   0.0158218
+   -0.054794
+   0.0291861
+   0.0154828
+   0.0319468
+   0.0767082
+  -0.0900407
+  -0.0492159
+   0.0972097
+   0.0167272
+  -0.0558335
+  -0.0965737
+   0.0832782
+   -0.106463
+  -0.0469714
+   0.0224351
+   0.0307822
+  -0.0740416
+   -0.103111
+  -0.0656934
+  -0.0701926
+   0.0622439
+   0.0315246
+  -0.0386395
+  0.00318178
+  -0.0316972
+   0.0215235
+   0.0723953
+   0.0480993
+ -0.00103115
+   -0.035862
+  -0.0400763
+  -0.0576126
+   0.0990406
+   0.0683072
+   0.0947534
+   -0.103564
+   0.0520232
+   0.0157855
+  -0.0484466
+   0.0930898
+   0.0579642
+  -0.0387282
+  -0.0487868
+  -0.0708667
+  -0.0266521
+  -0.0779101
+   0.0792258
+  -0.0315841
+   0.0536545
+  -0.0702984
+ -0.00818727
+  -0.0671043
+  -0.0393448
+   0.0398741
+   0.0908379
+  -0.0703224
+    0.013038
+  0.00583497
+   -0.015199
+   0.0584487
+  -0.0383928
+   0.0286483
+  -0.0769324
+  -0.0312248
+   0.0510158
+  -0.0278949
+   0.0481045
+   -0.104884
+   0.0887276
+  -0.0410011
+   0.0704442
+   0.0911128
+  0.00654714
+  -0.0390029
+   0.0885548
+  0.00373746
+    0.048158
+  -0.0234863
+   0.0736228
+   0.0409053
+  -0.0332442
+  -0.0647936
+   0.0892796
+   -0.056688
+  -0.0418903
+    0.028524
+  -0.0513767
+  -0.0321493
+  -0.0410468
+  -0.0284666
+  -0.0136656
+  -0.0311003
+   0.0993389
+  -0.0458536
+ -0.00569986
+  -0.0272239
+ -0.00645427
+  -0.0919141
+   -0.105958
+   -0.038801
+   -0.101506
+  -0.0208319
+  -0.0296382
+   -0.084129
+   0.0467659
+    0.038575
+  -0.0772192
+  -0.0335134
+   0.0037977
+ -0.00653542
+  -0.0784379
+   0.0254589
+   0.0958452
+   0.0905073
+   0.0356579
+   0.0270382
+   0.0789529
+   -0.095654
+  -0.0722739
+   0.0820927
+   0.0619853
+  -0.0176919
+   0.0673063
+    -0.04202
+   0.0949458
+   0.0505375
+  -0.0574928
+    0.083949
+  -0.0633314
+   0.0204285
+    0.051334
+  -0.0517578
+  -0.0569732
+  -0.0435261
+   0.0607954
+   0.0216768
+  0.00446204
+  -0.0468922
+  -0.069169
+    0.11061
+  0.0285759
+  -0.073208
+   0.015356
+ -0.0119141
+ -0.0922442
+  0.0730468
+  0.0182189
+ -0.0895105
+-0.00841609
+ -0.0677607
+ -0.0040425
+ -0.0567604
+ -0.0416325
+ -0.0331824
+ -0.0670934
+ -0.0454377
+ -0.0116129
+  0.0584522
+   0.109533
+ -0.0188886
+  0.0246307
+  0.0684021
+ -0.0695014
+  0.0800152
+   0.106926
+  0.0834375
+  0.0740413
+  0.0761319
+ -0.0814911
+ -0.0532071
+  -0.036629
+ -0.0886753
+  -0.004731
+  -0.075275
+  0.0113831
+ 0.00948007
+  0.0663005
+ -0.0138495
+  0.0134992
+ -0.0830844
+  0.0890793
+  -0.047925
+  -0.096828
+ -0.0028266
+  0.0161468
+  -0.119208
+  0.0771219
+  0.0205742
+  0.0600924
+  0.0796733
+ -0.0100105
+ -0.0872818
+  -0.044125
+  0.0958359
+ -0.0583101
+ -0.0677485
+  0.0010287
+ -0.0761229
+  0.0361443
+ -0.0494675
+ -0.0345529
+  0.0740966
+ -0.0222286
+ -0.0153093
+ -0.0186749
+  0.0515809
+ -0.0225263
+  0.0420372
+    0.10321
+ -0.0682855
+  0.0537113
+  0.0851281
+ -0.0826283
+ 0.00832659
+ -0.0693629
+  -0.075592
+   0.103444
+  0.0845595
+  0.0359118
+  0.0106468
+ -0.0996039
+  0.0478973
+  0.0532115
+  0.0166931
+  0.0244979
+ -0.0733167
+  0.0619128
+-0.00251736
+ -0.0366241
+    0.01681
+  0.0664171
+ -0.0301926
+  0.0248515
+ -0.0443965
+ -0.0895386
+ -0.0553098
+ -0.0249299
+  0.0685604
+ 0.00341434
+  -0.110365
+ -0.0759722
+ -0.0755182
+-0.00182798
+  -0.019264
+0.000199071
+ -0.0222504
+ 0.00704765
+ -0.0445146
+  0.0687941
+  0.0318694
+-0.00374116
+  0.0487368
+ -0.0310038
+   0.100126
+ -0.0274907
+  0.0424375
+  0.0550611
+  0.0800475
+ -0.0116708
+ -0.0337587
+  0.0852376
+ -0.0596396
+ -0.0112802
+  0.0395773
+ -0.0706427
+  0.0679857
+  0.0804925
+  0.0928297
+ -0.0473375
+  0.0543762
+  0.0875681
+ -0.0769916
+  0.0964183
+  0.0609881
+ -0.0351787
+ -0.0224818
+0.000427093
+-0.00879116
+  0.0313618
+ -0.0495743
+  0.0452239
+ -0.0821535
+ -0.0729892
+ -0.0643998
+  0.0461679
+ -0.0891367
+  0.0792403
+  -0.100003
+   -0.10686
+  0.0958115
+  0.0899014
+  -0.103136
+   0.104015
+ -0.0371779
+ -0.0689056
+  0.0217972
+  0.0845064
+ -0.0909939
+ 0.00813116
+ -0.0772879
+  -0.106244
+ -0.0240439
+ -0.0322208
+ 0.00141254
+  0.0477342
+  0.0118429
+  0.0197726
+  -0.043653
+ -0.0954563
+ -0.0511633
+ -0.0389225
+ -0.0753407
+ -0.0322985
+ -0.0469442
+ -0.0925861
+  0.0223865
+  0.0600239
+  0.0310815
+ -0.0980877
+ -0.0455706
+  0.0216309
+  0.0476545
+  0.0761343
+ -0.0378233
+   0.103765
+  -0.109116
+ -0.0394119
+  0.0245194
+  0.0914202
+  0.0637296
+ -0.0685225
+  0.0882141
+  0.0630098
+ -0.0840675
+ -0.0875692
+  0.0673437
+ -0.0770834
+  -0.044732
+ -0.0351519
+  0.0415795
+ -0.0170408
+ -0.0393106
+  0.0713365
+  0.0188789
+  0.0510031
+  0.0611003
+   0.108617
+ -0.0495371
+ -0.0304742
+ -0.0593736
+ -0.0799723
+ -0.0326502
+  0.0706436
+  0.0835154
+  0.0714866
+  -0.111002
+  0.0877223
+  0.0544234
+  0.0965698
+  0.0839884
+ -0.0828456
+  0.0800923
+  0.0553492
+  0.0155324
+  0.0737841
+  0.0488951
+   0.063357
+  -0.067726
+  0.0073683
+  -0.100435
+  0.0234086
+  0.0812253
+  -0.101332
+  0.0784422
+ -0.0233615
+ 0.00498563
+ -0.0870598
+  0.0993612
+ -0.0667877
+ -0.0305931
+  0.0437844
+  -0.107562
+ -0.0388445
+  0.0559792
+  0.0126683
+ 0.00352407
+  0.0323368
+  0.0270778
+ 0.00745653
+ -0.0118854
+ -0.0379005
+  0.0224683
+  0.0412225
+ -0.0233577
+   0.0316235
+   0.0281169
+   -0.101388
+  -0.0326985
+   0.0765626
+    -0.08761
+  -0.0337295
+   0.0306012
+  -0.0824347
+  -0.0080782
+  -0.0705774
+   0.0669147
+  -0.0735042
+   -0.018056
+  -0.0718419
+  -0.0706594
+   0.0795282
+  -0.0909454
+ -0.00953434
+  -0.0659632
+   0.0665381
+   0.0450702
+    0.125656
+   0.0105678
+   -0.058217
+   0.0467575
+   0.0383663
+  -0.0286371
+  -0.0683504
+-0.000493153
+    0.055373
+    0.103751
+  -0.0175518
+   0.0304021
+   -0.112197
+   0.0106076
+   0.0100126
+   0.0039426
+    0.104274
+  0.00672197
+   0.0456474
+   0.0806649
+  -0.0630291
+  -0.0382765
+   0.0542372
+   0.0489042
+  -0.0931306
+   0.0471701
+  -0.0503233
+   -0.116009
+   0.0646072
+  -0.0861593
+    0.058208
+   0.0189816
+  -0.0281218
+  -0.0656342
+  -0.0986772
+  -0.0146424
+   -0.110348
+  -0.0928787
+  -0.0587506
+    0.100908
+   0.0705842
+  -0.0132385
+-0.000292844
+   0.0606579
+    0.015177
+   -0.081383
+ -0.00550523
+   0.0572213
+    0.106397
+    0.107971
+ -0.00231694
+  -0.0711715
+  -0.0366914
+   0.0767442
+   0.0341967
+ -0.00612589
+  -0.0741268
+  -0.0998569
+    0.044818
+   -0.088385
+  -0.0961124
+   0.0276031
+  -0.0654477
+  -0.0577488
+   0.0721287
+  -0.0267403
+  -0.0400373
+  -0.0453412
+  -0.0369326
+   -0.108782
+  -0.0393973
+   0.0531564
+  -0.0350548
+  -0.0140827
+  -0.0389784
+  -0.0421046
+  -0.0308554
+   0.0310958
+   0.0581275
+  -0.0713805
+  -0.0410994
+    0.059105
+  -0.0035143
+    0.118287
+   -0.061154
+   -0.056776
+   0.0598043
+  -0.0597816
+   0.0201082
+  -0.0634392
+  -0.0609617
+  -0.0744524
+   0.0134098
+   0.0602598
+ -0.00436482
+  -0.0709862
+  -0.0509318
+  -0.0779465
+  -0.0126431
+  -0.0500882
+  0.00242437
+   0.0140409
+  -0.0155277
+  -0.0624473
+   -0.112643
+   0.0228084
+   0.0351339
+   0.0349991
+   0.0806004
+  -0.0710813
+   0.0877355
+   -0.042846
+    0.115764
+  -0.0212065
+  -0.0269593
+   0.0298485
+  -0.0570757
+   0.0488738
+  -0.0917917
+ -0.00799598
+   0.0374808
+   0.0665756
+  -0.0726912
+  -0.0270884
+  -0.0817379
+   -0.079811
+  -0.0231094
+ -0.00011755
+   0.0275056
+   0.0723303
+  -0.0852322
+    -0.11148
+   0.0750558
+  -0.0987545
+   0.0750531
+  -0.0717221
+  0.00286823
+  -0.0545325
+  0.00956582
+   -0.073318
+   0.0718852
+  -0.0971579
+   0.0605508
+   0.0502804
+  -0.0742818
+  -0.0135374
+  -0.0569941
+    0.106151
+   0.0386528
+    0.082914
+   -0.049669
+   0.0586787
+  -0.0767146
+ -0.00563396
+  0.00313062
+   -0.068445
+  -0.0905747
+   0.0508887
+   0.0201721
+   0.0597679
+   0.0296281
+    0.124263
+  -0.0737238
+   0.0311757
+   0.0720948
+ -0.00675013
+  -0.0618472
+   0.0113678
+   0.0224695
+  0.00239771
+   -0.120614
+  -0.0842051
+   0.0893111
+   0.0432061
+  -0.0588338
+  -0.0468685
+   -0.113605
+  -0.0148615
+  -0.0309724
+  -0.0455862
+   0.0585995
+  -0.0135172
+    0.032049
+  0.00656225
+  -0.0789943
+   0.0831742
+  -0.0821072
+   -0.100097
+   0.0641881
+   -0.069082
+   0.0210911
+   0.0336491
+  -0.0118418
+   0.0869657
+   0.0349279
+  -0.0317106
+  -0.0900768
+  -0.0742293
+   0.0750761
+  -0.0384601
+    0.074743
+   0.0104315
+    0.102015
+  -0.0697286
+   0.0364928
+  -0.0283531
+  -0.0775222
+   0.0852739
+   0.0222072
+   0.0451754
+   0.0243147
+   0.0369386
+ -0.00814009
+   0.0402295
+   0.0265295
+   0.0211101
+  0.00399337
+   -0.102458
+   0.0623921
+   -0.090031
+   0.0228194
+   0.0764991
+   0.0155149
+    0.103979
+   -0.040729
+  -0.0504053
+   0.0881337
+   0.0352996
+   0.0718827
+  0.00190375
+   -0.135297
+  -0.0115843
+  -0.0819253
+    0.040054
+  0.0338262
+  0.0118127
+ -0.0386462
+  0.0044285
+  0.0626437
+ 0.00529263
+  0.0329769
+ -0.0961764
+ -0.0224167
+  0.0411133
+   0.119717
+ -0.0761592
+  0.0916251
+ -0.0299746
+   0.060785
+ -0.0760416
+ -0.0298221
+   0.126394
+  0.0992945
+  0.0555012
+   0.114969
+ -0.0329626
+  0.0755984
+ -0.0358594
+ -0.0183592
+ -0.0918471
+ -0.0983902
+ -0.0965953
+  0.0369521
+0.000585712
+  0.0119335
+  0.0366481
+   0.096176
+ -0.0600913
+ -0.0455783
+  0.0371867
+ -0.0161441
+ -0.0384491
+ -0.0471975
+ 0.00918396
+ 0.00722806
+-0.00934416
+ -0.0555894
+  0.0612736
+ -0.0305034
+ -0.0607716
+ -0.0626937
+  0.0643084
+ -0.0894955
+  0.0791837
+  0.0051905
+ -0.0775121
+  0.0232988
+   0.109039
+ -0.0223951
+  0.0430403
+0.000264691
+ -0.0570183
+   0.118389
+ -0.0664325
+ -0.0856744
+ -0.0966238
+  0.0256915
+  0.0674545
+-0.00183845
+ -0.0408614
+   0.072783
+  0.0357861
+  -0.114565
+  0.0769291
+ -0.0508302
+ -0.0186057
+-0.00721584
+  -0.107344
+ -0.0289133
+  0.0892649
+ -0.0331701
+ -0.0862261
+ 0.00855599
+  0.0538522
+ -0.0452765
+  0.0037238
+   -0.10648
+   0.105494
+ -0.0897436
+ -0.0292336
+ -0.0731801
+   0.109793
+  -0.029972
+ -0.0807379
+  -0.108598
+  0.0642911
+ -0.0249746
+   0.022406
+  -0.114111
+ -0.0319283
+  0.0551045
+-0.00567526
+ -0.0579815
+  0.0288407
+  -0.120437
+  0.0267975
+  0.0366551
+ -0.0072483
+ -0.0271322
+ -0.0180901
+  0.0092916
+ -0.0267032
+  0.0258951
+  0.0559143
+-0.00827868
+ -0.0504274
+  0.0393522
+ -0.0203301
+ -0.0517372
+ -0.0154896
+  0.0473019
+ -0.0731569
+ -0.0356191
+   0.110734
+ -0.0886818
+  0.0224089
+   0.039108
+-0.00668728
+0.000123057
+   -0.03288
+-0.00438197
+ -0.0278925
+  0.0241843
+ -0.0331684
+  0.0502123
+ 0.00570889
+-0.00709203
+   0.109748
+ 0.00284555
+-0.00241734
+  -0.039941
+    0.04617
+   0.048719
+  0.0882395
+ -0.0761895
+   0.122658
+  -0.024159
+ -0.0216836
+   0.133178
+  0.0649623
+  -0.053604
+ -0.0596132
+   0.020475
+ -0.0743075
+ -0.0766754
+  0.0246537
+  0.0581923
+  -0.105923
+  0.0010718
+   0.023379
+ -0.0507463
+   0.064409
+  0.0627613
+ -0.0350519
+  0.0207175
+ -0.0659526
+  -0.038166
+  0.0670895
+ -0.0653057
+  0.0386416
+ -0.0858625
+ -0.0157117
+  0.0955076
+-0.00408323
+   0.112148
+ -0.0151619
+ -0.0422749
+ 0.00715969
+  0.0508028
+ 0.00957687
+  0.0471259
+ -0.0636828
+  0.0740259
+ -0.0929828
+   -0.11246
+  -0.094129
+  0.0299474
+  -0.083446
+ -0.0614441
+  -0.115195
+  0.0483406
+ -0.0702096
+  0.0368713
+ -0.0842405
+ -0.0647882
+ -0.0553756
+-0.00641787
+  0.0610378
+ -0.0101857
+  0.0169202
+ -0.0651554
+   0.101764
+  0.0103827
+  0.0789307
+   0.105408
+ -0.0260981
+ -0.0201225
+   0.119684
+  0.0775202
+ -0.0547616
+-0.00148128
+   0.101863
+  0.0809448
+  -0.022667
+  0.0214497
+ -0.0832482
+  0.0263711
+  0.0710115
+  0.0497773
+  0.0265544
+ -0.0687671
+ -0.0265171
+ -0.0640017
+  0.0575422
+  0.0360236
+ -0.0375293
+ -0.0771534
+    0.11015
+  0.0207117
+ -0.0744322
+ -0.0925354
+ -0.0812734
+-0.00643797
+ -0.0754766
+   0.111894
+   0.027433
+ -0.0962644
+ 0.00365687
+  -0.021173
+  0.0815594
+ -0.0081179
+-0.00155079
+  0.0333329
+ -0.0390258
+  0.0816367
+  -0.118119
+ -0.0937303
+  0.0933891
+  0.0503435
+  0.0795406
+  0.0359101
+ -0.0487166
+  0.0247453
+  -0.121949
+ 0.00267128
+ -0.0396446
+ -0.0156883
+ -0.0256722
+  0.0403322
+  -0.045449
+   0.0283591
+   0.0548428
+  -0.0636185
+-0.000592068
+  -0.0824342
+   0.0315924
+   -0.081035
+  -0.0255239
+    0.978123
+    0.017753
+  -0.0148373
+  0.00593036
+ -0.00762597
+   0.0022616
+ -0.00617865
+   0.0064608
+ -0.00249492
+ -0.00988486
+  0.00307771
+  -0.0105403
+   0.0113131
+ -0.00470699
+   0.0020705
+   0.0128014
+  -0.0103288
+  0.00339249
+-0.000328512
+ -0.00675437
+  -0.0185119
+ -0.00963538
+  0.00911445
+  0.00672142
+-0.000148759
+ -0.00309972
+ -0.00674478
+ -0.00516794
+  0.00269631
+ -0.00275226
+  -0.0022129
+  0.00468104
+ -0.00943193
+   0.0138758
+  -0.0111477
+  -0.0090543
+   0.0164033
+ -0.00325624
+ -0.00816021
+  0.00688738
+ -0.00739624
+  -0.0071271
+  0.00277256
+ -0.00918328
+  0.00888268
+  0.00608473
+   0.0030682
+  -0.0109956
+ 6.13138e-05
+   0.0052471
+ -0.00596144
+  0.00332556
+  -0.0121898
+  0.00615539
+ -0.00186967
+  0.00795638
+   0.0124546
+ -0.00104176
+  0.00799148
+  0.00655348
+ -0.00302559
+ -0.00516956
+  0.00659348
+  0.00898335
+  0.00294101
+  -0.0174209
+ -0.00418234
+   0.0156014
+ -0.00466816
+  0.00721991
+  -0.0115367
+  -0.0128657
+  0.00361249
+  0.00185291
+  0.00331884
+   0.0128814
+  0.00407807
+ -0.00396905
+  0.00512014
+-0.000286684
+  0.00410586
+  0.00443295
+ -0.00803284
+ -0.00377775
+  -0.0122519
+   0.0105871
+   -0.020944
+ 2.83634e-05
+  0.00559871
+  -0.0153889
+ -0.00596909
+  0.00423122
+   0.0169881
+  -0.0012277
+ -0.00304963
+  0.00321256
+-0.000487369
+  0.00505501
+-0.000681283
+ -0.00196221
+   0.0155618
+ -0.00339593
+ 0.000946541
+ 0.000286452
+  -0.0168035
+ -0.00870478
+   0.0180615
+  0.00363829
+   0.0068486
+ -0.00967833
+ -0.00948997
+ -0.00288822
+ -0.00178251
+ -0.00587404
+  0.00352839
+ 0.000800562
+ 0.000370896
+  0.00487385
+ -0.00586922
+  -0.0105169
+-0.000910622
+   0.0119499
+ -0.00517213
+ -0.00945542
+  0.00946241
+   0.0025928
+  0.00256002
+  -0.0182887
+  -0.0179782
+ -0.00360145
+  0.00291911
+  0.00581999
+  -0.0183719
+-0.000850557
+-0.000129346
+  0.00858616
+  0.00586803
+  0.00608203
+ -0.00915881
+  -0.0135159
+ -0.00320964
+ -0.00238857
+   0.0154824
+   0.0100457
+  0.00126955
+  -0.0189998
+  0.00842446
+ -0.00718187
+ -0.00306062
+ 0.000459156
+  -0.0014076
+  -0.0123874
+ -0.00163755
+  -0.0173459
+  0.00357727
+  -0.0156762
+  0.00372759
+  0.00466688
+  0.00178639
+ -0.00396637
+ -0.00357261
+   0.0060637
+  0.00396079
+   0.0138824
+  0.00216875
+ -0.00496883
+ -0.00041007
+  0.00201712
+ -0.00627851
+ 0.000653257
+  -0.0181163
+   0.0113839
+ -0.00146574
+ -0.00427659
+  0.00681918
+   0.0059794
+ -0.00662998
+  -0.0103461
+   0.0119507
+ -0.00420306
+  0.00163642
+  0.00152819
+  0.00614009
+ 7.12385e-05
+  0.00416268
+  -0.0134163
+    0.013537
+  0.00708466
+ -0.00284024
+  0.00796355
+ -0.00712723
+ -0.00192823
+   0.0176791
+ -0.00529021
+  -0.0033851
+  0.00760658
+ -0.00572404
+  0.00254552
+  -0.0121068
+  0.00231549
+  -0.0103236
+  -0.0136749
+   0.0191048
+  -0.0110681
+ -0.00314268
+    0.010459
+  0.00318092
+ -0.00603203
+  -0.0121083
+-0.000914814
+   -0.020284
+ -0.00975681
+-0.000522848
+  -0.0179309
+   0.0116234
+ -0.00333178
+  0.00349897
+  -0.0151572
+ -0.00395273
+ -0.00688597
+  -0.0197743
+   0.0035315
+   0.0174687
+   0.0215786
+ 0.000721561
+  0.00488327
+  0.00921507
+  -0.0051399
+ -0.00567546
+   0.0101037
+  0.00634996
+   -0.014536
+   0.0165245
+  -0.0136087
+   0.0146852
+   0.0231662
+  0.00173011
+   0.0225958
+   -0.014627
+  0.00344382
+   0.0105016
+ -0.00245746
+ 6.16885e-05
+-0.000131721
+  -0.0106417
+  0.00427082
+ -0.00116493
+  0.00341595""".split('\n')

# 2018-01-12 14:43:12.860847
+a = _

# 2018-01-12 14:43:13.293521
+a

# 2018-01-12 14:43:15.706228
+len(a)

# 2018-01-12 14:43:19.565672
+len(a) / 256

# 2018-01-12 14:43:24.826059
+len(a) / 8

# 2018-01-12 20:20:23.395223
+import keras.backend.tensorflow_backend as K

# 2018-01-12 20:20:31.217605
+K.int_shape([10, 20])

# 2018-01-12 20:20:52.243334
+K.variable([10, 20, 30], dtype=K.floatx)

# 2018-01-12 20:21:04.334868
+K.variable([10, 20, 30], dtype='float32')

# 2018-01-12 20:21:06.193963
+a = _

# 2018-01-12 20:21:06.567476
+a

# 2018-01-12 20:21:13.058795
+K.int_shape(a)

# 2018-01-12 20:21:23.536097
+K.variable([[10, 20, 30], [1, 2, 3]], dtype='float32')

# 2018-01-12 20:21:27.145827
+a = _

# 2018-01-12 20:21:30.828576
+K.int_shape(a)

# 2018-01-12 20:21:44.426278
+K.zeros(K.int_shape(a))

# 2018-01-12 20:54:37.150082
+import numpy as np

# 2018-01-12 20:54:40.440653
+np.random.randn(2, 3)

# 2018-01-12 20:54:57.233838
+np.random.uniform(0, 1, [10, 10])

# 2018-01-12 20:59:16.022090
+np.random.randn(2, 3)

# 2018-01-12 20:59:18.799825
+np.max(np.random.randn(2, 3))

# 2018-01-12 20:59:28.455436
+np.max(np.random.randn(2, 3), 0)

# 2018-01-12 20:59:56.332645
+np.max(np.random.randn(2, 3), 0, axis=0)

# 2018-01-12 20:59:57.758916
+np.max(np.random.randn(2, 3), 0, axis=1)

# 2018-01-12 21:00:00.259763
+np.max(np.random.randn(2, 3), 0)

# 2018-01-12 21:00:07.671677
+a = np.random.randn(2, 3)

# 2018-01-12 21:00:10.995349
+np.max(a, 0)

# 2018-01-12 21:00:13.618806
+a

# 2018-01-12 21:00:21.942327
+max(a, 0)

# 2018-01-12 21:01:05.659703
+a

# 2018-01-12 21:01:09.158086
+a * (a > 0)

# 2018-01-12 21:01:15.953827
+a > 0

# 2018-01-12 21:01:26.633238
+a

# 2018-01-12 21:01:29.195993
+a * Flase

# 2018-01-12 21:01:30.904643
+a * False

# 2018-01-12 21:28:07.962889
+import numpy as np

# 2018-01-12 21:28:14.278134
+import tensorflow as tf

# 2018-01-12 21:28:17.322589
+import keras.backend.tensorflow_backend as K

# 2018-01-12 21:28:30.135467
+m = np.random.randn(784, 784)

# 2018-01-12 21:28:43.378044
+u, v = np.linalg.pinv(m)

# 2018-01-12 21:28:57.101404
+m_inv = np.linalg.pinv(m)

# 2018-01-12 21:29:25.275657
+m_inv_tf = tf.linalg.inv(m)

# 2018-01-12 21:29:30.933301
+m_inv_tf

# 2018-01-12 21:29:38.098534
+sess = tf.InteractiveSession()

# 2018-01-12 21:29:43.252971
+sess.run(m_inv_tf)

# 2018-01-12 21:29:54.762521
+m_inv2 = _

# 2018-01-12 21:29:57.363465
+m_inv2.shape

# 2018-01-12 21:30:02.456195
+m_inv.shape

# 2018-01-12 21:30:18.182168
+np.testing.assert_almost_equal(m_inv, m_inv2)

# 2018-01-12 21:43:30.655249
+tfe.enable_eager_execution()

# 2018-01-12 21:44:22.052846
+u = tf.get_variable("u", shape=(3, 3), dtype=tf.float32, initializer=tf.random_uniform_initializer(0, 1))

# 2018-01-12 21:44:23.053012
+u

# 2018-01-12 21:45:21.095967
+tf.random

# 2018-01-12 21:58:18.952106
+import tensorflow as tf

# 2018-01-12 21:58:21.566289
+tf.inv

# 2018-01-12 21:58:39.205933
+tf.linalg.inv

# 2018-01-12 21:58:47.724346
+tf.norm

# 2018-01-12 23:11:12.004423
+import numpy as np

# 2018-01-12 23:11:40.615254
+a = np.mat([[0, 0, 0], [0, 0, 0], [0, 0.1056, 0]])

# 2018-01-12 23:11:41.197893
+a

# 2018-01-12 23:11:49.108569
+np.linalg.pinv(a)

# 2018-01-12 23:11:57.298124
+import tensorflow as tf

# 2018-01-12 23:12:20.170147
+a = np.mat([[0, 0, 0], [0, 0, 0], [0, 0.1056, 0]])

# 2018-01-12 23:12:20.594187
+a

# 2018-01-12 23:12:24.006298
+tfe.enable_eager_execution()

# 2018-01-12 23:12:33.263214
+tf.linalg.inv(a)

# 2018-01-12 23:12:49.353369
+va = tf.Variable(a)

# 2018-01-12 23:12:54.701925
+va = tfe.Variable(a)

# 2018-01-12 23:12:55.487104
+va

# 2018-01-12 23:13:02.256978
+tf.linalg.inv(va)

# 2018-01-12 23:38:35.651374
+a 

# 2018-01-12 23:38:50.507771
+a = tf.ones((3, 3)) 

# 2018-01-12 23:38:51.120521
+a

# 2018-01-12 23:38:56.656272
+0.01 * a

# 2018-01-12 23:39:46.364189
+tf.multiply(a, 0.0001)

# 2018-01-13 00:07:57.257824
+rcond = 1e-15

# 2018-01-13 00:08:03.770583
+rcond[..., np.newaxis]

# 2018-01-13 00:08:19.247386
+rcond = np.asarray(rcond)

# 2018-01-13 00:08:20.851453
+rcond

# 2018-01-13 00:08:27.126345
+rcond[..., np.newaxis]

# 2018-01-13 00:08:36.302022
+rcond[np.newaxis]

# 2018-01-13 00:08:45.471612
+rcond[np.newaxis] == rcond[..., np.newaxis]

# 2018-01-13 00:08:56.479577
+a = []

# 2018-01-13 00:08:59.025900
+a[...]

# 2018-01-13 00:09:14.295297
+tf

# 2018-01-13 00:11:37.763951
+a = [True, True, False]

# 2018-01-13 00:11:52.743624
+b = [1, 1, 1]

# 2018-01-13 00:11:57.046036
+b[~a]

# 2018-01-13 00:12:06.277871
+a = np.asarray(a)

# 2018-01-13 00:12:13.403380
+b = np.asarray(b)

# 2018-01-13 00:12:14.239142
+a

# 2018-01-13 00:12:14.403768
+b

# 2018-01-13 00:12:17.854981
+b[a]

# 2018-01-13 00:12:21.956225
+b[~a]

# 2018-01-13 00:12:32.440014
+b[~a] = 0

# 2018-01-13 00:12:33.118379
+b

# 2018-01-13 09:52:31.733537
+import numpy as np

# 2018-01-13 09:52:42.084257
+b = np.arange(5, dtype=np.float)

# 2018-01-13 09:52:43.776777
+b

# 2018-01-13 09:52:49.600347
+b[2] = np.NAN

# 2018-01-13 09:52:50.270986
+b

# 2018-01-13 09:52:56.459489
+np.amax(b)

# 2018-01-13 09:53:05.636812
+np.nanmax(b)

# 2018-01-13 09:53:17.022824
+a = np.arange(1, 13).reshape((4, 3)).astype(np.float32)

# 2018-01-13 09:53:17.690500
+a

# 2018-01-13 09:53:22.166449
+np.amax(a)

# 2018-01-13 09:53:32.956477
+np.max(a)

# 2018-01-13 09:53:35.693405
+np.max(a, axis=0)

# 2018-01-13 09:53:42.292495
+np.max(a, axis=1)

# 2018-01-13 09:54:32.221160
+a

# 2018-01-13 09:54:41.357715
+np.amax(a, axis=0)

# 2018-01-13 09:55:56.616619
+m = np.array([[2, 1] [3, 4.]])

# 2018-01-13 09:56:01.442693
+m = np.array([[2, 1], [3, 4.]])

# 2018-01-13 09:56:02.544798
+m

# 2018-01-13 09:56:16.287362
+m.sum(axis=0)

# 2018-01-13 09:56:33.621646
+m.max(axis=0)

# 2018-01-13 09:56:38.732361
+a

# 2018-01-13 09:56:49.739323
+np.amax(a, axis=0)

# 2018-01-13 10:09:27.955779
+np

# 2018-01-13 10:09:38.764907
+np.empty(2, 3)

# 2018-01-13 10:09:56.522902
+np.empty(2, 3, dtype=np.float)

# 2018-01-13 10:10:12.319897
+np.empty(3, dtype=np.float)

# 2018-01-13 10:10:17.075509
+np.empty(10, dtype=np.float)

# 2018-01-13 10:19:05.155330
+import tensorflow as tf

# 2018-01-13 10:19:08.139229
+a = tf.ones((3, 3)) 

# 2018-01-13 10:19:11.848182
+a[...]

# 2018-01-13 10:19:32.016926
+a[..., None]

# 2018-01-13 10:19:37.597852
+tf.newaxis

# 2018-01-13 10:19:42.764381
+a[..., tf.newaxis]

# 2018-01-13 10:19:47.924066
+a[..., tf.newaxis, ...]

# 2018-01-13 10:41:23.012985
+pt

# 2018-01-13 10:43:19.139297
+import tensorflow.contrib.eager

# 2018-01-13 10:47:29.510443
+a = np.random.randn(2, 3)

# 2018-01-13 10:47:31.861879
+import numpy as np

# 2018-01-13 10:47:32.529577
+a = np.random.randn(2, 3)

# 2018-01-13 10:47:33.558232
+a

# 2018-01-13 10:47:36.894425
+a = np.random.randn(3, 4)

# 2018-01-13 10:47:39.285820
+a = np.random.randn(4, 3)

# 2018-01-13 10:47:40.290367
+a

# 2018-01-13 11:16:56.710430
+import tensorflow.contrib.eager

# 2018-01-13 11:16:58.392725
+import tensorflow.contrib.eager as tfe

# 2018-01-13 11:16:59.909068
+tfe.enable_eager_execution()

# 2018-01-13 11:17:10.216459
+a = tf.get_variable('hoge')

# 2018-01-13 11:17:10.803465
+a

# 2018-01-13 11:17:12.699075
+a = tfe.get_variable('hoge')

# 2018-01-13 11:17:17.340605
+import tensorflow as tf

# 2018-01-13 11:17:18.919018
+a = tfe.get_variable('hoge')

# 2018-01-13 11:17:22.359234
+a = tf.get_variable('hoge')

# 2018-01-13 11:17:22.773616
+a

# 2018-01-13 11:17:27.211289
+a = tf.get_variable('hoge', initializer=0)

# 2018-01-13 11:17:28.410633
+a

# 2018-01-13 11:18:02.085227
+a[..., tf.newaxis]

# 2018-01-13 11:50:07.419573
+a

# 2018-01-13 11:50:19.018977
+m = tf

# 2018-01-13 11:50:20.105270
+t

# 2018-01-13 11:50:31.443061
+m = tf.random_normal([7, 5])

# 2018-01-13 11:50:32.381970
+m

# 2018-01-13 11:50:37.556040
+tf.svd(m)

# 2018-01-13 11:50:41.309116
+s, v, d= tf.svd(m)

# 2018-01-13 11:50:48.372745
+u, s, vt = tf.svd(m)

# 2018-01-13 11:50:49.287847
+s

# 2018-01-13 11:51:07.527454
+u, s, vt = tf.svd(m, full_matrices=True)

# 2018-01-13 11:51:08.253946
+s

# 2018-01-13 11:51:44.961221
+u.get_shape()

# 2018-01-13 11:51:46.655247
+u

# 2018-01-13 11:52:01.254208
+m

# 2018-01-13 11:52:05.511791
+m.numpy

# 2018-01-13 11:52:06.469068
+m.numpy()

# 2018-01-13 11:52:10.040070
+np

# 2018-01-13 11:52:12.980754
+import numpy as np

# 2018-01-13 11:52:21.188744
+np.svd(m.numpy())

# 2018-01-13 11:52:25.536189
+np.linalg.svd(m.numpy())

# 2018-01-13 11:52:39.179879
+u, s, vt = tf.svd(m, full_matrices=False)

# 2018-01-13 11:52:42.256551
+u

# 2018-01-13 11:53:21.825125
+s, u, v = svd(m)

# 2018-01-13 11:53:24.514449
+s, u, v = tf.svd(m)

# 2018-01-13 11:53:25.236091
+s

# 2018-01-13 12:14:13.686898
+a

# 2018-01-13 12:14:32.081174
+a = tf.random_uniform([5, 4], 0, 1e-10)

# 2018-01-13 12:14:32.992676
+a

# 2018-01-13 12:14:43.460754
+tfe.enable_eager_execution()

# 2018-01-13 12:14:55.383746
+a = tf.random_uniform([5, 4], 0, 1e-10)

# 2018-01-13 12:14:56.011565
+a

# 2018-01-13 12:15:03.514781
+a.numpy

# 2018-01-13 12:15:04.898425
+a.numpy()

# 2018-01-13 13:08:57.623683
+import tensorflow as tf

# 2018-01-13 13:09:06.644394
+a = tf.random_normal([3, 3])

# 2018-01-13 13:09:06.957801
+a

# 2018-01-13 13:09:12.137846
+a[a < 0]

# 2018-01-13 13:10:03.623939
+a

# 2018-01-13 13:10:23.605281
+t = tf.clip_by_value(a, 0)

# 2018-01-13 13:10:29.445609
+t = tf.clip_by_value(a, 0, 1e+10)

# 2018-01-13 13:10:30.365227
+t

# 2018-01-13 13:10:39.085672
+sess = tf.InteractiveSession()

# 2018-01-13 13:10:41.257307
+sess.run(t)

# 2018-01-13 13:11:39.716184
+sess.run(tf.maximum(t))

# 2018-01-13 13:11:46.787259
+tf.reduce_max(t)

# 2018-01-13 13:11:50.069969
+sess.run(tf.reduce_max(t))

# 2018-01-13 13:12:05.385869
+t = tf.clip_by_value(a, 0, tf.reduce_max(a))

# 2018-01-13 13:12:05.803710
+t

# 2018-01-13 13:12:08.333949
+sess.run(tf.reduce_max(t))

# 2018-01-14 00:28:35.517994
+import numpy as np

# 2018-01-14 00:28:45.146832
+a = np.random.randn(2, 2)

# 2018-01-14 00:28:46.639495
+b = np.random.randn(2, 2)

# 2018-01-14 00:28:51.769433
+a[0, 0] = 0

# 2018-01-14 00:28:53.586350
+b[0, 0] = 0

# 2018-01-14 00:28:54.114508
+a

# 2018-01-14 00:28:54.241343
+b

# 2018-01-14 00:28:56.477312
+a @ b

# 2018-01-15 22:28:07.570004
+1<<5

# 2018-01-15 22:28:12.859329
+2<<2

# 2018-01-15 22:53:53.305739
+v = tf.Variable(initial_value=tf.truncated_normal_initializer())

# 2018-01-15 22:54:14.652391
+v = tf.Variable(initial_value=tf.truncated_normal_initializer(), shape=(5, 7))

# 2018-01-15 22:55:14.936026
+tf.Variable(shape=(10, 20))

# 2018-01-15 22:55:21.509551
+v = tf.Variable(initial_value=tf.truncated_normal_initializer())

# 2018-01-15 22:55:28.341461
+v = tf.Variable(initial_value=tf.truncated_normal_initializer(shape=[10, 20]))

# 2018-01-15 22:56:34.002929
+v = tf.get_variable("v", [1])

# 2018-01-15 22:56:36.077358
+v

# 2018-01-15 22:56:51.090492
+sess = tf.InteractiveSession()

# 2018-01-15 22:56:55.192652
+v.eval()

# 2018-01-15 22:57:00.614199
+tf.global_variables_initializer().run()

# 2018-01-15 22:57:02.731378
+v

# 2018-01-15 22:57:04.411629
+v.eval()

# 2018-01-15 22:57:12.383974
+v.get_shape().as_list()

# 2018-01-16 02:22:10.109025
+init_u = None

# 2018-01-16 02:22:16.731044
+u = 100

# 2018-01-16 02:22:21.771268
+u = init_u and u

# 2018-01-16 02:22:22.182215
+u

# 2018-01-16 02:22:27.448411
+u = 100

# 2018-01-16 02:22:30.665036
+u = init_u or u

# 2018-01-16 02:22:31.082025
+u

# 2018-01-16 02:41:10.535809
+import keras.backend.tensorflow_backend as K

# 2018-01-16 02:41:12.655673
+import tensorflow as tf

# 2018-01-16 02:41:31.829832
+K.variable(tf.random_normal(shape=[784, 100]))

# 2018-01-16 02:44:20.492827
+K.variable(tf.random_normal(shape=[784, 100]), name='u')

# 2018-01-16 02:52:34.045123
+init_u = 1

# 2018-01-16 02:52:36.378315
+u = 3

# 2018-01-16 02:52:39.495859
+s

# 2018-01-16 02:52:43.933838
+s = init_u or u

# 2018-01-16 02:52:44.723582
+s

# 2018-01-16 13:15:05.880162
+tf

# 2018-01-16 13:15:14.016864
+tf.zeros((20, 20))

# 2018-01-16 17:03:07.167626
+q, w, e =tf.svd(tf.random_gamma((3, 5)))

# 2018-01-16 17:03:13.137217
+q, w, e =tf.svd(tf.random_normal((3, 5)))

# 2018-01-16 17:03:20.532335
+s, u, v =tf.svd(tf.random_normal((3, 5)))

# 2018-01-16 17:03:21.531505
+s

# 2018-01-16 17:03:23.796708
+u

# 2018-01-16 17:03:24.894660
+v

# 2018-01-16 19:41:52.805879
+import tensorflow as tf

# 2018-01-17 02:19:59.588029
+from keras.datasets.mnist import load_data

# 2018-01-17 02:20:05.222035
+(x_train, y_train), (x_test, y_test) = load_data()

# 2018-01-17 02:20:11.360152
+from keras.utils.np_utils import to_categorical

# 2018-01-17 02:20:18.669256
+x_train = x_train.astype(np.float32).reshape((-1, 784))

# 2018-01-17 02:20:24.445005
+import numpy as np

# 2018-01-17 02:20:28.179017
+x_train = x_train.astype(np.float32).reshape((-1, 784))

# 2018-01-17 02:20:32.831519
+x_train.shape

# 2018-01-17 02:21:14.225565
+x_train[0].shape

# 2018-01-17 02:21:18.865881
+max(x_train[0])

# 2018-01-17 02:21:25.913514
+x_train /= 255

# 2018-01-17 02:21:30.280673
+max(x_train[0])

# 2018-01-17 02:21:35.598565
+min(x_train[0])

# 2018-01-17 02:21:39.222365
+mean(x_train[0])

# 2018-01-17 02:21:40.857376
+np.mean(x_train[0])

# 2018-01-17 02:22:05.476425
+import tensorflow as tf

# 2018-01-17 02:22:13.838901
+x = tf.placeholder(dtype=tf.float32, shape=[None, 784])

# 2018-01-17 02:22:18.606633
+sess = tf.InteractiveSession()

# 2018-01-17 02:22:23.880968
+tf.global_variables_initializer().run()

# 2018-01-17 02:22:27.701509
+sess.run(x)

# 2018-01-17 02:22:44.051578
+sess.run(x, feed_dict={x: x_train})

# 2018-01-17 03:23:42.388375
+1e-3

# 2018-01-17 03:23:47.566981
+10**(-3)

# 2018-01-17 03:44:08.135909
+import tensorflow as tf

# 2018-01-17 03:44:13.762047
+tf.Variable(shape=(10, 20))

# 2018-01-17 03:44:23.133797
+a = tf.Variable(0)

# 2018-01-17 03:44:23.587800
+a

# 2018-01-17 03:44:31.072235
+import keras.backend.tensorflow_backend as K

# 2018-01-17 03:44:39.125612
+tf.trainable_variables()

# 2018-01-17 03:44:46.773140
+K.shape(tf.trainable_variables()[0])

# 2018-01-17 03:44:51.448211
+K.shape(tf.trainable_variables()[0])[0]

# 2018-01-17 03:45:12.008181
+K.get_variable_shape(tf.trainable_variables()[0])[0]

# 2018-01-17 03:45:13.376974
+K.get_variable_shape(tf.trainable_variables()[0])

# 2018-01-17 03:45:41.981384
+a = tf.Variable(tf.random_normal((10, 20)))

# 2018-01-17 03:45:42.301509
+a

# 2018-01-17 03:45:46.902340
+K.get_variable_shape(tf.trainable_variables()[0])

# 2018-01-17 03:45:50.218318
+K.get_variable_shape(tf.trainable_variables()[1])

# 2018-01-17 04:01:43.873422
+tf.identity(tf.trainable_variables()[1])

# 2018-01-17 13:07:49.862596
+import numpy as np

# 2018-01-17 13:10:37.868513
+pt

# 2018-01-17 13:13:01.551376
+a = np.mat('1 0; 3 -2')

# 2018-01-17 13:13:03.876740
+L = np.mat('1 0; 3 -2')

# 2018-01-17 13:13:11.551595
+U = np.mat('1 2; 0 1')

# 2018-01-17 13:13:12.168499
+L

# 2018-01-17 13:13:12.509505
+U

# 2018-01-17 13:13:14.986829
+L @ U

# 2018-01-17 14:10:05.356233
+import keras.backend.tensorflow_backend as K

# 2018-01-17 14:10:10.131256
+sess = K.get_session()

# 2018-01-17 14:10:11.196823
+sess

# 2018-01-17 14:10:24.746028
+import tensorflow as tf

# 2018-01-17 14:10:47.523287
+sess2 = tf.InteractiveSession()

# 2018-01-17 14:10:49.006735
+sess2

# 2018-01-17 14:10:52.077278
+sess

# 2018-01-17 14:10:53.374148
+sess2

# 2018-01-17 15:41:02.283965
+import tensorflow as tf

# 2018-01-17 15:41:04.455928
+tf.glo

# 2018-01-17 15:41:10.056264
+tf.global_variables_initializer

# 2018-01-17 23:05:25.836292
+a = 10

# 2018-01-17 23:05:38.413359
+a.__add__

# 2018-01-17 23:05:53.249464
+getattr(a, '__add__', None)

# 2018-01-17 23:05:57.389908
+a.__add__

# 2018-01-17 23:08:55.511856
+class A(object):
+    def __init__(self, **kwargs):
+        self.__dict__.update(kwargs)

# 2018-01-17 23:09:03.111131
+A(a=10, b=20, c=30)

# 2018-01-17 23:11:04.838262
+A

# 2018-01-17 23:11:17.677442
+A.__dict__

# 2018-01-17 23:11:23.875689
+A['a']

# 2018-01-17 23:11:39.062853
+A.__dict__['a']

# 2018-01-17 23:11:57.285003
+A

# 2018-01-17 23:12:11.650541
+A.__dict__

# 2018-01-17 23:12:21.318796
+A.__dict__.update(a=10)

# 2018-01-17 23:12:30.952858
+A.__dict__.update({'a': 20})

# 2018-01-17 23:12:37.058812
+A

# 2018-01-17 23:17:30.155476
+from keras.optimizers import SGD

# 2018-01-17 23:36:21.845243
+A.__class__

# 2018-01-17 23:36:27.469179
+A.__class__.__name__

# 2018-01-18 00:28:08.746288
+tfe.enable_eager_execution()

# 2018-01-18 00:28:25.926180
+a = tf.constant([[2, 1], [1, 2]])

# 2018-01-18 00:28:26.658468
+a

# 2018-01-18 00:28:45.688698
+b = tf.random_uniform((2, 2))

# 2018-01-18 00:28:46.587531
+a

# 2018-01-18 00:28:46.719410
+b

# 2018-01-18 00:28:56.457686
+tf.matmul(a, b)

# 2018-01-18 00:29:18.205587
+a = tf.constant([[2, 1], [1, 2]], dtype=tf.float32)

# 2018-01-18 00:29:21.944418
+tf.matmul(a, b)

# 2018-01-18 00:29:27.869674
+tf.multiply(a, b)

# 2018-01-18 00:29:30.137342
+a

# 2018-01-18 00:29:30.335806
+b

# 2018-01-18 00:29:45.866675
+tf.divide(a, b)

# 2018-01-18 00:29:48.951835
+a

# 2018-01-18 00:30:04.963633
+b

# 2018-01-18 00:30:11.937065
+a

# 2018-01-18 00:30:12.306607
+b

# 2018-01-18 00:30:24.645031
+1/0.699

# 2018-01-18 00:30:35.389838
+tf.divide(a, 2)

# 2018-01-18 00:32:31.158339
+tf.divide(a, b)

# 2018-01-18 00:32:34.600973
+tf.truediv(a, b)

# 2018-01-18 00:32:51.004331
+a

# 2018-01-18 00:32:57.660785
+tf.pow(a, 3)

# 2018-01-18 01:56:18.139166
+a

# 2018-01-18 01:56:32.248382
+bias = tf.ones((1, 2))

# 2018-01-18 01:56:34.388343
+a

# 2018-01-18 01:56:34.603321
+b

# 2018-01-18 01:56:37.744473
+bias

# 2018-01-18 01:56:56.960115
+tf.concat([a, bias], axis=2)

# 2018-01-18 01:56:58.100729
+tf.concat([a, bias], axis=1)

# 2018-01-18 01:57:00.137989
+tf.concat([a, bias], axis=0)

# 2018-01-18 01:57:10.777487
+tf.concat([a, bias], axis=-1)

# 2018-01-18 01:57:12.202046
+tf.concat([a, bias], axis=0)

# 2018-01-18 02:04:48.845768
+a = tf.random_normal([6, 7])

# 2018-01-18 02:04:56.715209
+b = tf.random_uniform((6, 1))

# 2018-01-18 02:05:01.443538
+tfe.enable_eager_execution()

# 2018-01-18 02:05:15.230995
+a = tf.random_normal([6, 7])

# 2018-01-18 02:05:16.332072
+b = tf.random_uniform((6, 1))

# 2018-01-18 02:05:21.335705
+tf.concat([a, b], axis=0)

# 2018-01-18 02:05:26.986159
+a

# 2018-01-18 02:05:27.370445
+b

# 2018-01-18 02:05:35.192891
+tf.concat([a, b], axis=1)

# 2018-01-18 02:12:41.063643
+X = tf.random_normal((6000, 784))

# 2018-01-18 02:13:07.266494
+Z = tf.layers.dense(X)

# 2018-01-18 02:13:13.195660
+Z = tf.layers.dense(X, 100)

# 2018-01-18 02:13:15.958094
+Z.shape

# 2018-01-18 02:14:17.935220
+tf.trainable_variables()

# 2018-01-18 02:14:29.244778
+tfe.trainable_variables()

# 2018-01-18 02:14:45.370085
+help(tfe)

# 2018-01-18 02:15:01.257000
+tfe.get_optimizer_variables()

# 2018-01-18 02:15:03.015201
+tfe.get_optimizer_variables

# 2018-01-18 02:15:35.761964
+tf.all_variables()

# 2018-01-18 02:16:07.144890
+X = tf.random_normal((6000, 784))

# 2018-01-18 02:16:11.425928
+Z = tf.layers.dense(X, 100)

# 2018-01-18 02:16:20.947965
+W = tf.trainable_variables()[0]

# 2018-01-18 02:16:23.820732
+W

# 2018-01-18 02:16:48.562574
+b = tf.trainable_variables()[1]

# 2018-01-18 02:16:49.595282
+b

# 2018-01-18 02:20:14.024278
+X_bias = tf.concat([X, b[tf.newaxis, ...]], 1)

# 2018-01-18 02:20:31.278960
+X

# 2018-01-18 02:20:31.587520
+b

# 2018-01-18 02:20:44.854546
+W

# 2018-01-18 02:22:15.603346
+V_bias = tf.concat([W, b[tf.newaxis, ...]], axis=0)

# 2018-01-18 02:22:17.191910
+V_bias

# 2018-01-18 02:23:18.895092
+u_bias = tf.concat([X, tf.ones(6000, 1)], axis=1)

# 2018-01-18 02:23:27.695512
+u_bias = tf.concat([X, tf.ones((6000, 1))], axis=1)

# 2018-01-18 02:23:29.241085
+u_bias

# 2018-01-18 02:23:47.346393
+u_bias = tf.concat([X, tf.ones(6000, 1)], axis=1)

# 2018-01-18 02:25:04.908308
+u_bias

# 2018-01-18 02:25:07.215944
+V_bias

# 2018-01-18 03:14:29.745012
+t = tf.constant([[[1, 1, 1], [2, 2, 2]],
+                 [[3, 3, 3], [4, 4, 4]],
+                 [[5, 5, 5], [6, 6, 6]]])

# 2018-01-18 03:14:30.793514
+t

# 2018-01-18 03:14:37.682550
+tf.slice(t, [1, 0, 0], [1, 1, 3])

# 2018-01-18 03:15:59.236695
+tf.slice(t, [3, 0], [4, t.get_shape()-2])

# 2018-01-18 03:16:05.910768
+tf.slice(t, [3, 0], [4, t.get_shape()[1]-2])

# 2018-01-18 03:16:21.104874
+t = tf.constant([[1, 1, 1], [2, 2, 2]])

# 2018-01-18 03:16:21.982022
+t

# 2018-01-18 03:16:27.162290
+tf.slice(t, [2, 0], [1, t.get_shape()[1]-2])

# 2018-01-18 03:16:31.026862
+tf.slice(t, [2, 0], [2, t.get_shape()[1]-2])

# 2018-01-18 03:17:39.041758
+a = tf.random_normal((785, 100))

# 2018-01-18 03:17:45.798830
+solve = tf.random_normal((785, 100))

# 2018-01-18 03:18:48.713538
+v_op = tf.slice(solve, [0, 0], [784, 100])

# 2018-01-18 03:18:50.266669
+v_op

# 2018-01-18 03:19:19.523571
+bias_op = tf.slice(solve, [784, 0], [785, 100])

# 2018-01-18 03:19:21.655864
+bias_op

# 2018-01-18 03:19:45.464463
+bias_op = tf.slice(solve, [784, 99], [785, 100])

# 2018-01-18 03:19:48.693684
+bias_op

# 2018-01-18 03:20:40.181392
+bias_op = tf.slice(solve, [784, 0], [786, 100])

# 2018-01-18 03:20:41.744075
+bias_op

# 2018-01-18 03:20:49.223456
+bias_op = tf.slice(solve, [784, 0], [784, 100])

# 2018-01-18 03:20:52.846595
+bias_op

# 2018-01-18 03:21:06.270954
+bias_op = tf.slice(solve, [784, 100], [784, 100])

# 2018-01-18 03:21:07.871034
+bias_op

# 2018-01-18 03:21:17.501856
+v_op

# 2018-01-18 03:22:21.277818
+bias_op = tf.slice(solve, [0, 0], [785, 100-1])

# 2018-01-18 03:22:22.675834
+bias_op

# 2018-01-18 03:22:30.788884
+bias_op = tf.slice(solve, [0, 0], [785-1, 100])

# 2018-01-18 03:22:32.786627
+bias_op

# 2018-01-18 03:22:36.646606
+bias_op = tf.slice(solve, [0, 0], [1, 100])

# 2018-01-18 03:22:38.510789
+bias_op

# 2018-01-18 03:22:43.030315
+bias_op = tf.slice(solve, [784, 0], [1, 100])

# 2018-01-18 03:22:44.328828
+bias_op

# 2018-01-18 03:24:00.263630
+s = tf.concat([v_op, bias_op], axis=0)

# 2018-01-18 03:24:10.849709
+sess = tf.InteractiveSession()

# 2018-01-18 03:24:15.850190
+tf.global_variables_initializer()

# 2018-01-18 03:24:18.112609
+tf.global_variables_initializer().run()

# 2018-01-18 03:24:31.265819
+solve.eval == s.eval()

# 2018-01-18 04:02:55.465304
+ls

# 2018-01-18 04:02:58.649845
+se

# 2018-01-18 04:02:59.633259
+sess

# 2018-01-18 04:03:04.883599
+sess.run(tf.no_op())

# 2018-01-18 08:19:37.612392
+tfe.enable_eager_execution()

# 2018-01-18 08:19:41.640228
+a = tf.random_normal((785, 100))

# 2018-01-18 08:19:54.866694
+z = tf.layers.dense(a)

# 2018-01-18 08:20:00.244911
+z = tf.layers.dense(a, 10)

# 2018-01-18 08:20:00.686000
+z

# 2018-01-18 08:20:40.195240
+a = tf.random_normal((785, 100))

# 2018-01-18 08:20:42.469692
+z = tf.layers.dense(a, 10)

# 2018-01-18 08:20:51.468048
+weights = tf.trainable_variables()

# 2018-01-18 08:20:56.088491
+weights

# 2018-01-18 08:21:08.048688
+weights[0].name

# 2018-01-18 08:40:43.845222
+a = {'A': 20, 'B': 10}

# 2018-01-18 08:40:49.866076
+getattr(a, 'A', None)

# 2018-01-18 08:41:01.994007
+hasattr(a, 'A', None)

# 2018-01-18 08:41:04.576370
+hasattr(a, 'A')

# 2018-01-18 08:41:36.085174
+a.has_key

# 2018-01-18 08:42:15.855524
+a

# 2018-01-18 08:44:37.940752
+a.A

# 2018-01-19 04:45:26.140801
+a = {'A': 20, 'B': 10}

# 2018-01-19 04:45:37.640252
+for i, j in a.items():
+    print(i, j)

# 2018-01-19 04:49:26.702425
+a

# 2018-01-19 04:50:07.482625
+k = [{'kernel': "<tf.Variable 'dense_2/kernel:0' shape=(300, 10) dtype=float32_ref>", 'use_bias': True},
+{'kernel': "<tf.Variable 'dense_1/kernel:0' shape=(540, 300) dtype=float32_ref>", 'use_bias': True},
+{'kernel': "<tf.Variable 'dense/kernel:0' shape=(784, 540) dtype=float32_ref>", 'use_bias': False}]

# 2018-01-19 04:50:07.959147
+a

# 2018-01-19 04:50:08.840559
+k

# 2018-01-19 04:50:14.931657
+k.iteritems()

# 2018-01-19 04:50:32.225190
+k[0]

# 2018-01-19 04:53:16.308149
+k

# 2018-01-19 04:53:23.450456
+for q, w in zip(k):
+    print(q, w)

# 2018-01-19 04:53:32.026980
+for q, w in zip(*k):
+    print(q, w)

# 2018-01-19 04:53:34.718064
+k

# 2018-01-19 04:53:50.105404
+zip(**k)

# 2018-01-19 04:54:11.719540
+zip(*k)

# 2018-01-19 04:54:25.378741
+for q, w in zip(*k):
+    print(q, w)

# 2018-01-19 04:54:31.945615
+for q in zip(*k):
+    print(q)

# 2018-01-19 04:58:22.807139
+getattr(k[0], 'kernel')

# 2018-01-19 05:32:10.160228
+a = [True, True, False]

# 2018-01-19 05:32:10.436810
+a

# 2018-01-19 05:32:18.193617
+a.append('A')

# 2018-01-19 05:32:19.973817
+a.append('C')

# 2018-01-19 05:32:20.368223
+a

# 2018-01-19 05:32:25.878155
+a[0] = "Q"

# 2018-01-19 05:32:26.550199
+a

# 2018-01-19 05:32:30.869658
+a[::-1]

# 2018-01-19 05:32:35.070843
+a[:0:-1]

# 2018-01-19 05:33:14.335886
+a

# 2018-01-19 05:33:20.985314
+b = list(reversed(a))

# 2018-01-19 05:33:21.439468
+b

# 2018-01-19 05:33:26.079690
+b[:-1]

# 2018-01-19 06:20:56.621758
+a 

# 2018-01-19 06:21:06.455827
+a = tf.placeholder(tf.float32, [300, 10])

# 2018-01-19 06:21:06.846088
+a

# 2018-01-19 06:21:13.615019
+b = 10 * a

# 2018-01-19 06:21:14.446530
+b

# 2018-01-19 06:21:19.472687
+sess = tf.InteractiveSession()

# 2018-01-19 06:21:33.775055
+sess.run(tf.global_variables_initializer())

# 2018-01-19 06:22:13.203579
+sess.run(b, feed_dict={a: np.random.normal(300, 10)})

# 2018-01-19 06:22:24.338686
+a

# 2018-01-19 06:22:38.354478
+sess.run(a)

# 2018-01-19 06:22:54.554485
+sess.run(a, feed_dict={a: np.random.normal(300, 10)})

# 2018-01-19 06:22:59.804196
+sess.run(a, feed_dict={a: np.random.normal(300, 100)})

# 2018-01-19 06:23:22.470949
+sess.run(b, feed_dict={a: np.random.normal(size=(300, 100))})

# 2018-01-19 06:23:43.034312
+q = np.random.normal(0, 1, size=(300, 10))

# 2018-01-19 06:23:51.357151
+sess.run(b, feed_dict={a: q})

# 2018-01-19 10:36:07.091713
+a

# 2018-01-19 10:36:32.489092
+import keras.backend.tensorflow_backend as K

# 2018-01-19 10:36:41.308813
+a = K.variable(0)

# 2018-01-19 10:36:57.919543
+a_assign = K.update(a, a + 10)

# 2018-01-19 10:37:33.007566
+with tf.control_dependencies([a_assign]):
+    with tf.control_dependencies([a_assign]):
+        b = tf.identity(a)

# 2018-01-19 10:37:49.165323
+sess = tf.InteractiveSession()

# 2018-01-19 10:37:55.047340
+tf.global_variables_initializer().run()

# 2018-01-19 10:38:12.321027
+for i in range(4):
+    print(sess.run(b))

# 2018-01-19 10:38:17.692921
+a

# 2018-01-19 10:38:29.117969
+sess.run(a)

# 2018-01-19 10:38:36.014033
+sess.run(b)

# 2018-01-19 10:38:46.159469
+sess.run(a)

# 2018-01-19 10:38:47.164323
+sess.run(b)

# 2018-01-19 10:39:19.772055
+a = K.variable(0)

# 2018-01-19 10:39:22.908126
+import keras.backend.tensorflow_backend as K

# 2018-01-19 10:39:24.371247
+a = K.variable(0)

# 2018-01-19 10:39:37.571221
+a_assign = K.update(a, a + 10)

# 2018-01-19 10:39:44.543092
+sess = tf.InteractiveSession()

# 2018-01-19 10:39:49.820844
+tf.global_variables_initializer().run()

# 2018-01-19 10:40:42.439843
+with tf.control_dependencies([a_assign]):
+    b = tf.identity(a)

# 2018-01-19 10:40:47.785462
+a

# 2018-01-19 10:40:48.808505
+b

# 2018-01-19 10:40:51.956385
+sess.run(a)

# 2018-01-19 10:40:53.745995
+sess.run(b)

# 2018-01-19 10:40:56.031376
+sess.run(a)

# 2018-01-19 10:40:59.636501
+sess.run(b)

# 2018-01-19 10:41:03.028194
+sess.run(a)

# 2018-01-19 10:41:05.179526
+sess.run(b)

# 2018-01-19 10:41:09.315439
+sess.run(a)

# 2018-01-19 10:41:11.733725
+sess.run(b)

# 2018-01-19 10:41:13.753775
+sess.run(a)

# 2018-01-19 10:41:23.012792
+a

# 2018-01-19 10:41:23.907050
+b

# 2018-01-19 10:41:26.975795
+sess.run(b)

# 2018-01-19 10:41:31.272449
+sess.run(a)

# 2018-01-19 10:41:34.637564
+sess.run(b)

# 2018-01-19 10:41:36.738628
+sess.run(a)

# 2018-01-19 10:41:40.922561
+sess.run(b)

# 2018-01-19 10:41:44.122370
+sess.run(a)

# 2018-01-19 10:41:45.474902
+sess.run(b)

# 2018-01-20 16:09:18.767397
+from collections import deque

# 2018-01-20 16:09:24.571147
+d = deque('ghi')

# 2018-01-20 16:09:25.121098
+d

# 2018-01-20 17:03:21.015725
+def islice(iterable, *args):
+    s = slice(*args)
+    print(s)

# 2018-01-20 17:03:30.309448
+islice(10, 20, 30, 4)

# 2018-01-20 17:07:21.900085
+from itertools import islice

# 2018-01-20 17:07:35.843439
+islice(range(10), 3)

# 2018-01-20 17:07:41.708228
+for i in islice(range(10), 3):
+    print(i)

# 2018-01-20 17:08:00.690608
+for i in slice(range(10), 3):
+    print(i)

# 2018-01-20 17:08:13.314841
+slice(3)

# 2018-01-20 17:08:21.259802
+slice(1, 2)

# 2018-01-20 17:08:22.869433
+slice(1, 2, 3)

# 2018-01-20 17:08:24.292985
+slice(1, 2, 3, 4)

# 2018-01-20 17:08:33.299315
+for i in islice(range(10), 3):
+    print(i)

# 2018-01-20 20:00:35.917766
+a = [0, 10, 100, 1000]

# 2018-01-20 20:00:39.284682
+import numpy as np

# 2018-01-20 20:00:50.369818
+np.random.choice(a, 2)

# 2018-01-20 20:01:30.821199
+np.random.choice(10, 2)

# 2018-01-20 20:02:08.742555
+a = anp.random.randn(2, 3)

# 2018-01-20 20:02:10.640118
+a = np.random.randn(2, 3)

# 2018-01-20 20:02:11.065344
+a

# 2018-01-20 20:03:06.625141
+np.linspace(-1, 1, 100)[0, -1]

# 2018-01-20 20:03:11.016026
+np.linspace(-1, 1, 100)[[0, -1]]

# 2018-01-20 20:03:15.984241
+np.linspace(-1, 1, 100)[[0, -1, -3]]

# 2018-01-20 20:05:44.418456
+dataset_size = 60_000

# 2018-01-20 20:05:54.777012
+batch_size = 128

# 2018-01-20 20:06:00.523913
+dataset_size // batch_size

# 2018-01-20 20:06:11.512681
+468 * batch_size

# 2018-01-20 20:18:27.415173
+network_spec = [
+    dict(type='dense', size=32, activation='tanh'),
+    dict(type='dense', size=32, activation='tanh')
+]

# 2018-01-20 20:18:42.133775
+a = 10

# 2018-01-20 20:18:45.413090
+dict(a=20)

# 2018-01-20 20:18:55.708689
+{a: 20}

# 2018-01-20 21:20:44.534124
+import keras.backend.tensorflow_backend as K

# 2018-01-20 21:55:13.475997
+from math import sin

# 2018-01-20 21:55:32.633911
+np.linspace(-2, 2, 100)

# 2018-01-20 21:55:38.802290
+x = np.linspace(-2, 2, 100)

# 2018-01-20 21:55:42.298347
+y = sin(x)

# 2018-01-20 21:55:54.074481
+y = np.sin(x)

# 2018-01-20 21:56:04.627713
+plt.plot(x, y)

# 2018-01-20 21:56:07.557526
+plt.plot(x, y, '-')

# 2018-01-20 21:56:13.146917
+plt.clf()

# 2018-01-20 21:56:18.610880
+plt.plot(x, y, '-')

# 2018-01-20 21:56:20.859392
+plt.show()

# 2018-01-20 22:39:41.583318
+x = tf.placeholder(dtype=tf.float32, shape=[None, 784])

# 2018-01-20 22:39:50.246132
+y = tf.layers.dense(x)

# 2018-01-20 22:39:52.031639
+y = tf.layers.dense(x, 10)

# 2018-01-20 22:39:56.830114
+hasattr(y)

# 2018-01-20 22:39:59.542052
+hasattr(y, True)

# 2018-01-20 22:40:06.527067
+hasattr(y, 'use_bias')

# 2018-01-20 22:40:12.182463
+dir(y)

# 2018-01-20 22:40:25.767489
+help(y)

# 2018-01-20 22:40:54.280643
+y.consumers

# 2018-01-20 22:41:05.528435
+y.op

# 2018-01-20 22:41:09.615986
+y.op.get_attr

# 2018-01-20 22:41:14.792608
+y.op.get_attr('bias')

# 2018-01-20 22:41:18.928803
+y.op.get_attr()

# 2018-01-20 22:41:22.960913
+help(y.op.get_attr)

# 2018-01-20 22:41:35.489296
+y.op.node_def

# 2018-01-20 22:41:43.545101
+y.op.outputs

# 2018-01-20 22:42:10.905478
+y.op.values

# 2018-01-20 22:42:22.754904
+sess = tf.InteractiveSession()

# 2018-01-20 22:42:28.858383
+sess.run(y.op.vlaues)

# 2018-01-20 22:42:35.570455
+sess.run(y.op.values)

# 2018-01-20 23:08:46.618633
+x = tf.placeholder(dtype=tf.float32, shape=[None])

# 2018-01-20 23:08:54.839078
+y = tf.layers.dense(x, 1)

# 2018-01-20 23:08:59.118751
+y = tf.layers.dense(x)

# 2018-01-20 23:09:01.694667
+x = tf.placeholder(dtype=tf.float32, shape=[None,])

# 2018-01-20 23:09:03.142679
+y = tf.layers.dense(x)

# 2018-01-20 23:09:05.181826
+y = tf.layers.dense(x, 1)

# 2018-01-20 23:09:10.509726
+x = tf.placeholder(dtype=tf.float32, shape=[None,1])

# 2018-01-20 23:09:13.574782
+y = tf.layers.dense(x, 1)

# 2018-01-20 23:09:14.734957
+y

# 2018-01-20 23:22:56.640864
+from keras.metrics import sparse_categorical_accuracy

# 2018-01-21 00:51:44.142408
+x = tf.placeholder(dtype=tf.float32, shape=[None])

# 2018-01-21 01:09:49.105046
+K.round(0.2)

# 2018-01-21 01:09:56.494398
+sess.run(K.round(0.2))

# 2018-01-21 01:10:00.696078
+sess.run(K.round(1.4))

# 2018-01-21 01:28:38.370187
+round(2.12345, 3)

# 2018-01-21 01:28:40.654216
+round(2.12345, 2)

# 2018-01-21 01:30:02.928630
+round

# 2018-01-21 01:35:53.649334
+data =np.random.normal(size=[3, 2])

# 2018-01-21 01:36:02.378000
+tf.train.batch(data)

# 2018-01-21 01:36:05.571386
+tf.train.batch(data, 2)

# 2018-01-21 03:37:53.543194
+from keras.datasets.mnist import load_data

# 2018-01-21 03:37:55.805083
+(x_train, y_train), (x_test, y_test) = load_data()

# 2018-01-21 03:38:10.448126
+x_train = x_train.astype(np.float32).reshape((-1, 784))

# 2018-01-21 03:38:13.167937
+x_train.shape

# 2018-01-22 02:03:25.612705
+a = list()

# 2018-01-22 02:03:31.958344
+a.extend(['a', 'b'])

# 2018-01-22 02:03:32.440444
+a

# 2018-01-22 02:03:35.627402
+a.extend(['a', 'b'])

# 2018-01-22 02:03:36.043531
+a

# 2018-01-22 02:07:04.103183
+sess

# 2018-01-22 02:07:09.891303
+sess.run([tf.no_op()])

# 2018-01-22 19:11:28.763179
+math

# 2018-01-22 19:11:37.997024
+from math import pow

# 2018-01-22 19:11:43.093321
+pow(2, 0.5)

# 2018-01-22 19:11:55.934178
+pow(2, 1/10)

# 2018-01-22 22:07:40.066406
+from math import pow

# 2018-01-22 22:08:10.812614
+n = 51

# 2018-01-22 22:08:58.172385
+p_best = 0.05

# 2018-01-22 22:10:20.782859
+p = lambda m: m *  (1 - pow(p_best, 1/n)) / ((n/2 - 1) * pow(p_best, 1/n))

# 2018-01-22 22:10:42.233512
+p( 0.09451)

# 2018-01-23 09:13:53.607720
+from math import pow

# 2018-01-23 09:13:55.956229
+p = lambda m: m *  (1 - pow(p_best, 1/n)) / ((n/2 - 1) * pow(p_best, 1/n))

# 2018-01-23 09:13:57.770279
+p( 0.09451)

# 2018-01-23 09:14:04.302944
+p_best = 0.05

# 2018-01-23 09:14:06.271775
+p( 0.09451)

# 2018-01-23 09:14:08.318579
+n = 51

# 2018-01-23 09:14:09.403568
+p( 0.09451)

# 2018-01-23 16:42:09.394258
+print("{0:3d}".format(3))

# 2018-01-23 16:42:11.964781
+print("{0:03d}".format(3))

# 2018-01-23 16:42:15.849499
+print("{0:03f}".format(3))

# 2018-01-23 16:42:19.989152
+print("{0:03}".format(3))

# 2018-01-23 16:42:24.562216
+print("{0:03d}".format(3))

# 2018-01-23 16:42:27.534000
+print("{0:03d}".format(23))

# 2018-01-23 17:27:27.207857
+sys

# 2018-01-23 17:27:29.346478
+import sys

# 2018-01-23 17:27:30.936921
+sys.maxsize

# 2018-01-24 22:22:37.833181
+tf.__version__

# 2018-01-27 02:47:26.328986
+help(tf.train.AdamOptimizer)

# 2018-01-28 06:54:53.857315
+ls

# 2018-01-28 06:54:57.809378
+tf.__version__

# 2018-01-28 06:56:25.703208
+tfe.enable_eager_execution()

# 2018-01-28 06:57:26.169797
+x = [[2.]]
+m = tf.matmul(x, x)
+
+print(m)

# 2018-01-28 06:58:31.155760
+m

# 2018-01-28 06:58:34.239910
+m.num

# 2018-01-28 06:58:38.633873
+m.numpy()

# 2018-01-28 06:58:44.685256
+m.cpu()

# 2018-01-30 18:11:37.980924
+from keras.utils import multi_gpu_model

# 2018-01-30 18:11:39.808090
+multi_gpu_model

# 2018-01-30 18:12:18.575791
+help(multi_gpu_model)

# 2018-01-31 22:40:50.384768
+import tensorflow as tf

# 2018-01-31 22:42:45.212570
+help(tf.layers.dense)

# 2018-01-31 22:53:58.914310
+u_shape = (784, 500)

# 2018-01-31 22:54:16.777814
+self.bias = K.variable(tf.random_uniform((u_shape[1], 1), maxval=1), name="/bias")

# 2018-01-31 22:54:20.523049
+import keras.backend.tensorflow_backend as K

# 2018-01-31 22:54:21.469989
+self.bias = K.variable(tf.random_uniform((u_shape[1], 1), maxval=1), name="/bias")

# 2018-01-31 22:54:23.886323
+bias = K.variable(tf.random_uniform((u_shape[1], 1), maxval=1), name="/bias")

# 2018-01-31 22:54:28.293296
+bias = K.variable(tf.random_uniform((u_shape[1], 1), maxval=1), name="bias")

# 2018-01-31 22:54:29.035745
+bias

# 2018-02-01 00:00:36.139804
+sess = tf.InteractiveSession()

# 2018-02-01 00:00:38.762713
+sess.run(bias)

# 2018-02-01 20:57:49.860044
+import keras.backend.tensorflow_backend as K

# 2018-02-01 20:58:03.522395
+import tensorflow as tf

# 2018-02-01 20:58:52.609778
+u = K.variable(tf.random_normal((2, 3)))

# 2018-02-01 20:59:04.361142
+v = K.zeros((3, 3))

# 2018-02-01 20:59:13.840225
+uv = tf.matmul(u, v)

# 2018-02-01 20:59:15.315570
+uv

# 2018-02-01 20:59:21.647232
+sess = tf.InteractiveSession()

# 2018-02-01 21:01:20.477241
+v_op = K.update(v, K.ones_like(v))

# 2018-02-01 21:14:48.567237
+u

# 2018-02-01 21:15:33.438422
+u = K.variable(tf.random_uniform((2, 3), minval=-1, maxval=1))

# 2018-02-01 21:15:41.518450
+fu = tf.nn.relu(u)

# 2018-02-01 21:15:49.562942
+tf.global_variables_initializer().run()

# 2018-02-01 21:15:58.983649
+print(sess.run([u, fu]))

# 2018-02-04 19:03:29.725591
+import tensorflow as tf

# 2018-02-04 19:03:38.601791
+a = tf.random_normal((2, 3))

# 2018-02-04 19:03:39.185617
+a

# 2018-02-04 19:03:46.636330
+b = tf.random_uniform((6, 1))

# 2018-02-04 19:03:47.517605
+a

# 2018-02-04 19:03:47.675784
+b

# 2018-02-04 19:03:51.869123
+tf.local_variables_initializer()

# 2018-02-04 19:04:00.521664
+local_init = tf.local_variables_initializer()

# 2018-02-04 19:04:10.617410
+sess = tf.Session()

# 2018-02-04 19:04:15.963735
+sess.run(local_init)

# 2018-02-04 19:04:18.311872
+a

# 2018-02-04 19:04:22.365009
+sess.run(a)

# 2018-02-04 19:04:24.326946
+sess.run(b)

# 2018-02-07 02:34:43.264478
+from gym_maze import MazeEnv

# 2018-02-07 02:35:03.951544
+from gym_maze.envs import MazeEnv

# 2018-02-07 02:35:55.428542
+maze = WaterMazeGenerator(20, 4)
+
+anim = solvemaze(maze, action_type='Moore', render_trace=True, gif_file='data/morris_water_maze.gif')
+HTML(anim)

# 2018-02-07 02:36:18.137992
+from gym_maze.envs.generators import SimpleMazeGenerator, RandomMazeGenerator, RandomBlockMazeGenerator, UMazeGenerator, TMazeGenerator, WaterMazeGenerator

# 2018-02-07 02:36:23.307931
+maze = WaterMazeGenerator(20, 4)
+
+anim = solvemaze(maze, action_type='Moore', render_trace=True, gif_file='data/morris_water_maze.gif')
+HTML(anim)

# 2018-02-07 02:36:40.483571
+env = MazeEnv(maze, action_type=action_type, render_trace=render_trace)

# 2018-02-07 02:37:00.062318
+env = MazeEnv(maze, action_type='Moore', render_trace=False)

# 2018-02-07 02:37:04.034620
+env.reset()

# 2018-02-07 02:37:11.618762
+a = _

# 2018-02-07 02:37:12.937674
+a.shape

# 2018-02-07 02:37:22.700799
+a.render()

# 2018-02-07 02:37:27.508571
+env.render()

# 2018-02-07 02:37:33.841617
+import tensorflow as tf

# 2018-02-07 02:37:36.133903
+import matplotlib.pyplot as plt

# 2018-02-07 02:37:44.896391
+plt.show()

# 2018-02-07 02:38:11.846624
+env.step(1)

# 2018-02-07 02:38:15.025512
+env.render()

# 2018-02-07 02:38:25.812090
+env.render_trace=True

# 2018-02-07 02:38:27.213983
+env.render()

# 2018-02-07 02:38:30.388685
+env

# 2018-02-07 03:09:02.072832
+env = MazeEnv(maze, action_type='Moore', render_trace=True)

# 2018-02-07 03:09:08.803341
+state = env.reset()

# 2018-02-07 03:09:10.897092
+state

# 2018-02-07 03:09:15.269779
+env.action_space

# 2018-02-07 03:09:21.418959
+env.action_type

# 2018-02-07 03:09:25.542338
+env.all_actions

# 2018-02-07 03:09:29.909708
+env.bounds

# 2018-02-07 03:09:37.102452
+env.live_display

# 2018-02-07 03:09:46.517968
+env.maze_generator

# 2018-02-07 03:39:11.626872
+from gym_maze.envs.generators import SimpleMazeGenerator, RandomMazeGenerator, RandomBlockMazeGenerator, UMazeGenerator, TMazeGenerator, WaterMazeGenerator

# 2018-02-07 03:40:15.663973
+import gym_maze

# 2018-02-07 03:40:18.771504
+gym_maze

# 2018-02-07 03:55:06.650417
+from gym_maze import MazeEnv

# 2018-02-07 03:55:11.363668
+from gym_maze.envs.maze import MazeEnv

# 2018-02-07 03:55:41.943009
+env = MazeEnv(WaterMazeGenerator(20, 4), action_type='Moore',  render_trace=True)

# 2018-02-07 03:55:49.180278
+state = env.reset()

# 2018-02-07 03:56:00.097766
+import matplotlib.pyplot as plt

# 2018-02-07 03:56:10.721714
+env.render()

# 2018-02-07 03:57:41.342557
+plt.show()

# 2018-02-07 04:20:00.789642
+import time

# 2018-02-07 04:20:04.013501
+time.time

# 2018-02-07 04:20:14.300922
+time.time()

# 2018-02-08 10:50:22.482688
+from functools import wraps

# 2018-02-08 10:51:50.448519
+def trace(func):
+    @wraps(func)
+    def wrapper(*args, **kwargs):
+        result = func(*args, **kwargs)
+        print("{0}({1}, {2}) -> {3}".format(func.__name__, args, kwargs, result))
+        return result
+    return wrapper

# 2018-02-08 10:52:30.922103
+@trace
+def fib(n):
+    """Return the n-th fib"""
+    if n in (0, 1):
+        return n
+    return (fib(n-2) + fib(n - 1))

# 2018-02-08 10:52:33.611750
+fib(10)

# 2018-02-08 10:52:37.164533
+fib(3)

# 2018-02-08 10:52:46.911657
+print(fib)

# 2018-02-08 10:53:01.440841
+help(fib)

# 2018-02-08 16:13:28.163013
+f =lambda n: (18111 * n ** 4)/2-90555 * n ** 3+(633885* n ** 2)/2-452773 * n + 217331 

# 2018-02-08 16:13:33.003090
+f(1)

# 2018-02-08 16:13:34.333488
+f(2)

# 2018-02-08 16:13:36.190203
+f(3)

# 2018-02-08 16:13:37.493166
+f(4)

# 2018-02-08 16:13:38.901626
+f(5)

# 2018-02-08 21:22:43.523610
+a = """http://www.math.kobe-u.ac.jp/HOME/higuchi/h23kogi/h23kouki/11kaito1-1.pdf"""

# 2018-02-08 21:23:12.996138
+a = """http://www.math.kobe-u.ac.jp/HOME/higuchi/h23kogi/h23kouki/11kaito1-{0}.pdf"""

# 2018-02-08 21:23:17.684463
+from os import system

# 2018-02-08 21:23:38.012478
+wget = lambda x: system("wget http://www.math.kobe-u.ac.jp/HOME/higuchi/h23kogi/h23kouki/11kaito1-{0}.pdf".format(x))

# 2018-02-08 21:24:02.795257
+for i in range(1, 13):
+    wget(i)

# 2018-02-08 21:24:33.310821
+wget = lambda x: system("wget http://www.math.kobe-u.ac.jp/HOME/higuchi/h23kogi/h23kouki/11kaito1-{0}.pdf".format(x))

# 2018-02-08 21:24:38.122119
+for i in range(1, 13):
+    wget(i)

# 2018-02-08 21:26:43.016369
+wget = lambda x: system("wget http://www.math.kobe-u.ac.jp/HOME/higuchi/h23kogi/h23kouki/mp{0}.pdf".format(x))

# 2018-02-08 21:26:53.538451
+for i in range(1, 13):
+    wget(i)

# 2018-02-08 21:28:06.691531
+wget = lambda x: system("wget http://www.math.kobe-u.ac.jp/HOME/higuchi/h23kogi/h23kouki/p1-{0}.pdf".format(x))

# 2018-02-08 21:28:08.879115
+for i in range(1, 13):
+    wget(i)

# 2018-02-08 21:28:11.702794
+from os import system

# 2018-02-08 21:28:14.323048
+for i in range(1, 13):
+    wget(i)

# 2018-02-09 16:42:27.140299
+from tensorflow.python import debug 

# 2018-02-09 16:42:33.228923
+import tensorflow as tf

# 2018-02-09 16:42:52.044048
+sess = debug.LocalCLIDebugWrapperSession(tf.Session())

# 2018-02-09 16:43:04.978636
+a = tf.random_normal((2, 3))

# 2018-02-09 16:43:19.012357
+b = tf.matmul(a, a, transpose_a=True)

# 2018-02-09 16:44:27.998252
+sess.run(tf.global_variables_initializer())

# 2018-02-10 09:30:03.252532
+import tensorflow as tf

# 2018-02-10 09:30:29.752387
+a = tf.random_uniform([3, 3], minval=-1, maxval=1.)

# 2018-02-10 09:30:30.292267
+a

# 2018-02-10 09:30:48.601719
+sess = tf.Session()

# 2018-02-10 09:31:21.085623
+positive = tf.reduce_all(a > 0)

# 2018-02-10 09:31:30.079660
+sess = tf.Session()

# 2018-02-10 09:31:38.575355
+sess.run(tf.global_variables_initializer())

# 2018-02-10 09:31:48.112409
+positive.eval()

# 2018-02-10 09:31:53.959914
+positive.eval(sess=sess)

# 2018-02-10 09:31:58.944575
+sess.run(positive)

# 2018-02-10 09:32:28.169023
+imp

# 2018-02-10 09:32:35.535500
+import tensorflow as tf

# 2018-02-10 09:32:53.566526
+a = tf.random_uniform([3, 3], minval=-1, maxval=1.)

# 2018-02-10 09:33:16.699881
+a[a < 0]

# 2018-02-10 09:34:41.313336
+tf.cond(a < 0, lambda: 0, lambda: a) 

# 2018-02-10 09:35:34.289793
+a < 0

# 2018-02-10 09:36:14.233991
+sess.run(a < 0)

# 2018-02-10 09:36:16.261269
+sess = tf.Session()

# 2018-02-10 09:36:21.498996
+sess.run(tf.global_variables_initializer())

# 2018-02-10 09:36:25.136164
+sess.run(a < 0)

# 2018-02-10 09:38:14.674298
+condition = tf.less(a, 0.)
+
+res = tf.where(condition, tf.zeros_like(B), B)

# 2018-02-10 09:38:20.592790
+condition = tf.less(a, 0.)
+
+res = tf.where(condition, tf.zeros_like(a), a)

# 2018-02-10 09:38:24.418910
+sess.run(res)

# 2018-02-10 09:38:55.973047
+cond = a < 0.

# 2018-02-10 09:39:03.067909
+res = tf.where(cond, tf.zeros_like(a), a)

# 2018-02-10 09:39:07.097857
+sess.run(res)

# 2018-02-10 09:41:35.936002
+res = tf.where(tf.is_nan(a), tf.zeros_like(a), a)

# 2018-02-10 09:41:38.209618
+sess.run(res)

# 2018-02-10 09:47:55.711732
+import keras.backend.tensorflow_backend as K

# 2018-02-10 09:48:04.276507
+input = K.placeholder(shape=(None, 4, 5))

# 2018-02-10 09:48:05.455117
+input

# 2018-02-10 09:48:57.673453
+import keras.backend.tensorflow_backend as K

# 2018-02-10 09:48:59.918791
+input = K.placeholder(shape=(None, 4, 5))

# 2018-02-10 09:49:00.985058
+input

# 2018-02-10 11:03:37.244088
+eps = 0.012

# 2018-02-10 11:03:40.045188
+1/eps 

# 2018-02-10 11:03:54.581754
+1/ 0.01

# 2018-02-10 11:05:51.151260
+1/84.

# 2018-02-10 13:51:32.978644
+import itertools

# 2018-02-10 13:51:46.410654
+for i in itertools.count():
+    if i == 10:
+        break

# 2018-02-10 13:51:51.925191
+for i in itertools.count():
+    print(i)
+    if i == 10:
+        break

# 2018-02-10 14:07:16.093001
+a = {'episode_rewards': [20, 20, 30], 'B': 10}

# 2018-02-10 14:07:29.014658
+epis_rewards = a.get('episode_rewards')

# 2018-02-10 14:07:33.777892
+epis_rewards 

# 2018-02-10 14:16:35.491836
+i

# 2018-02-10 16:07:32.713399
+import tensorflow as tf

# 2018-02-10 16:07:40.959587
+c = tf.constant('Hello, distributed TF')

# 2018-02-10 16:07:57.438288
+server = tf.train.Server.create_local_server()

# 2018-02-10 16:08:11.970423
+sess = tf.Session(server.target)

# 2018-02-10 16:08:14.856876
+sess.run(c)

# 2018-02-10 16:13:31.631207
+graph = tf.Graph()

# 2018-02-10 16:13:33.055837
+graph

# 2018-02-10 16:13:40.791330
+defaut_graph = graph.as_default()

# 2018-02-10 16:13:43.824745
+defaut_graph

# 2018-02-10 19:04:08.182342
+import time
+import ray
+
+ray.init()
+
+@ray.remote
+def f():
+    time.sleep(1)
+    return 1
+
+# Execute f in parallel.
+object_ids = [f.remote() for i in range(4)]
+results = ray.get(object_ids)

# 2018-02-10 19:05:57.653678
+import time

# 2018-02-10 19:06:04.857162
+import ray

# 2018-02-10 19:06:09.316861
+ray.init()

# 2018-02-10 19:06:24.889565
+@ray.remote
+def f():
+    time.sleep(1)
+    return 1

# 2018-02-10 19:52:02.899837
+import tensorflow as tf

# 2018-02-10 19:52:58.357984
+conv3x32 = tf.make_template("conv3x32", lambda x: f.layers.conv2d(x, 32, 3))

# 2018-02-10 19:53:03.476589
+conv3x32 = tf.make_template("conv3x32", lambda x: tf.layers.conv2d(x, 32, 3))

# 2018-02-10 19:53:56.881155
+image1 = tf.placeholder(tf.float64, [None, 784])

# 2018-02-10 19:53:59.017856
+image2 = tf.placeholder(tf.float64, [None, 784])

# 2018-02-10 19:54:04.843795
+conv3x32(image1)

# 2018-02-10 19:54:20.420667
+image1 = tf.placeholder(tf.float64, [None, 24, 24])

# 2018-02-10 19:54:26.420558
+image2 = tf.placeholder(tf.float64, [None, 24, 24])

# 2018-02-10 19:54:27.958984
+conv3x32(image1)

# 2018-02-10 19:56:17.129423
+help(tf.layers.conv2d)

# 2018-02-10 19:56:24.741295
+image1

# 2018-02-10 19:56:37.489135
+tf.layers.conv2d(image1, 32, 3)

# 2018-02-10 19:56:50.055163
+image1 = tf.placeholder(tf.float64, [None, 24, 24, ])

# 2018-02-10 19:56:51.647212
+image1 = tf.placeholder(tf.float64, [None, 24, 24, 1])

# 2018-02-10 19:56:57.200068
+conv3x32(image1)

# 2018-02-10 19:57:05.584052
+image1 = tf.placeholder(tf.float32, [None, 24, 24, 1])

# 2018-02-10 19:57:07.028901
+conv3x32(image1)

# 2018-02-10 19:57:23.103597
+import tensorflow as tf

# 2018-02-10 19:57:29.848532
+conv3x32 = tf.make_template("conv3x32", lambda x: tf.layers.conv2d(x, 32, 3))

# 2018-02-10 19:57:35.000883
+image1 = tf.placeholder(tf.float32, [None, 24, 24, 1])

# 2018-02-10 19:57:37.383738
+image2 = tf.placeholder(tf.float32, [None, 24, 24, 1])

# 2018-02-10 19:57:42.368831
+conv3x32(image1)

# 2018-02-10 19:57:47.769819
+conv3x32(image)

# 2018-02-10 19:57:49.411834
+conv3x32(image2)

# 2018-02-10 19:58:54.200713
+tf.get_default_graph()

# 2018-02-10 19:58:57.087243
+graph = _

# 2018-02-10 19:58:58.161193
+grpah

# 2018-02-10 19:59:03.343573
+graph = tf.get_default_graph()

# 2018-02-10 19:59:04.314190
+grpah

# 2018-02-10 19:59:06.528037
+graph

# 2018-02-10 20:18:44.847347
+import tensorflow as tf

# 2018-02-10 20:18:53.784129
+graph = tf.Graph()

# 2018-02-10 20:19:05.936302
+collection = graph.get_collection(name='episode')

# 2018-02-10 20:19:09.403428
+collection 

# 2018-02-10 20:19:38.520339
+a = tf.random_uniform([3, 3], minval=-1, maxval=1.)

# 2018-02-10 20:19:40.121816
+b = tf.random_uniform([3, 3], minval=-1, maxval=1.)

# 2018-02-10 20:19:53.289986
+a

# 2018-02-10 20:21:23.967836
+variable = tf.get_variable('episode', dtype=tf.int32, initializer=0, trainable=False)

# 2018-02-10 20:23:23.997315
+timestep = tf.get_variable('timestep', dtype=tf.int32, initializer=0, trainable=False)

# 2018-02-10 20:23:37.007305
+graph.add_to_collection(name='timestep', value=timestep)

# 2018-02-10 20:23:53.143911
+tf.GraphKeys.GLOBAL_STEP

# 2018-02-10 20:24:21.080285
+graph.add_to_collection(name=tf.GraphKeys.GLOBAL_STEP, value=timestep)

# 2018-02-10 20:24:23.657083
+tf.GraphKeys.GLOBAL_STEP

# 2018-02-10 20:24:57.186150
+graph.get_collection('timestep')

# 2018-02-10 20:25:04.065506
+graph.get_collection('global_step')

# 2018-02-10 23:51:28.447629
+help(tf.train.Scaffold)

# 2018-02-10 23:52:25.673927
+scaffold = tf.train.Scaffold()

# 2018-02-11 00:00:05.156366
+import tensorflow as tf

# 2018-02-12 21:45:52.507508
+import gym

# 2018-02-12 21:45:58.883124
+env = gym.make("Copy-v0")

# 2018-02-12 21:46:01.416095
+env.reset()

# 2018-02-12 21:46:05.231168
+env.render()

# 2018-02-12 21:46:39.011659
+env = gym.make("FrozenLake-v0")

# 2018-02-12 21:46:41.769800
+env.reset()

# 2018-02-12 21:46:45.832939
+env.render()

# 2018-02-12 21:48:38.407470
+env = gym.make("MsPacman-v0")

# 2018-02-12 21:48:40.992029
+env.reset()

# 2018-02-12 21:48:46.199359
+env.render()

# 2018-02-12 21:49:00.989101
+exit

# 2018-02-12 23:06:04.744430
+import gym

# 2018-02-12 23:06:46.980192
+import tensorflow as tf

# 2018-02-12 23:07:28.330278
+import gym 

# 2018-02-12 23:08:52.838125
+import gym

# 2018-02-12 23:08:54.841930
+import gym_maze

# 2018-02-12 23:11:48.680281
+import gym

# 2018-02-12 23:11:56.090483
+env = gym.make("MsPacman-v0")

# 2018-02-12 23:11:59.272064
+env.reset()

# 2018-02-12 23:12:03.942001
+env.render()

# 2018-02-12 23:13:35.096142
+import universe  # register the universe environments

# 2018-02-13 00:41:16.354240
+import tensorflow as tf

# 2018-02-13 00:42:13.655755
+import keras.backend.tensorflow_backend as K

# 2018-02-13 00:43:02.962830
+five = tf.make_template('five',  lambda :K.variable(tf.random_normal(shape=[1, 1]), name='u') * 5)

# 2018-02-13 00:43:08.604641
+a = five()

# 2018-02-13 00:43:35.844468
+five = tf.make_template('five',  lambda :K.variable(tf.random_normal(shape=[1, 1]), name='u', dtype=tf.float32) * 5)

# 2018-02-13 00:43:37.014902
+a = five()

# 2018-02-13 00:43:37.892110
+a

# 2018-02-13 00:43:51.957675
+b = five()

# 2018-02-13 00:44:19.003000
+five = tf.make_template('five2',  lambda : tf.get_variable(tf.random_normal(shape=[1, 1]), name='u', dtype=tf.float32) * 5)

# 2018-02-13 00:44:20.717095
+a = five()

# 2018-02-13 00:44:33.181445
+five = tf.make_template('five2',  lambda : tf.get_variable(tf.random_normal(shape=[1, 1]), dtype=tf.float32) * 5)

# 2018-02-13 00:44:35.277815
+a = five()

# 2018-02-13 00:44:52.087469
+five = tf.make_template('five2',  lambda : tf.get_variable('fuc', tf.random_normal(shape=[1, 1]), dtype=tf.float32) * 5)

# 2018-02-13 00:44:53.662152
+a = five()

# 2018-02-13 00:52:43.820119
+import tensorflow as tf

# 2018-02-13 00:53:29.106102
+pred = tf.make_template(name_="predict_from_lstm", func_=lambda inputs: tf.layers.dense(inputs=inputs, units=10), create_scope_now_=True)

# 2018-02-13 00:53:37.337050
+a = pred(10)

# 2018-02-13 00:55:14.408922
+a = pred(tf.zeros((10, 20), name="Fucker"))

# 2018-02-13 00:55:15.945906
+b = pred(tf.zeros((10, 20), name="Fucker"))

# 2018-02-13 00:55:16.749582
+a

# 2018-02-13 00:55:16.922537
+b

# 2018-02-13 00:55:43.616604
+sess = tf.Session()

# 2018-02-13 00:55:49.577607
+sess.run(tf.global_variables_initializer())

# 2018-02-13 00:55:54.152607
+sess.run(a)

# 2018-02-13 00:55:56.531914
+sess.run(b)

# 2018-02-13 00:56:42.409643
+tf.all_variables()

# 2018-02-13 00:57:11.624725
+b = pred(tf.zeros((10, 30), name="Fucker"))

# 2018-02-13 00:57:26.087001
+b = pred(tf.zeros((10, 30), name="Fucker2"))

# 2018-02-13 00:57:32.991391
+pred = tf.make_template(name_="predict_from_lstm", func_=lambda inputs: tf.layers.dense(inputs=inputs, units=10), create_scope_now_=True)

# 2018-02-13 00:57:36.920119
+pred = tf.make_template(name_="predict_from_lstm_fucker", func_=lambda inputs: tf.layers.dense(inputs=inputs, units=10), create_scope_now_=True)

# 2018-02-13 00:58:02.876445
+a = pred(tf.zeros((None, 784), name="Fucker"))

# 2018-02-13 00:58:07.209288
+a = pred(tf.zeros((1000, 784), name="Fucker"))

# 2018-02-13 02:13:55.091905
+import tensorforce.core.distributions as dist

# 2018-02-13 02:14:15.023794
+help(dist.bernoulli)

# 2018-02-13 02:14:44.809565
+help(dist.Bernoulli)

# 2018-02-13 02:14:49.385597
+dist.Bernoulli()

# 2018-02-13 02:14:54.218093
+dist.Bernoulli(shape=(10, 20))

# 2018-02-13 02:15:03.713917
+ber = dist.Bernoulli(shape=(10, 20))

# 2018-02-13 02:15:04.493969
+ber

# 2018-02-13 02:15:10.946513
+help(ber)

# 2018-02-13 02:15:13.574448
+ber.get_variables()

# 2018-02-13 02:15:17.450293
+ber.sample()

# 2018-02-13 02:15:43.627188
+ber.sample(distr_params=0.5, deterministic=True)

# 2018-02-13 02:15:53.002654
+ber.sample(distr_params=0, deterministic=True)

# 2018-02-13 02:16:14.139207
+ber.sample(distr_params=[0, 0, 0], deterministic=True)

# 2018-02-13 03:03:52.301044
+from keras import layers

# 2018-02-13 03:03:53.829645
+from keras import applications

# 2018-02-13 03:03:57.278460
+from keras import Input

# 2018-02-13 03:04:25.894024
+xcep_base = applications.InceptionV3(weights=None, include_top=False)

# 2018-02-13 03:04:29.271261
+xcep_base = applications.InceptionV3(weights=None)

# 2018-02-13 03:04:44.119927
+xcep_base = applications.Xception(weights=None, include_top=False)

# 2018-02-13 03:05:18.668514
+from keras import layers

# 2018-02-13 03:05:21.279111
+from keras import applications

# 2018-02-13 03:05:25.439164
+from keras import Input

# 2018-02-13 03:05:56.150956
+xcep_base = applications.InceptionV3(weights=None, include_top=False)

# 2018-02-13 03:06:15.121218
+features = Input(shape=(250, 250, 3))

# 2018-02-13 03:06:51.053322
+features = xcep_base(features)

# 2018-02-13 03:06:59.887116
+features

# 2018-02-13 03:07:15.081640
+features.shape

# 2018-02-13 03:08:45.132791
+from keras.utils import plot_model

# 2018-02-13 03:08:52.417752
+plot_model(features, to_file='model.png')

# 2018-02-13 03:09:52.726260
+from keras.applications.inception_v3 import InceptionV3

# 2018-02-13 03:09:56.340348
+InceptionV3

# 2018-02-13 03:10:04.960554
+help(InceptionV3)

# 2018-02-13 03:10:13.361146
+help(features)

# 2018-02-13 03:12:35.228272
+input = Input(shape=(244, 244, 3))

# 2018-02-13 03:14:04.473388
+model = InceptionV3(input_tensor=input, include_top=True)

# 2018-02-13 03:14:13.755599
+model.summary

# 2018-02-13 03:14:15.149909
+model.summary()

# 2018-02-13 03:14:57.260309
+plot_model(model, to_file='model.png')

# 2018-02-13 03:17:48.915261
+from keras import Input

# 2018-02-13 03:17:54.110872
+from keras import layers

# 2018-02-13 03:18:07.254233
+model = Sequential()

# 2018-02-13 03:18:15.403991
+from keras.models import Sequential

# 2018-02-13 03:18:17.663643
+model = Sequential()

# 2018-02-13 03:19:11.529006
+model.add(layers.Conv2D(32, 3, activation='relu', input_shape=(28, 28, 3)))

# 2018-02-13 03:19:25.845787
+model.add(layers.BatchNormalization())

# 2018-02-13 03:19:43.790236
+model.add(layers.Conv2D(16, 2, activation='relu', input_shape=(28, 28, 3)))

# 2018-02-13 03:19:47.879655
+model.summary()

# 2018-02-13 03:19:53.087522
+model.add(layers.BatchNormalization())

# 2018-02-13 03:19:54.264893
+model.summary()

# 2018-02-13 03:20:07.506109
+model.output

# 2018-02-13 03:20:55.715185
+model.add(layers.GlobalAveragePooling2D())

# 2018-02-13 03:21:01.196597
+model.summary()

# 2018-02-13 03:21:28.493564
+model.add(layers.Dense(10))

# 2018-02-13 03:21:31.508318
+model.summary()

# 2018-02-13 03:23:31.873234
+model.add(layers.Conv2D(16, 2, activation='relu'))

# 2018-02-13 03:24:15.175977
+plot_model(model, to_file='model2.png', show_shapes=True)

# 2018-02-13 03:24:20.436254
+from keras.utils import plot_model

# 2018-02-13 03:24:21.821667
+plot_model(model, to_file='model2.png', show_shapes=True)

# 2018-02-13 04:33:38.748945
+import tensorflow as tf

# 2018-02-13 04:33:43.833748
+import numpy as np

# 2018-02-13 04:33:50.663122
+np.arange(12).reshape((4, 3))

# 2018-02-13 04:33:53.910589
+a = np.arange(12).reshape((4, 3))

# 2018-02-13 04:33:54.086714
+a

# 2018-02-13 04:34:04.828747
+b = [0, 2, 1, 0]

# 2018-02-13 04:34:07.196366
+a[b]

# 2018-02-13 04:34:18.997259
+np.select(a, b)

# 2018-02-13 04:34:33.030688
+np.select(a, 0)

# 2018-02-13 04:34:36.941303
+a

# 2018-02-13 04:35:53.979433
+a[b]

# 2018-02-13 04:35:58.889810
+a[:, b]

# 2018-02-13 04:35:59.994192
+a

# 2018-02-13 04:36:00.579637
+ab

# 2018-02-13 04:36:01.528984
+b

# 2018-02-13 04:36:09.248902
+b = b[np.newaxis]

# 2018-02-13 04:36:12.574807
+b = b[np.newaxis:,]

# 2018-02-13 04:36:14.954228
+b = b[np.newaxis,:]

# 2018-02-13 04:36:20.482367
+b = b[np.newaxix]

# 2018-02-13 04:36:22.496580
+b = b[np.newaxis]

# 2018-02-13 04:36:25.320920
+b

# 2018-02-13 04:36:34.252414
+b = np.array(b)

# 2018-02-13 04:36:34.938078
+a

# 2018-02-13 04:36:35.121308
+b

# 2018-02-13 04:36:36.961506
+a[b]

# 2018-02-13 04:36:43.626715
+a[b[np.newaxis]]

# 2018-02-13 04:36:48.577630
+b[np.newaxis]

# 2018-02-13 04:36:52.353864
+b[:,np.newaxis]

# 2018-02-13 04:36:55.138497
+a[b[:,np.newaxis]]

# 2018-02-13 04:41:25.858593
+a

# 2018-02-13 04:41:26.024104
+b

# 2018-02-13 04:41:37.384681
+np.take(a, b)

# 2018-02-13 04:41:39.665648
+a

# 2018-02-13 04:41:39.882338
+b

# 2018-02-13 04:41:58.856976
+a

# 2018-02-13 04:41:59.295054
+b

# 2018-02-13 04:42:11.110874
+b = b[:, np.newaxis]

# 2018-02-13 04:42:11.497176
+b

# 2018-02-13 04:42:18.502672
+np.take(a, b)

# 2018-02-13 04:42:23.305270
+np.take(b, a)

# 2018-02-13 04:42:26.032180
+np.take(a, b)

# 2018-02-13 04:42:27.139014
+a

# 2018-02-13 04:42:39.377906
+tf.gather(a, b)

# 2018-02-13 04:42:57.693547
+b = np.squeeze()

# 2018-02-13 04:43:01.781568
+b= np.squeeze(b)

# 2018-02-13 04:43:02.199561
+b

# 2018-02-13 04:43:04.934188
+tf.gather(a, b)

# 2018-02-13 04:43:10.197584
+a

# 2018-02-13 04:43:21.143290
+g = tf.gather(a, b)

# 2018-02-13 04:43:25.973830
+sess = tf.Session()

# 2018-02-13 04:43:32.115812
+sess.run(tf.global_variables_initializer())

# 2018-02-13 04:43:35.648857
+sess.run(g)

# 2018-02-13 04:45:31.623135
+parameters = tf.constant([
+                          [11, 12, 13], 
+                          [21, 22, 23], 
+                          [31, 32, 33], 
+                          [41, 42, 43]])    
+targets = tf.constant([2, 1, 0, 1])

# 2018-02-13 04:45:38.512557
+tf.gather(parameters, targets)

# 2018-02-13 04:48:25.173821
+tf.gather_nd(parameters, targets)

# 2018-02-13 04:51:24.437974
+from gym_maze.envs.maze import MazeEnv

# 2018-02-13 04:51:31.670844
+from gym_maze.envs.generators import SimpleMazeGenerator, RandomMazeGenerator, RandomBlockMazeGenerator, UMazeGenerator, TMazeGenerator, WaterMazeGenerator

# 2018-02-13 04:51:40.514876
+env = MazeEnv(WaterMazeGenerator(20, 4), action_type='Moore',  render_trace=True)

# 2018-02-13 04:51:42.182196
+env

# 2018-02-13 04:51:45.187746
+env.action_space

# 2018-02-13 04:51:50.509418
+env.action_space.sample

# 2018-02-13 04:51:51.852213
+env.action_space.sample()

# 2018-02-13 10:15:39.721695
+import tensorflow as tf

# 2018-02-13 10:15:47.026249
+a = tf.constant(np.arange(12).reshape((4, 3)))

# 2018-02-13 10:15:49.614020
+import numpy as np

# 2018-02-13 10:15:50.504622
+a = tf.constant(np.arange(12).reshape((4, 3)))

# 2018-02-13 10:15:51.195901
+a

# 2018-02-13 10:16:23.774223
+actions = tf.placeholder(dtype=tf.int32, name="actions")

# 2018-02-13 10:16:33.856927
+tf.gather(a, actions)

# 2018-02-13 10:16:45.576407
+picked_actions = tf.gather(a, actions)

# 2018-02-13 10:16:53.495477
+sess = tf.Session()

# 2018-02-13 10:16:58.024056
+sess.__enter__()

# 2018-02-13 10:17:08.515629
+sess.run(tf.global_variables_initializer())

# 2018-02-13 10:17:23.556822
+sess.run(picked_actions, feed_dict={actions: 3})

# 2018-02-13 10:17:42.416379
+a

# 2018-02-13 10:17:49.972283
+sess.run([a, picked_actions], feed_dict={actions: 3})

# 2018-02-13 10:18:22.794324
+a

# 2018-02-13 10:18:35.004931
+a = tf.squeeze(tf.constant(np.arange(12).reshape((4, 3))))

# 2018-02-13 10:18:35.409779
+a

# 2018-02-13 10:30:06.283334
+import numpy as np

# 2018-02-13 10:30:46.157499
+np.random.uniform(0, 1000, size=[1000])

# 2018-02-13 10:32:22.658688
+ls

# 2018-02-13 10:39:18.181057
+gym

# 2018-02-13 10:39:20.390396
+gym_maze

# 2018-02-13 10:39:26.644979
+from gym_maze.envs.maze import MazeEnv

# 2018-02-13 10:39:30.364675
+from gym_maze.envs.generators import SimpleMazeGenerator, RandomMazeGenerator, RandomBlockMazeGenerator, UMazeGenerator, TMazeGenerator, WaterMazeGenerator

# 2018-02-13 10:39:34.735091
+env = MazeEnv(WaterMazeGenerator(20, 4), action_type='Moore',  render_trace=True)

# 2018-02-13 10:39:37.565860
+env.action_space.sample()

# 2018-02-13 10:45:42.168007
+keras

# 2018-02-13 10:46:11.571352
+from keras.layers import Dense

# 2018-02-13 10:46:14.768159
+from keras.layers import Lambda

# 2018-02-13 10:46:23.133575
+from keras.models import Sequential

# 2018-02-13 10:46:27.248198
+model = Sequential()

# 2018-02-13 10:46:58.419220
+model.add(Dense(1000, input_shape=(784,)))

# 2018-02-13 10:47:02.327458
+model.add(Dense(1000, input_shape=(100,)))

# 2018-02-13 10:47:22.065899
+model = Sequential()

# 2018-02-13 10:47:24.471770
+model.add(Dense(1000, input_shape=(784,)))

# 2018-02-13 10:47:37.070573
+model.add(Dense(100))

# 2018-02-13 10:47:40.177265
+model.add(Dense(10))

# 2018-02-13 10:48:17.145334
+model.add(Lambda(lambda x: x[2]))

# 2018-02-13 10:49:25.726346
+model.compile(optimizer='rmsprop', loss='mse', metrics=['acc'])

# 2018-02-13 10:50:34.799067
+model.output

# 2018-02-13 10:50:51.387528
+model.trainable_weights

# 2018-02-13 10:50:57.825244
+for i in model.trainable_weights:
+    print(i)

# 2018-02-13 10:53:09.468226
+from keras.optimizers import TFOptimizer

# 2018-02-13 10:53:27.177321
+help(TFOptimizer)

# 2018-02-13 10:56:18.546111
+opt = tf.train.AdamOptimizer()

# 2018-02-13 11:01:38.035723
+opt.compute_gradients(model)

# 2018-02-13 11:01:55.248658
+opt.compute_gradients(model.trainable_weights)

# 2018-02-13 11:01:58.315281
+opt.compute_gradients(model.trainable_weights[0])

# 2018-02-13 11:02:10.480373
+model.trainable_weights

# 2018-02-13 11:02:23.420371
+for i in opt.compute_gradients(model.trainable_weights[0]):
+    print(i)

# 2018-02-13 11:10:04.096772
+import keras 

# 2018-02-13 11:10:12.917683
+keras.optimizers.TFOptimizer(opt)

# 2018-02-16 16:27:28.386724
+from keras.models import Sequential

# 2018-02-16 16:27:30.422116
+model = Sequential()

# 2018-02-16 16:27:42.392255
+from keras.layers import Lambda, SimpleRNN

# 2018-02-16 16:28:06.518294
+model.add(SimpleRNN(100, input_shape=(28, 28)))

# 2018-02-16 16:28:17.560199
+from keras.layers import Dense

# 2018-02-16 16:28:22.644078
+model.add(Dense(10))

# 2018-02-16 16:28:35.976788
+from keras.utils import plot_model

# 2018-02-16 16:28:40.678525
+plot_model(model, to_file='model2.png', show_shapes=True)

# 2018-02-16 20:31:42.240494
+from pathlib import Path

# 2018-02-16 20:31:56.554614
+Path('./')

# 2018-02-16 20:32:15.408863
+Path('.').glob('*')

# 2018-02-16 20:32:35.667906
+from pathlib import Path

# 2018-02-16 20:32:49.290487
+Path('./keras-snippet.iml')

# 2018-02-16 20:32:51.023123
+Path('./keras-snippet.iml')[0]

# 2018-02-16 20:32:52.307377
+Path('./keras-snippet.iml')[1]

# 2018-02-16 20:32:54.560638
+Path('./keras-snippet.iml')

# 2018-02-16 20:33:05.101916
+Path('./keras-snippet.iml').open('w')

# 2018-02-16 20:33:21.353915
+Path('./keras-snippet.iml').parent

# 2018-02-16 20:33:22.690212
+Path('./keras-snippet.iml').parents

# 2018-02-16 20:33:28.901901
+Path('./keras-snippet.iml').parents[1]

# 2018-02-16 20:33:30.677388
+Path('./keras-snippet.iml').parents[0]

# 2018-02-16 20:33:41.227376
+Path('./keras-snippet.iml').parents[0].exists()

# 2018-02-16 20:33:45.643297
+Path('./keras-snippet.iml').exists()

# 2018-02-16 20:36:40.284545
+p = Path("./")

# 2018-02-16 20:36:45.477219
+list(p.glob("*"))

# 2018-02-16 20:36:51.899378
+for i in list(p.glob("*")):
+    print(i)

# 2018-02-16 20:40:28.678256
+Path.cwd()

# 2018-02-16 20:40:39.487004
+Path.cwd().parent

# 2018-02-18 20:49:05.334629
+import gym

# 2018-02-18 20:49:08.917439
+env = gym.make("MsPacman-v0")

# 2018-02-18 20:49:13.359724
+env.action_space

# 2018-02-18 20:49:18.757494
+env.action_space.n

# 2018-02-18 20:50:10.032461
+env.action_space

# 2018-02-18 20:50:11.722216
+env.action_space.low

# 2018-02-18 20:50:15.722263
+env.action_space()

# 2018-02-18 20:50:17.400438
+env.action_space

# 2018-02-18 20:50:20.968253
+env.action_space.contains

# 2018-02-18 20:50:23.395393
+env.action_space.contains()

# 2018-02-18 20:50:24.998767
+env.action_space.contains(0)

# 2018-02-18 20:50:26.887576
+env.action_space.contains(10)

# 2018-02-18 20:50:28.678253
+env.action_space.contains(9)

# 2018-02-18 20:50:31.523739
+env.action_space.contains(3)

# 2018-02-18 20:50:33.370222
+env.action_space.contains(8)

# 2018-02-18 20:50:39.900751
+env.action_space.compatible

# 2018-02-18 20:50:40.776426
+env.action_space.compatible()

# 2018-02-18 20:50:46.649140
+env.action_space.shape

# 2018-02-18 20:50:55.106025
+env.action_space.to_jsonable

# 2018-02-18 20:50:56.291597
+env.action_space.to_jsonable()

# 2018-02-18 20:51:00.425135
+env.action_space.to_jsonable(3)

# 2018-02-18 20:51:07.864760
+env.action_space.sample

# 2018-02-18 20:51:08.898159
+env.action_space.sample()

# 2018-02-18 20:52:25.879659
+import tensorflow as tf

# 2018-02-18 20:52:43.194783
+sess_c = tf.train.SessionCreator()

# 2018-02-18 20:53:21.358659
+sess = tf.train.MonitoredSession(sess_c)

# 2018-02-18 20:53:27.859849
+sess = tf.train.MonitoredSession()

# 2018-02-18 20:53:29.315171
+sess

# 2018-02-18 20:53:40.051932
+sess.__enter__()

# 2018-02-18 20:58:34.862717
+env3 = gym.make('MountainCarContinuous-v0')

# 2018-02-18 20:58:41.779202
+env3.observation_space

# 2018-02-18 20:58:46.770869
+env3.action_space

# 2018-02-18 20:58:49.597508
+env3.action_space.sample()

# 2018-02-18 20:58:57.398623
+env3.action_space.contains(1)

# 2018-02-18 20:58:59.196293
+env3.action_space.contains(1.)

# 2018-02-18 20:59:04.548297
+env3.action_space.contains((1.))

# 2018-02-18 20:59:06.872827
+import numpy as np

# 2018-02-18 20:59:13.873971
+env3.action_space.contains(np.array([1.]))

# 2018-02-18 20:59:17.963935
+env3.action_space.contains(np.array([1.2]))

# 2018-02-18 20:59:28.082525
+env3.action_space.shape

# 2018-02-18 20:59:48.902851
+env3.action_space.low

# 2018-02-18 21:03:38.369846
+from gym.spaces import Box

# 2018-02-18 21:03:39.259310
+Box

# 2018-02-18 21:09:48.009677
+env3.class_name

# 2018-02-18 21:09:49.309023
+env3.class_name()

# 2018-02-18 21:10:07.797958
+env3.env.high_state

# 2018-02-18 21:10:16.668767
+env3.env.low_state

# 2018-02-18 21:10:53.171655
+env.reward_range

# 2018-02-18 21:14:42.152362
+env.observation_space.low

# 2018-02-18 21:14:44.684807
+env.observation_space.high

# 2018-02-18 21:14:50.483534
+env.observation_space

# 2018-02-18 21:15:21.531206
+env3.observation_space.low

# 2018-02-18 21:20:58.913696
+from gym_maze.envs.generators import SimpleMazeGenerator, RandomMazeGenerator, RandomBlockMazeGenerator, UMazeGenerator, TMazeGenerator, WaterMazeGenerator

# 2018-02-18 21:21:08.413598
+from gym_maze.envs.maze import MazeEnv

# 2018-02-18 21:21:41.106613
+maze = WaterMazeGenerator(20, 4)
+env = MazeEnv(maze, action_type='Moore', render_trace=True)

# 2018-02-18 21:21:45.782898
+env.action_space

# 2018-02-18 21:22:27.992665
+env.action_space.n

# 2018-02-18 21:22:41.799764
+env.action_space.shape

# 2018-02-18 21:22:45.745866
+env.action_space.n

# 2018-02-18 21:22:54.703583
+env.action_space.contains(8)

# 2018-02-18 21:22:57.626236
+env.action_space.contains(7)

# 2018-02-18 21:23:42.136996
+env.observation_space.low

# 2018-02-18 21:23:48.493871
+env.observation_space

# 2018-02-18 21:25:35.156392
+env2 = gym.make("MsPacman-v0")

# 2018-02-18 21:25:43.654184
+env2.observation_space.low

# 2018-02-18 21:25:46.501155
+env2.observation_space.high

# 2018-02-18 21:26:55.031421
+env2.action_space.n

# 2018-02-18 21:29:33.450636
+env2.action_space.shape

# 2018-02-18 21:29:50.363305
+env2.action_space.n

# 2018-02-18 21:31:03.437447
+env3.action_space

# 2018-02-18 21:31:05.692423
+env3.action_space.low

# 2018-02-18 21:31:15.543388
+env3.action_space.high

# 2018-02-18 21:33:31.976693
+env.action_space.shape

# 2018-02-18 21:33:37.593155
+import numpy as np

# 2018-02-18 21:33:44.705686
+np.ones(())

# 2018-02-18 21:33:49.486915
+np.zeros(())

# 2018-02-18 21:46:58.835239
+from gym_maze.envs.maze import MazeEnv

# 2018-02-18 21:47:06.941222
+from gym_maze.envs.generators import SimpleMazeGenerator, RandomMazeGenerator, RandomBlockMazeGenerator, UMazeGenerator, TMazeGenerator, WaterMazeGenerator

# 2018-02-18 21:47:24.402239
+env = MazeEnv(maze, action_type='Moore', render_trace=True)

# 2018-02-18 21:47:32.873610
+maze = WaterMazeGenerator(20, 4)

# 2018-02-18 21:47:37.254376
+env = MazeEnv(maze, action_type='Moore', render_trace=True)

# 2018-02-18 21:54:37.054369
+from gym_maze.envs.maze import MazeEnv

# 2018-02-18 22:01:17.886182
+from gym_maze.envs.generators import SimpleMazeGenerator, RandomMazeGenerator, RandomBlockMazeGenerator, UMazeGenerator, TMazeGenerator, WaterMazeGenerator

# 2018-02-18 22:01:20.580698
+maze = WaterMazeGenerator(20, 4)

# 2018-02-18 22:01:24.667949
+env = MazeEnv(maze, action_type='Moore', render_trace=True)

# 2018-02-18 22:01:27.054738
+env

# 2018-02-18 22:01:32.007055
+MazeEnv

# 2018-02-18 22:01:48.554557
+from gym_maze.envs.maze import MazeEnv

# 2018-02-18 22:05:17.713252
+import gym

# 2018-02-18 22:05:22.259048
+import gym_memory

# 2018-02-18 22:05:32.574570
+env = gym.make("Water-Maze-v0")

# 2018-02-18 22:05:37.635247
+env = gym.make("Water-Mazeii-v0")

# 2018-02-18 22:05:39.722415
+env = gym.make("Water-Maze-v0")

# 2018-02-18 22:05:54.604528
+env = gym.make("WaterMaze-v0")

# 2018-02-18 22:05:57.033412
+env = gym.make("Water-Maze-v0")

# 2018-02-18 22:06:48.393203
+from gym_memory.envs import WaterMazeEnv

# 2018-02-18 22:06:59.586889
+a = WaterMazeEnv()

# 2018-02-18 22:07:01.555359
+env = WaterMazeEnv()

# 2018-02-18 22:10:14.446869
+gym.make('flappyBird-v0')

# 2018-02-18 22:10:26.149605
+import gym_memory

# 2018-02-18 22:10:28.332664
+import gym

# 2018-02-18 22:10:36.426274
+env = gym.make("Water-Maze-v0")

# 2018-02-18 22:10:52.189242
+env = gym.make("MsPacman-v0")

# 2018-02-18 22:10:54.496208
+env.reset()

# 2018-02-18 22:11:26.166809
+env.action_space

# 2018-02-18 22:24:55.546402
+env

# 2018-02-18 22:25:07.730451
+env.action_space.contains(0)

# 2018-02-18 22:27:08.549111
+env = gym.make("CarRacing-v0")

# 2018-02-18 22:27:11.333243
+env.action_space

# 2018-02-18 22:27:14.707719
+env.action_space.sample

# 2018-02-18 22:27:15.548269
+env.action_space.sample()

# 2018-02-18 22:27:19.846426
+env.action_space.low

# 2018-02-18 22:27:32.306658
+env.action_space.high

# 2018-02-18 22:31:21.948360
+env.action_space.low

# 2018-02-18 22:31:37.915906
+env.action_space.high

# 2018-02-18 22:31:57.770854
+pac = gym.make("MsPacman-v0")

# 2018-02-18 22:32:05.796466
+pac.action_space.n

# 2018-02-18 22:32:16.557411
+pac.action_space.shape

# 2018-02-18 22:34:20.842148
+memo = gym.make("MemorizeDigits-v0")

# 2018-02-18 22:34:30.344854
+memo.action_space.sample

# 2018-02-18 22:34:31.823926
+memo.action_space.sample()

# 2018-02-18 22:34:37.374719
+memo.action_space.shape

# 2018-02-18 22:35:17.207762
+memo.action_space.shape == ()

# 2018-02-18 22:35:19.675508
+memo.action_space.shape()

# 2018-02-18 22:35:27.736705
+memo.action_space.contains(0)

# 2018-02-18 22:36:19.859219
+memo.action_space.n

# 2018-02-18 22:37:09.971406
+None and 1 is None

# 2018-02-18 22:37:15.043482
+(None and 1) is None

# 2018-02-18 22:37:56.788974
+car = gym.make("CarRacing-v0")

# 2018-02-18 22:40:36.127486
+env = gym.make("CarRacing-v0")

# 2018-02-18 22:40:38.218364
+env.action_space

# 2018-02-19 00:34:36.668964
+env

# 2018-02-19 00:34:39.911248
+env.reset()

# 2018-02-19 00:34:52.572995
+import gym

# 2018-02-19 00:34:54.277693
+env = gym.make("CarRacing-v0")

# 2018-02-19 00:34:56.167934
+env.reset()

# 2018-02-19 00:36:04.998393
+env = gym.make("CarRacing-v1")

# 2018-02-19 00:36:13.401808
+env

# 2018-02-19 00:37:55.175753
+import gym

# 2018-02-19 00:37:56.491508
+env = gym.make("CarRacing-v1")

# 2018-02-19 00:37:58.608865
+env = gym.make("CarRacing-v0")

# 2018-02-19 00:38:02.356567
+env.render()

# 2018-02-19 00:38:08.692521
+import matplotlib.pyplot as plt

# 2018-02-19 00:38:10.284315
+plt.show()

# 2018-02-19 00:38:24.417292
+env.reset()

# 2018-02-19 00:38:35.564210
+env.render()

# 2018-02-19 00:38:42.290960
+plt.show()

# 2018-02-19 00:38:45.375504
+env.render()

# 2018-02-19 00:38:47.164433
+env.reset()

# 2018-02-19 00:38:52.887776
+env.step(1)

# 2018-02-19 00:38:59.504838
+env.step([0, 1, 2])

# 2018-02-19 00:39:03.502126
+env.action_space

# 2018-02-19 00:39:25.510802
+env.broadcast

# 2018-02-19 00:39:30.958280
+env.env

# 2018-02-19 00:39:33.556138
+env.close()

# 2018-02-19 00:39:37.430062
+env

# 2018-02-19 00:39:38.852418
+env = gym.make("CarRacing-v0")

# 2018-02-19 00:39:47.073781
+env.render()

# 2018-02-19 00:40:02.919223
+import matplotlib.pyplot as plt

# 2018-02-19 00:40:04.134237
+plt.show()

# 2018-02-19 00:40:10.478813
+env.reset()

# 2018-02-19 01:29:13.994777
+import tensorflow as tf

# 2018-02-19 01:29:16.402924
+import gym

# 2018-02-19 01:33:20.186083
+tf

# 2018-02-19 01:33:32.439233
+a = tf.random_normal((3, 2, 1))

# 2018-02-19 01:33:35.658415
+tf.rank(a)

# 2018-02-19 01:34:01.391554
+sess = tf.train.MonitoredSession()

# 2018-02-19 01:34:05.580039
+sess.__enter__()

# 2018-02-19 01:34:10.192722
+sess.run(tf.rank(a))

# 2018-02-19 01:34:20.021670
+a = tf.random_normal((3, 2, 1))

# 2018-02-19 01:34:35.540854
+import tensorflow as tf

# 2018-02-19 01:34:39.596353
+a = tf.rank(tf.random_normal((3, 2, 1)))

# 2018-02-19 01:34:40.409176
+a

# 2018-02-19 01:34:43.617823
+sess = tf.train.MonitoredSession()

# 2018-02-19 01:34:46.539416
+sess.__enter__()

# 2018-02-19 01:34:48.996870
+sess.run(a)

# 2018-02-19 01:35:07.475891
+a

# 2018-02-19 01:35:12.684359
+a.get_shape()

# 2018-02-19 01:35:28.828631
+a.shape

# 2018-02-19 01:35:30.625009
+a.shape()

# 2018-02-19 01:35:31.747765
+a.shape

# 2018-02-19 03:39:44.865428
+from pathlib import Path

# 2018-02-19 03:40:22.590856
+Path(".")

# 2018-02-19 03:40:25.014984
+path = Path(".")

# 2018-02-19 03:40:30.272837
+path.is_dir

# 2018-02-19 03:40:31.191002
+path.is_dir()

# 2018-02-19 04:05:12.641888
+a = tf.constant(0.)

# 2018-02-19 04:05:24.266632
+import tensorflow as tf

# 2018-02-19 04:05:26.942599
+a = tf.constant(0.)

# 2018-02-19 04:05:31.225380
+b = 2 * a

# 2018-02-19 04:06:10.821337
+g = tf.gradients(a + b, [a, b], grad_ys=100., stop_gradients=[a, b])

# 2018-02-19 04:06:17.624956
+sess = tf.train.MonitoredSession()

# 2018-02-19 04:06:21.154347
+sess.run(g)

# 2018-02-19 04:06:40.240941
+g2 = tf.gradients(a + b, [a, b], grad_ys=100.)

# 2018-02-19 04:06:49.294941
+import tensorflow as tf

# 2018-02-19 04:06:54.159607
+a = tf.constant(0.)

# 2018-02-19 04:06:55.540963
+b = 2 * a

# 2018-02-19 04:07:03.058761
+g = tf.gradients(a + b, [a, b], grad_ys=100.)

# 2018-02-19 04:07:06.569199
+sess = tf.train.MonitoredSession()

# 2018-02-19 04:07:08.938156
+sess.run(g)

# 2018-02-19 04:12:00.592280
+import tensorflow as tf

# 2018-02-19 04:12:04.112911
+a = tf.constant(0.)

# 2018-02-19 04:12:05.173528
+b = 2 * a

# 2018-02-19 04:12:11.044046
+g = tf.gradients(a + b, [a, b])

# 2018-02-19 04:12:16.540099
+g2 = tf.gradients(a + b, [a, b], stop_gradients=[a, b])

# 2018-02-19 04:12:19.097460
+sess = tf.train.MonitoredSession()

# 2018-02-19 04:12:22.523543
+sess.run(g)

# 2018-02-19 04:12:24.697657
+sess.run(g2)

# 2018-02-19 04:30:45.656257
+import tensorflow as tf

# 2018-02-19 04:30:48.843454
+a = tf.constant(0.)

# 2018-02-19 04:30:51.487536
+b = 2 * a

# 2018-02-19 04:31:07.742203
+opt = tf.train.AdamOptimizer()

# 2018-02-19 04:32:11.665695
+g = opt.compute_gradients([a + b], var_list=[a, b], grad_loss=100.)

# 2018-02-19 04:32:21.974479
+g = opt.compute_gradients(a + b, var_list=[a, b], grad_loss=100.)

# 2018-02-19 04:32:24.185785
+g = opt.compute_gradients(a + b, var_list=[a, b], grad_loss=100)

# 2018-02-19 04:32:27.732041
+g = opt.compute_gradients(a + b, var_list=[a, b])

# 2018-02-19 12:53:49.554192
+import tensorflow as tf

# 2018-02-19 12:54:11.855757
+x = tf.Variable(1.)

# 2018-02-19 12:54:12.548275
+x

# 2018-02-19 12:54:41.825186
+g= tf.gradients(x, x, grad_ys=[100.])

# 2018-02-19 12:54:45.772974
+sess = tf.train.MonitoredSession()

# 2018-02-19 12:54:50.647336
+sess.__enter__()

# 2018-02-19 12:55:01.882115
+sess.run(g)

# 2018-02-19 12:55:14.200320
+x = tf.Variable(1.)

# 2018-02-19 12:55:20.995896
+import tensorflow as tf

# 2018-02-19 12:55:22.307451
+x = tf.Variable(1.)

# 2018-02-19 12:55:25.924012
+y = x ** 2

# 2018-02-19 12:55:45.588296
+g = tf.gradients([x, y], [x], grad_ys=[100.])

# 2018-02-19 12:55:54.634644
+g = tf.gradients(y, [x], grad_ys=[100.])

# 2018-02-19 12:55:58.386096
+g2 = tf.gradients(x, [x], grad_ys=[100.])

# 2018-02-19 12:56:07.766492
+sess = tf.train.MonitoredSession()

# 2018-02-19 12:56:12.062734
+sess.__enter__()

# 2018-02-19 12:56:22.898345
+sess.run(g, g2)

# 2018-02-19 12:56:31.147026
+sess.run([g, g2])

# 2018-02-19 13:13:15.865877
+import keras.backend.tensorflow_backend as K

# 2018-02-19 13:13:32.009690
+K.placeholder([None, 10], 3)

# 2018-02-19 13:13:34.369387
+K.placeholder([None, 10])

# 2018-02-19 13:13:44.060164
+import keras.backend.tensorflow_backend as K

# 2018-02-19 13:13:46.024470
+K.placeholder([None, 10])

# 2018-02-19 13:13:49.274286
+K.placeholder([None, 10], 3)

# 2018-02-19 13:27:24.031089
+from keras import layers

# 2018-02-19 13:27:51.084508
+action_tensor = layers.Input(shape=())

# 2018-02-19 13:27:53.162237
+action_tensor

# 2018-02-19 13:29:15.145927
+layers.Dense(action_tensor)

# 2018-02-19 13:29:28.553834
+layers.Dense(1)(action_tensor)

# 2018-02-19 13:29:36.699522
+action_tensor = layers.Input(shape=(1))

# 2018-02-19 13:29:44.323649
+action_tensor = layers.Input(shape=(1,))

# 2018-02-19 13:29:46.955022
+action_tensor

# 2018-02-19 13:29:53.133359
+layers.Dense(1)(action_tensor)

# 2018-02-19 13:31:30.281261
+action_tensor = layers.Input(shape=(0,))

# 2018-02-19 13:31:33.376369
+action_tensor

# 2018-02-19 13:31:49.501624
+action_tensor = layers.Input(shape=(1,))

# 2018-02-19 13:31:53.175413
+action_tensor

# 2018-02-19 13:32:21.701173
+shape = ()

# 2018-02-19 13:32:49.296637
+shape

# 2018-02-19 13:33:01.879809
+len(shape)

# 2018-02-19 13:46:06.202630
+import gym

# 2018-02-19 13:46:26.555683
+env = gym.make('MountainCarContinuous-v0')

# 2018-02-19 13:46:32.625492
+env.action_space.shape

# 2018-02-19 13:46:43.441833
+env.action_space.sample()

# 2018-02-19 13:47:02.990345
+env2 = gym.make("MsPacman-v0")

# 2018-02-19 13:47:13.159517
+env2.action_space.shape

# 2018-02-19 13:47:16.737403
+env2.action_space.sample()

# 2018-02-20 20:26:10.000286
+type(10)

# 2018-02-20 20:26:26.724340
+int()

# 2018-02-20 20:26:29.347423
+a = int()

# 2018-02-20 20:26:30.170334
+a

# 2018-02-20 20:26:42.915179
+b = str()

# 2018-02-20 20:26:43.806946
+b

# 2018-02-20 20:27:23.844128
+class reon_int(int):
+    def __add__(self, other):
+        return self + other

# 2018-02-20 20:27:27.927108
+a = reon_int()

# 2018-02-20 20:27:28.288168
+a

# 2018-02-20 20:27:35.869179
+b = reon_int(10)

# 2018-02-20 20:27:36.458868
+a

# 2018-02-20 20:27:36.640049
+b

# 2018-02-20 20:27:38.307326
+a + b

# 2018-02-20 20:27:58.543711
+class reon_int(int):
+    def __add__(self, other):
+        return self.denominator

# 2018-02-20 20:28:04.420327
+a = reon_int()

# 2018-02-20 20:28:06.150329
+b = reon_int(10)

# 2018-02-20 20:28:07.101941
+a + b

# 2018-02-20 20:28:08.960221
+a

# 2018-02-20 20:28:09.220209
+b

# 2018-02-20 20:30:39.723173
+type(int)

# 2018-02-20 20:31:09.780151
+type(10)

# 2018-02-20 20:39:04.967559
+a = int()      

# 2018-02-20 20:39:06.293171
+a

# 2018-02-20 20:39:33.565030
+b = int(10)      

# 2018-02-20 20:39:34.962250
+b

# 2018-02-20 20:39:46.132876
+a + b

# 2018-02-20 20:40:02.936243
+int + int

# 2018-02-20 20:41:50.732194
+class reon_int(int):
+    def __add__(self, other):
+        return self.real + other.real

# 2018-02-20 20:41:53.099577
+a = reon_int()

# 2018-02-20 20:41:56.799699
+b = reon_int(10)

# 2018-02-20 20:41:57.809103
+a = b

# 2018-02-20 20:42:00.541656
+a + b

# 2018-02-20 20:42:06.693415
+class reon_int(int):
+    def __add__(self, other):
+        return self.real * other.real

# 2018-02-20 20:43:14.349054
+a = reon_int()

# 2018-02-20 20:47:26.026537
+a

# 2018-02-20 20:47:48.216655
+int()  

# 2018-02-20 20:49:43.541383
+a = reon_int(10)

# 2018-02-20 20:49:45.301417
+a

# 2018-02-20 20:49:53.888217
+b = reon_int(108)

# 2018-02-20 20:49:55.152831
+b

# 2018-02-20 20:50:40.237080
+a + b 

# 2018-02-20 21:05:36.659716
+class Car():
+    def __init__(self, name):
+        self.name = name
+        self.speed_per_hour = 0.
+    def run(distance):
+        return distance / self.speed_per_hour

# 2018-02-20 21:06:03.373838
+class Car():
+    def __init__(self, name, speed_per_hour):
+        self.name = name
+        self.speed_per_hour = speed_per_hour
+       
+    def run(distance):
+        return distance / self.speed_per_hour

# 2018-02-20 21:06:46.321279
+Polshe = Car(name="Posle", speed_per_hour=100)

# 2018-02-20 21:07:30.067130
+light_car = Car(name="LightCar", speed_per_hour=30)

# 2018-02-20 21:08:58.346134
+print(Polshe.name)

# 2018-02-20 21:09:05.463897
+print(light_car.name)

# 2018-02-20 21:09:35.186739
+Polshe.run(distance=1000)

# 2018-02-20 21:09:47.785254
+class Car():
+    def __init__(self, name, speed_per_hour):
+        self.name = name
+        self.speed_per_hour = speed_per_hour
+       
+    def run(self, distance):
+        return distance / self.speed_per_hour

# 2018-02-20 21:09:55.692798
+Polshe = Car(name="Posle", speed_per_hour=100)

# 2018-02-20 21:10:00.066248
+light_car = Car(name="LightCar", speed_per_hour=30)

# 2018-02-20 21:10:06.641092
+Polshe.run(distance=1000)

# 2018-02-20 21:10:18.444552
+light_car.run(distance=1000)

# 2018-02-20 21:15:23.835584
+class Car():
+    def __init__(self, name, speed_per_hour, motor_car=False):
+        self.name = name
+        self.is_motor_car = motor_car
+        self.speed_per_hour = speed_per_hour
+       
+    def run(self, distance):
+        return distance / self.speed_per_hour

# 2018-02-20 21:15:41.646594
+Polshe = Car(name="Posle", speed_per_hour=100)

# 2018-02-20 21:15:47.151352
+Polshe.is_motor_car

# 2018-02-20 21:16:35.947737
+motor = Car(mothr_car=True, name="Pluse", speed_per_hour=70)

# 2018-02-20 21:16:40.564290
+motor = Car(motor_car=True, name="Pluse", speed_per_hour=70)

# 2018-02-20 21:16:55.815743
+motor.run(distance=1000)

# 2018-02-20 21:17:12.349760
+pluse = Car(motor_car=True, name="Pluse", speed_per_hour=70)

# 2018-02-20 21:17:16.762964
+pluse.name

# 2018-02-20 21:17:23.291353
+pluse.is_motor_car

# 2018-02-20 21:18:01.094235
+class Car():
+    def __init__(self, name, speed_per_hour, motor_car=False):
+        self.name = name
+        self.is_motor_car = motor_car
+        self.speed_per_hour = speed_per_hour
+       
+    def run(self, distance):
+        return distance / self.speed_per_hour

# 2018-02-20 21:18:06.215870
+Polshe = Car(name="Posle", speed_per_hour=100)

# 2018-02-20 21:18:14.692314
+pluse = Car(motor_car=True, name="Pluse", speed_per_hour=70)

# 2018-02-20 21:18:20.815822
+Polshe.run(distance=1000)

# 2018-02-20 21:18:28.314925
+pluse.run(distance=1000)

# 2018-02-20 21:18:34.946030
+Polshe.is_motor_car

# 2018-02-20 21:18:40.430556
+pluse.is_motor_car

# 2018-02-21 00:24:20.032485
+i = [0] * 5

# 2018-02-21 00:24:20.623501
+i

# 2018-02-21 00:24:24.493184
+len(i)

# 2018-02-21 00:24:32.106640
+i[1:2] = 0x00, 0x00

# 2018-02-21 00:24:32.783035
+i

# 2018-02-21 00:24:44.249629
+i[1:2]

# 2018-02-21 00:25:01.120489
+i[1:2] = [0x00, 0x00]

# 2018-02-21 00:25:01.797531
+i

# 2018-02-21 00:26:15.333316
+i = [0] * 5

# 2018-02-21 00:26:28.343679
+i.insert(1, [0x01, 0x01])

# 2018-02-21 00:26:29.091281
+i

# 2018-02-21 00:26:35.933871
+i.insert(1, 0x01, 0x01)

# 2018-02-21 00:26:59.711697
+i[0] = 0x00, 0x00

# 2018-02-21 00:27:00.267295
+i

# 2018-02-21 00:27:52.901757
+i[1:2]

# 2018-02-21 00:27:57.688133
+i = [0] * 5

# 2018-02-21 00:27:59.583877
+i[1:2]

# 2018-02-21 00:28:44.510312
+i[1:2] = [0, 0]

# 2018-02-21 00:28:45.045535
+i

# 2018-02-21 08:55:59.195863
+import nltk

# 2018-02-21 13:01:22.791215
+import keras.backend.tensorflow_backend as K
+import numpy as np
+import tensorflow as tf
+from keras.layers import Dense, Input, concatenate
+from keras.models import Model
+
+
+def build_model():
+  inputs = Input(shape=(784,))
+  actions = Input(shape=(10,))
+  x1 = Dense(1000, activation='relu')(inputs)
+  x2 = Dense(1000, activation='relu')(actions)
+  merged = concatenate([x1, x2], axis=-1)
+  outputs = Dense(10, activation='softmax')(merged)
+  model = Model(inputs=[inputs, actions], outputs=outputs)
+  return model
+
+
+def main(_):
+  critic = build_model()
+  target = tf.placeholder(tf.float32, [None, 10])
+
+  action_grads = tf.gradients(critic.output, critic.inputs[1])[0]
+  print(action_grads)
+
+  opt = tf.train.GradientDescentOptimizer(0.001) \
+    .apply_gradients([action_grads, critic.inputs[1]])
+
+
+  sess = tf.train.MonitoredSession()
+  sess.__enter__()
+  K.set_learning_phase(1)
+  K.set_session(sess)
+
+  state_batch = np.random.uniform(size=(1000, 784))
+  a_outs = np.random.uniform(size=(1000, 10))
+  target_batch = np.random.uniform(size=(1000, 10))
+
+  critic_weight1 = sess.run(critic.weights[0])
+  critic_weight2 = sess.run(critic.weights[1])
+  critic_weight3 = sess.run(critic.weights[2])
+  critic_weight4 = sess.run(critic.weights[3])
+
+  sess.run(opt, feed_dict={
+    critic.inputs[0]: state_batch,
+    critic.inputs[1]: a_outs,
+    target: target_batch
+  })
+
+  critic_weight_aft = sess.run(critic.weights[0])
+  critic_weight2_aft = sess.run(critic.weights[1])
+  critic_weight3_aft = sess.run(critic.weights[2])
+  critic_weight4_aft = sess.run(critic.weights[3])
+
+  # TODO: testing the weight of critic get changed whether.
+  np.testing.assert_array_equal(
+      critic_weight1, critic_weight_aft)
+  # np.testing.assert_array_equal(
+  #     critic_weight2, critic_weight2_aft)
+  np.testing.assert_array_equal(
+      critic_weight3, critic_weight3_aft)
+  # np.testing.assert_array_equal(
+  #     critic_weight4, critic_weight4_aft)
+
+
+if __name__ == '__main__':
+  old_session = K.get_session()
+  tf.app.run()
+K.set_session(old_session)

# 2018-02-21 13:01:39.789644
+grads_and_vars

# 2018-02-21 21:04:09.995760
+import tensorflow as tf

# 2018-02-21 21:04:16.005225
+c = tf.constant('Hello, distributed TF')

# 2018-02-21 21:04:23.270436
+server = tf.train.Server.create_local_server()

# 2018-02-21 21:36:23.019474
+import keras.backend.tensorflow_backend as K

# 2018-02-22 12:31:56.522652
+import numpy as np

# 2018-02-22 12:32:06.201722
+from sklearn import datasets

# 2018-02-22 12:32:14.512526
+from sklearn.manifold import TSNE

# 2018-02-22 12:32:24.036915
+import matplotlib.pyplot as plt

# 2018-02-22 12:32:30.146875
+boston = datasets.load_boston()

# 2018-02-22 12:32:39.783216
+model = TSNE(n_components=2)

# 2018-02-22 12:33:04.633436
+tsne_result = model.fit_transform(boston.data)

# 2018-02-22 12:33:29.037357
+plt.plot(tsne_result[:, 0], tsne_result[:, 1], ".")

# 2018-02-22 12:33:40.693609
+plt.show()

# 2018-02-22 12:33:58.830792
+plt.plot(boston[:, 0], boston[:, 1], ".")

# 2018-02-22 12:34:04.385222
+boston.shape

# 2018-02-22 12:34:06.777585
+boston

# 2018-02-22 12:34:10.959861
+boston[0]

# 2018-02-22 12:34:25.512029
+boston.data.shape

# 2018-02-22 12:34:34.647223
+boston.data[:, 0]

# 2018-02-22 12:34:36.614619
+boston.data[:, 0].shape

# 2018-02-22 12:34:39.259445
+boston.data[:, 1].shape

# 2018-02-22 12:34:44.318742
+boston.data.shape

# 2018-02-22 12:34:56.374882
+plt.plot(boston.data[:, 0], boston.data[:, 1], ".")

# 2018-02-22 12:35:04.059053
+plt.show()

# 2018-02-22 13:20:54.128383
+import tensorflow as tf

# 2018-02-23 00:41:14.102448
+from keras.layers import Dense, Input, concatenate

# 2018-02-23 00:42:08.492182
+x = Dense(10, kernel_initializer=tf.random.uniform((100, 10)))

# 2018-02-23 00:42:22.366696
+x = Dense(10, kernel_initializer=tf.random_uniform((100, 10)))

# 2018-02-23 00:42:37.600650
+x = tf.layers.dense(10, kernel_initializer=tf.random_uniform((100, 10)))

# 2018-02-23 00:42:43.688809
+x = tf.layers.dense(units=10, kernel_initializer=tf.random_uniform((100, 10)))

# 2018-02-23 00:43:03.060982
+inputs = tf.placeholder(tf.float32, [None, 100])

# 2018-02-23 00:43:13.889527
+x = tf.layers.dense(inputs, 10, kernel_initializer=tf.random_uniform((100, 10)))

# 2018-02-23 00:44:31.706848
+import numpy as np

# 2018-02-23 00:44:49.685825
+init = tf.constant_initializer(np.random.uniform(size=(100, 10)))

# 2018-02-23 00:44:51.482896
+init

# 2018-02-23 00:45:10.699878
+tf.layers.dense(inputs, 10, kernel_constraint=init)

# 2018-02-23 00:45:18.653966
+tf.layers.dense(inputs, 10, kernel_initializer==init)

# 2018-02-23 00:45:41.751577
+tf.layers.dense(inputs, 10, kernel_initializer=init)

# 2018-02-23 00:47:30.846137
+Dense(10, kernel_initializer=init)(inputs)

# 2018-02-23 00:48:21.271037
+a = _

# 2018-02-23 00:48:26.408649
+a.get_shape()

# 2018-02-23 00:48:28.519047
+a.get_shape()[1]

# 2018-02-23 00:48:40.419523
+Dense(a.get_shape()[1])

# 2018-02-23 00:52:43.771619
+Dense(kernel_initializer=init)(inputs)

# 2018-02-23 00:53:20.054509
+x = Dense(10, kernel_initializer=init)(inputs)

# 2018-02-23 00:53:20.439334
+x

# 2018-02-23 00:53:27.409259
+from keras.models import Model

# 2018-02-23 00:53:34.593921
+Model(inputs, x)

# 2018-02-23 00:53:58.097583
+inputs = Input((100,))

# 2018-02-23 00:54:00.608144
+inputs

# 2018-02-23 00:54:04.441389
+Model(inputs, x)

# 2018-02-23 00:57:58.034508
+x = Dense(10, kernel_initializer=np.zeros(size=(10, 10)))(inputs)

# 2018-02-23 00:58:06.180477
+import keras

# 2018-02-23 00:58:21.407878
+x = Dense(10, kernel_initializer=keras.initializers.Constant(np.zeros(size=(10, 10))))(inputs)

# 2018-02-23 01:04:54.054457
+import keras.backend.tensorflow_backend as K

# 2018-02-23 01:05:32.675360
+K.random_normal((10, 64), K.floatx)

# 2018-02-23 01:05:48.380092
+init = K.random_normal((10, 64))

# 2018-02-23 01:05:53.691656
+model = Sequential()

# 2018-02-23 01:05:59.392281
+from keras.models import Sequential

# 2018-02-23 01:06:00.759114
+model = Sequential()

# 2018-02-23 01:06:20.367112
+model.add(Dense(10, kernel_initializer=init))

# 2018-02-23 01:06:25.554834
+model.add(Dense(64, kernel_initializer=init))

# 2018-02-23 01:06:53.575722
+
+def my_init(shape, dtype=None):
+    return K.random_normal(shape, dtype=dtype)
+
+model.add(Dense(64, kernel_initializer=my_init))

# 2018-02-23 01:07:36.948210
+inputs = Input((100,))

# 2018-02-23 01:07:46.907136
+model.add(inputs)

# 2018-02-23 01:08:09.460369
+inputs = Input((100,))

# 2018-02-23 01:08:11.563688
+inputs

# 2018-02-23 01:08:27.671758
+
+def my_init(shape, dtype=None):
+    return K.random_normal(shape, dtype=dtype)
+
+x = Dense(64, kernel_initializer=my_init)(inputs)

# 2018-02-23 01:08:28.795589
+x

# 2018-02-23 01:08:47.963675
+model = Model(inputs=inputs, outputs=x)

# 2018-02-25 03:00:19.300919
+from keras.datasets.mnist import load_data

# 2018-02-25 03:00:23.555040
+(x_train, y_train), (x_test, y_test) = load_data()

# 2018-02-25 03:00:25.978659
+x_train.shape
